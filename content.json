{"meta":{"title":"Vincent's Corner","subtitle":"See More! Learn More! Do More!","description":"Who knows what fantastic things around Vincent's corner?","author":"Vincent Ting Syuan Wang","url":"https://tingsyuanwang.github.io"},"pages":[{"title":"關於","date":"2016-08-30T11:17:58.000Z","updated":"2017-04-22T17:08:35.000Z","comments":true,"path":"about/index.html","permalink":"https://tingsyuanwang.github.io/about/index.html","excerpt":"","text":"自我介紹（Self-Introduction） 我叫王霆瑄(Vincent)， 來自台中，熱愛閱讀、運動和旅行， 對於新鮮的事物更是愛不釋手。 我的座右銘 你若成功了 放屁都有道理 你若失敗了 再有道理都是屁 我的誕生 公元一九九四年，夏天。 傍晚。細濛濛的小雨從天而降，在路燈外緣交織成一團濕淋淋的光幕。醫院內，手術房裡本是一陣沉悶的氣息，交雜著汗水，但娃娃的哭鬧聲撕裂了這陣寂靜，取而代之的是喜悅和更多的歡樂的氛圍，一個新生命的誕生，他將用雙眼來見識這個世界，用雙手去探索這個生命。 學歷（Educational Background） National Taichung University of Science and Technology (國立臺中科技大學) Computer Science and Information Engineering, M.S. (資訊工程研究所) China Medical University （中國醫藥大學） Department of Traditional Chinese Medicine, M.S. （中國醫學研究所） Asia University （亞洲大學） Department of Foreign Languages and Literature, B.A. （外國語文學系） 聯繫我（Contact Ｍe） WeChat的好友： LINE的好友： 寫信給我：dtvgood202@gmail.com Facebook私訊敲我：Facebook個人頁面"}],"posts":[{"title":"Lavarel 快速學習自我挑戰 Day1","slug":"Lavarel 快速學習自我挑戰-Day1","date":"2017-04-21T19:00:35.000Z","updated":"2017-04-22T19:33:56.000Z","comments":true,"path":"2017/04/22/Lavarel 快速學習自我挑戰-Day1/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/04/22/Lavarel 快速學習自我挑戰-Day1/","excerpt":"","text":"安裝 PHP 環境 安裝 XAMPP，選 PHP 最新版本。 啟動 XAMPP，網址列輸入 localhost，可以看到 XAMPP 的最新畫面。 安裝 IDE (PhpStorm) 官方網站。 學生免費。 下載 IDE。 Install Composer (相依套件管理器) Composer官方網站。 找套件的網站：packagist。 Download Composer。 按照程式碼安裝之後，會產生一個 composer.phar，為了要在全域使用，在 .zshrc 裡面加上export PATH=&quot;~/.composer/vendor/bin:$PATH&quot;，在指令列用source .zshrc更新檔案。 啟動 laravel 專案 composer create-project --prefer-dist laravel/laravel cms 5.2.29 更改讀取權限 chmod -R o+w cms/storage，就可以直接預覽了。 如果不想修改權限，可以在修改 httpd 設定檔。 vim /Applications/XAMPP/xamppfiles/etc/httpd.conf 將 User daemon 改成 User 你的Username。 Virtual hosts 修改 httpd 設定檔 vim /Applications/XAMPP/xamppfiles/etc/httpd.conf 把 Virtaul hosts include 進去 (將 # 移除) Include etc/extra/httpd-vhosts.conf 修改 hosts 檔案 vim /etc/hosts 加上 127.0.0.1 cms.dev 修改 vhosts 設定檔 vim /Applications/XAMPP/etc/extra/httpd-vhosts.conf 將檔案修改為以下格式 12345678910111213141516171819202122232425262728# &lt;URL:http://httpd.apache.org/docs/2.4/vhosts/&gt;# for further details before you try to setup virtual hosts.## You may use the command line option &apos;-S&apos; to verify your virtual host# configuration.NameVirtualHost *:80## VirtualHost example:# Almost any Apache directive may go into a VirtualHost container.# The first VirtualHost section is used for all requests that do not# match a ServerName or ServerAlias in any &lt;VirtualHost&gt; block.#&lt;VirtualHost *:80&gt; ServerAdmin webmaster@dummy-host.example.com DocumentRoot &quot;/Applications/XAMPP/xamppfiles/htdocs&quot; ServerName localhost ServerAlias www.localhost&lt;/VirtualHost&gt;&lt;VirtualHost *:80&gt; ServerAdmin webmaster@dummy-host2.example.com DocumentRoot &quot;/Applications/XAMPP/xamppfiles/htdocs/cms/public&quot; ServerName cms.dev# ErrorLog &quot;logs/dummy-host2.example.com-error_log&quot;# CustomLog &quot;logs/dummy-host2.example.com-access_log&quot; common&lt;/VirtualHost&gt; 用 PhpStorm 打開專案 點選 open，選擇 laravel 專案目錄。 觀念摘錄 MVC 架構 Model (Deals with Databse), View (Deals with the HTML), Controller (The middle-man)。 快捷鍵設定 — 加入 .zshrc 輸入 desk 直接跳到桌面 alias desk=&quot;cd /Users/**USERNAME**/Desktop&quot; 輸入 refzsh 更新 .zshrc alias refzsh=&quot;source ~/.zshrc&quot; 輸入 zsh 編輯 .zshrc alias zsh=&quot;vim ~/.zshrc&quot; 輸入 htdocs 跳轉到 htdocs 目錄 alias htdocs=&quot;cd /Applications/XAMPP/htdocs&quot;","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Laravel","slug":"Laravel","permalink":"https://tingsyuanwang.github.io/tags/Laravel/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"React快速學習自我挑戰 Day12","slug":"React快速學習自我挑戰-Day12","date":"2017-04-03T06:41:19.000Z","updated":"2017-04-03T19:39:14.000Z","comments":true,"path":"2017/04/03/React快速學習自我挑戰-Day12/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/04/03/React快速學習自我挑戰-Day12/","excerpt":"","text":"{title.touched ? title.error : ''}，如果 title.touched 是 true，顯示 title.error，如果不是，什麼都不要顯示。 {`form-group ${title.touched &amp;&amp; title.invalid ? 'has-danger' : ''}`}，如果 title 被 touched，而且 title 是 invalid，顯示 className “has-danger”，否則顯示空白 string。 盡量避免使用 context。只有在我們使用 react-router 的時候再使用 context。 Create Post 是一個 action creator，action creator 可以創造一個 promise 當作他自己的 payload。當我們呼叫 action creator，就會產生一個當作 payload 的 promise，所以當 promise 解決以後，就等同於我們順利創建一個 post 了。 要存取 react-router，我們必須定義 contextTypes。這告訴 react 我想要從 parent component 存取這個 property。 Lorem Ipsum 產生器。 redux thunk 是用來處理非同步的 action creator。 dispatch method 是 redux store 的一部份，包含了 application state。 Firebase react library。","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React","slug":"React","permalink":"https://tingsyuanwang.github.io/tags/React/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"React快速學習自我挑戰 Day11","slug":"React快速學習自我挑戰-Day11","date":"2017-03-30T06:35:46.000Z","updated":"2017-03-30T16:16:01.000Z","comments":true,"path":"2017/03/30/React快速學習自我挑戰-Day11/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/03/30/React快速學習自我挑戰-Day11/","excerpt":"","text":"React Lifecycle method 是一個 React Component class 的 function，用來被 React 自動呼叫。 componentWillMount 是一個 Lifecycle method，他會在第一次 component 將要被 DOM render 的時候自動呼叫 componentWillMount，但是當下一次執行 component 的時候，就不會再執行 componentWillMount。 componentWillMount 用在不知道什麼情況下要 fetch data。 如果要讓 react component 可以呼叫 action creator，我們必須要把 component 提升為 container。 製作 container 的方法。 import connect import action creator 定義 mapDispatchToProps function，然後連接到 component。 Redux Form。 import { reducer as formReducer } from 'redux-form';，import redux-form，拿取 reducer 這個 property，然後建立一個名為 formReducer 的變數。(此用法為了避免命名上的衝突) const { handleSubmit } = this.props; === const handleSubmit = this.props.handleSubmit; const { fields: { title, categories, content}, handleSubmit } = this.props; === const title = this.props.fields.title;。 reduxform 可以被用來注入 action creators 到 component 裡面，然後創建一個在 component 外的 container。 reduxform 和 connect 的不同就是 reduxform 有一個額外的參數傳遞給他。 connect：第一個參數是 mapStateToProps，第二個是 mapDispatchToProps。 reduxform：第一個是 form config，第二個是 mapStateToProps，第三個是 mapDispatchToProps。","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React","slug":"React","permalink":"https://tingsyuanwang.github.io/tags/React/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"React快速學習自我挑戰 Day10","slug":"React快速學習自我挑戰-Day10","date":"2017-03-22T02:16:50.000Z","updated":"2017-03-26T14:06:22.000Z","comments":true,"path":"2017/03/22/React快速學習自我挑戰-Day10/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/03/22/React快速學習自我挑戰-Day10/","excerpt":"","text":"Redux Blog Post API Reference。 Postman 是一個 HTTP client 的 API。 npm install --save react-router@2.0.0-rc5，安裝 react router。 React-Router 套件有 History 的子套件，用來管理網頁的 URL，監控改變並隨著時間更新。 History 對 URL 互動，並將更新傳送給 React-Router，React-Router 拿到 URL 之後並根據 URL 決定哪個 React Component 需要更新。 Router 是一個當 URL 改變時，我們需要決定哪個 React Component 需要重新 render 的物件。 browserHistory 是一個告訴 React-Router 如何 interpret URL changes 物件。 History 有 browserHistory、hashHistory、memoryHistory 可以使用。 IndexRoute 是一個做起來像是 Route，但是當 URL 符合我們所定義的 parent path 才會出現的 helper。","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React","slug":"React","permalink":"https://tingsyuanwang.github.io/tags/React/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"React快速學習自我挑戰 Day9","slug":"React快速學習自我挑戰-Day9","date":"2017-03-14T12:17:57.000Z","updated":"2017-03-22T02:09:52.000Z","comments":true,"path":"2017/03/14/React快速學習自我挑戰-Day9/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/03/14/React快速學習自我挑戰-Day9/","excerpt":"","text":"React Sparkline(畫圖工具)。 class based component：有變數傳遞。 function based component：無變數傳遞。 action type 用 const 定義，這樣才能在 action 和 reducer 裡面指定 action type。 在本專案中用的 middleware 就是 redux promise，我們用 redux promise 來處理收到的 promise，然後使用 axios 來產生 AJAX request，這個 middleware 會自動偵測我們提供的 promise 的 payload，middleware 會停止 action 並等到問題解決、promise 才會解決，middleware 就會從 request 把回傳的 data 拿來塞在 payload 這個 property，然後把 action 送到本專案的所有 reducer 中。 雖然 Ajax request 本質上涉及非同步式語言，但我們完全不需要思考到非同步語言的部分。我們只要寫創造 action、然後流向 reducer，我們並不需要擔心任何 promise 或是 callback。 我們從不做 state.weather.push 這樣的動作，不要直接修改 state，取而代之的是，我們 return 一個新物件來代替已經存在的 state。","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React","slug":"React","permalink":"https://tingsyuanwang.github.io/tags/React/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"React快速學習自我挑戰 Day8","slug":"React快速學習自我挑戰-Day8","date":"2017-03-13T14:56:31.000Z","updated":"2017-03-14T12:15:12.000Z","comments":true,"path":"2017/03/13/React快速學習自我挑戰-Day8/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/03/13/React快速學習自我挑戰-Day8/","excerpt":"","text":"Middleware 是一個 function，Middleware 可以選擇讓 action 通過，還可以操縱 action。 在到達 reducer 之前，我們可以在 action 上的所有不同型態的小任務做 console.log 或 stop。 application state 擁有 application 全部的 data。 新增 data 需要 dispatch 一個 action 來呼叫(action creactor)，然後他要 AJAX request 負責。 在處理 action type 的時候，不可將不同型態的值傳遞到 reducer，需要先做 export const FETCH_WEATHER = 'FETCH_WEATHER';。 axios 是一個從瀏覽器製作 Ajax request 的 Library。 Promise 不包含任何 data。 Redux Promis 是一個 Middleware，在點擊任何 reducer 之前，Middleware 都可以選擇讓 action 通過，還可以操縱 action。 state.push 的用法會回傳一整個新的 array；用 state.concat 則是將新東西加上 array。 ES5 return state.concat([action.payload.data]); = ES6 return [ action.payload.data, ...state ];。 { weather } === { weather: weather }。","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React","slug":"React","permalink":"https://tingsyuanwang.github.io/tags/React/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"React快速學習自我挑戰 Day7","slug":"React快速學習自我挑戰-Day7","date":"2017-03-11T12:15:40.000Z","updated":"2017-03-11T14:13:54.000Z","comments":true,"path":"2017/03/11/React快速學習自我挑戰-Day7/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/03/11/React快速學習自我挑戰-Day7/","excerpt":"","text":"React Component 只負責顯示 data，而 Redux 則負責提取 data。 設計一個元件的時候，記得要先問自己該元件是 Container 還是 Component。 基本上需要跟 Redux 溝通的就是 Container。 下面範例中，this (就是 SearchBar) 有一個 function 叫做 onInputChange，然後把這個 function bind 到 this，然後把得到值放到下方的 onInputChange 裡面。 1234567891011constructor(props) &#123; super(props); this.state = &#123; term: &apos;&apos; &#125;; this.onInputChange = this.onInputChange.bind(this); &#125; onInputChange(event) &#123; this.setState(&#123; term: event.target.value &#125;) &#125; 如果不希望 User 一直重新整理頁面，我們可以加 event handler。 open weather API。 sign up 之後，進入 API Key 的頁面，就可以拿到 API key 囉！ JSON Formatter (chrome 外掛)。","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React","slug":"React","permalink":"https://tingsyuanwang.github.io/tags/React/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"React快速學習自我挑戰 Day6","slug":"React快速學習自我挑戰-Day6","date":"2017-03-10T05:02:52.000Z","updated":"2017-03-11T12:16:41.000Z","comments":true,"path":"2017/03/10/React快速學習自我挑戰-Day6/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/03/10/React快速學習自我挑戰-Day6/","excerpt":"","text":"當知道 action creactor 將要呼叫(但不知道什麼時候)，當被呼叫的時候，我想要確定 flow 的結果能夠經過 dispatch function，然後這個 dispatch function 會像是漏斗般的接收這些 actions，最後再把 actions 分別送回不同的 reducers。 action 通常有兩種值：type 和 payload。 不管 action 有沒有 dispatch，reducer 都會被呼叫，所以 function 隨時會頻繁的被呼叫，因為 action 不在乎任何時間、任何特定的 reducer。 用來 combine reducer 的 object 的任何 key 都會以 global state key 的方式結尾。 當想要做一個可以直接接觸 redux state 的 component，就要用 container。 定義一個 function 呼叫 Map state 來 process ，然後我們 connect book detail 的 props。 Redux 控制整個 application 的 state，state 是 single plain javascript object。 Component state 跟 application state 是完全分離的。 用 combineReducer 的方法可以將 reducer 全部連結在一起。 function 內每一個 key 都會指定一個 reducer，然後 reducer 必須對創造 state 負責。 reducer 負責隨著時間改變 application state，這個是透過 action 來使用。 當有一個 action dispatch，action 會流過 application 內不同的 reducer；所以每一個 reducer 有選擇的根據收到不同的 action type 來 return state。 action creator 是一個 simple function 來 return 一個 action，action 是 single plain javascript object。","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React","slug":"React","permalink":"https://tingsyuanwang.github.io/tags/React/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"React快速學習自我挑戰 Day5","slug":"React快速學習自我挑戰-Day5","date":"2017-03-09T03:01:39.000Z","updated":"2017-03-09T14:02:25.000Z","comments":true,"path":"2017/03/09/React快速學習自我挑戰-Day5/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/03/09/React快速學習自我挑戰-Day5/","excerpt":"","text":"Reducer 是一個 function 用來 return piece of the application state。 Reducer 產出 state 的值。 在檔名的命名中，應該在前面加前綴，例如：reducer_books.js。(不是一定要，作者提供的方法) Container 是 react component，對 Redux 所管理的 state 有直接的連結。 有一個 Library 叫做 React-Redux，負責 React 和 Redux 的溝通橋樑。(本身 React 和 Redux 是完全分開的 Library) Container 在 Redux 的官方文件中叫做 Smart Component。 以整體來說，整個 App 並不在乎任何 state，而是由各個元件去在乎個別需要在乎的 state(所以 App 被稱為 dumb component)。 mapStateToProps 以陣列的形式得到 application state。 Redux 建構 application state，React 提供 View 來顯示 State，這兩個是不同的 Library，唯有透過 React-Redux 才能將這兩個連結。 如果 application state 改變，Container 也會跟著 rerender。 按按鈕 =&gt; 呼叫 action creator =&gt; action automatically sent to all reducers =&gt; reducer 可以選擇根據 action 來 return 不同的 state，然後將 state pipe into application =&gt; application state 會 pump back into React application，然後所有的 components 就會 rerender。 action creator 會 return 物件。 在所有不同的 reducer 裡面，我們會設置一個 switch statement。","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React","slug":"React","permalink":"https://tingsyuanwang.github.io/tags/React/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"React快速學習自我挑戰 Day4","slug":"React快速學習自我挑戰-Day4","date":"2017-03-08T14:10:00.000Z","updated":"2017-03-09T02:59:26.000Z","comments":true,"path":"2017/03/08/React快速學習自我挑戰-Day4/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/03/08/React快速學習自我挑戰-Day4/","excerpt":"","text":"Redux 參考資料。 學習完 Redux 之後，還要學 webpack、Redux Router、Redux Promise、Redux Thunk、Hot Reloading。 Redux 是一個針對 JS application 的可預測 state container。 Redux 處理 data 的部分，React 處理 View 的部分。 React 和其他框架不同的地方就是將所有 data 放到 central single object，這個 object 可被用來查詢 state。","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React","slug":"React","permalink":"https://tingsyuanwang.github.io/tags/React/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"React快速學習自我挑戰 Day3","slug":"React快速學習自我挑戰-Day3","date":"2017-03-07T14:13:59.000Z","updated":"2017-03-08T07:35:19.000Z","comments":true,"path":"2017/03/07/React快速學習自我挑戰-Day3/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/03/07/React快速學習自我挑戰-Day3/","excerpt":"","text":"在 React 中，只有最上層的元件需要從 API 或 flux 取得資料。 用 className 來當作平常在 html 看到的 class，以跟 class based function 做區別。 function()可以簡化為() =&gt;。 React 處理 List 的時候，不要使用 for 迴圈，用 map 來取代。 React 會辨識變數是否為 List 或是 Array of Component。 在處理 List 的時候，React會要求給每個 element 一個 ID。 以下兩行一樣，下面為 ES6 語法。 const VideoListItem = (props) =&gt; { const video = props.video; const VideoListItem = ({video}) =&gt; { 以下兩行一樣，下面為 ES6 語法。(string interpolation) const url = 'https://www.youtube.com/embed/' + videoId; const url = `https://www.youtube.com/embed/${videoId}`; 降低 callback function 執行速度的套件 lodash 。 在 class based component，我們將 state 設定在 constructor 裡面。 範例中，四個元件用了兩個 callback function，我們要用 redux 來讓 callback 更乾淨。 在 react 中用的 state 屬於 Component level，而在 redux 上面使用的則是 application level。","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React","slug":"React","permalink":"https://tingsyuanwang.github.io/tags/React/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"React快速學習自我挑戰 Day2","slug":"React快速學習自我挑戰-Day2","date":"2017-03-06T02:13:59.000Z","updated":"2017-03-12T07:07:58.000Z","comments":true,"path":"2017/03/06/React快速學習自我挑戰-Day2/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/03/06/React快速學習自我挑戰-Day2/","excerpt":"","text":"從 node modules 呼叫 react：import React from 'react';。 從 node modules 呼叫 react-dom：import ReactDOM from 'react-dom';。 React Render 要用元件方式包裝：&lt;App /&gt;。 指定 Render 的地方：document.querySelector('.container')。 每個檔案都只能有一個元件。 Youtube API 的使用。 註冊 Youtube API Key。 前往Goolge開發者界面。 點選左方選單的 Library。 搜尋 Youtube，並選擇「YouTube Data API v3」。 Enable 該套件。 選擇左方選單的 Credentials。 Create Credentials =&gt; API key =&gt; Restrict Key。 設定名稱，設定類別為「HTTP referrers (web sites) 」 Save =&gt; 拿到 API Key 安裝 Youtube API 套件。 Youtube API Search npm install --save youtube-api-search 輸出值：export default SearchBar;。 得到輸出值：import SearchBar from './components/search_bar';(需要包含路徑)。 Class Base Method: class SearchBar extends React.Component。 語法糖：import React, { Component } from 'react'; 等於 import React from 'react'; const Component = React.Component; React 處理事件有兩個步驟。 Declare “Event handler” =&gt; 當事件發生時啟動 handler Pass “Event handler” =&gt; 直接跳到我們想對事件顯示的某元素 State 是 React 最令人困惑的部分。 定義：State 是 JS 純物件，且用來記錄和對使用者事件做反應。不論元件的 State 是否改變、元件是否立刻 Render或是子原件也重新 Rerender，每一個 Class based 元件都有自己的 State Object。 所有的 JS classes 都有一個名為 constructor 的特別函式。 class 的元件用來追蹤 State 的狀態或是值需要持續改變；functional 的元件用來取得某些資訊。 建立搜尋欄位 123const SearchBar = () =&gt; &#123; return &lt;input /&gt;&#125;; 即時顯示值 this.state =&gt; 創建一個 term 的空值。 this.setState =&gt; 得到現在 input 裡面的值(並非直接改變)。 value={this.state.term} =&gt; 取得 this.state 的值。 123456789101112131415161718class SearchBar extends Component &#123; constructor(props) &#123; super(props); this.state = &#123; term: &apos;&apos; &#125;; &#125; render() &#123; return ( &lt;div&gt; &lt;input value=&#123;this.state.term&#125; onChange=&#123;event =&gt; this.setState(&#123; term: event.target.value &#125;)&#125; /&gt; Value of the input: &#123;this.state.term&#125; &lt;/div&gt; ); &#125;&#125;","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React","slug":"React","permalink":"https://tingsyuanwang.github.io/tags/React/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"React快速學習自我挑戰 Day1","slug":"React快速學習自我挑戰-Day1","date":"2017-03-05T13:00:59.000Z","updated":"2017-03-06T02:19:32.000Z","comments":true,"path":"2017/03/05/React快速學習自我挑戰-Day1/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/03/05/React快速學習自我挑戰-Day1/","excerpt":"","text":"Reactjs 和 Redux 有 Library 可以使用。 瀏覽器尚未支援 ES6。 完成的檔案用 webpack + babel 來 transpile 變成網頁。 index.html application.js style.css 起手專案(boilerplate)：React + Youtube API 直接在 Command line 開 atom： atom . Component 是 JS 的 Function 的組合，用來生成 HTML。 使用 const 取變數，代表不改變的值；用 var 取變數，代表會改變的值。 JSX 是一種 JavaScript 的類別，允許我們可以寫 HTML 在 JavaScript 裡面。 寫 index.js 的邏輯 創建一個元件，元件應該可以產生 HTML。 把創建好的元件產生 HTML，然後放到頁面上(這個動作叫做 Render)。 JSX 轉換範例(使用babel轉換工具) 轉換前(1) 123const App = function() &#123; return &lt;div&gt;Hi!&lt;/div&gt;;&#125; 轉換後(1) 1234567var App = function App() &#123; return React.createElement( &quot;div&quot;, null, &quot;Hi!&quot; );&#125;; 轉換前(2) 1234567const App = function() &#123; return &lt;ol&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;/ol&gt;;&#125; 轉換後(2) 123456789101112131415161718192021var App = function App() &#123; return React.createElement( &quot;ol&quot;, null, React.createElement( &quot;li&quot;, null, &quot;1&quot; ), React.createElement( &quot;li&quot;, null, &quot;2&quot; ), React.createElement( &quot;li&quot;, null, &quot;3&quot; ) );&#125;;","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React","slug":"React","permalink":"https://tingsyuanwang.github.io/tags/React/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Wordpress 處理中文檔名上傳","slug":"Wordpress-處理中文檔名上傳","date":"2017-03-04T08:29:52.000Z","updated":"2017-03-04T08:32:59.000Z","comments":true,"path":"2017/03/04/Wordpress-處理中文檔名上傳/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/03/04/Wordpress-處理中文檔名上傳/","excerpt":"","text":"修改 wp-admin\\includes\\file.php 找： 1$filename = wp_unique_filename( $uploads[&apos;path&apos;], $file[&apos;name&apos;], $unique_filename_callback ); 在其後加上： 1234$fileTypeNameArr =explode(&quot;.&quot; , $filename);$countNum=count($fileTypeNameArr)-1;$fileExt = $fileTypeNameArr[$countNum]; //取得所上傳文件後綴名$filename = time().&apos;-&apos;.rand(0,999999999).&apos;.&apos;.$fileExt;//將文件由原名改為時間戳 這樣上傳的文件會以時間戳為名稱儲存。 上傳中文名的文件後，依然能夠將原中文文件名作為文件的標題。 在後台管理界面顯示的是中文標題，因此對於使用沒有影響。","categories":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}],"tags":[],"keywords":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}]},{"title":"筆記規則 重點摘要","slug":"筆記規則-重點摘要","date":"2017-01-13T02:22:47.000Z","updated":"2017-01-13T03:01:08.000Z","comments":true,"path":"2017/01/13/筆記規則-重點摘要/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/01/13/筆記規則-重點摘要/","excerpt":"","text":"為每一天重要的事情，下一個大標題。 把實際開始和結束的時間用螢光筆框起來，紀錄行程是否太滿。 用一些自己專屬的記號。 多色規則：我喜歡五色原則(加上自己的顏色)。 紅色：重要事項。 藍色：工作相關。 黑色：日常私事、每日固定工作(包含記帳)。 綠色：非日常私事。 粉紅色：朝夢想前進的行動。 專案管理的方法。 設定專案目標，寫下要做的事情。 用便利貼，為目標訂出細部的具體任務。 用甘特圖將進度圖像化。 把已經約好的事情寫入待辦事項，還沒約好的事情另外用清單管理。 利用多色便條紙來書寫，藍色代表 工作、黃色代表 外出、綠色代表 私事、粉紅色代表 朝夢想前進的行動。 重要的靈感用另外一本筆記本紀錄。 所有的事情加上人，可以輕鬆回憶起事情。 每天寫三行日記，第一行主題、第二行感想、第三行對未來的展望。 用漫畫的對白框寫下自己為什麼快樂和傷心。 對自己有用的資訊額外也用一本筆記本。 重要的通訊錄。 紀錄上司推薦的事情。 寫下想看的書籍。 寫下別人送禮清單。 寫下自己可以送別人的禮物清單(包含別人提過他想要的)。 標記重要的紀念日。 寫下死前想完成的事情。 將自己想做的目標加以分類，分類別：工作、證照、金錢、健康、興趣、旅行、家人、朋友。 計畫凌亂時，寫出理想時間表，找回自己的節奏。 把成功者的名言佳句寫在書的一角，化為動力。 幾點睡覺、幾點起床要寫下來。 也可以記錄天氣，喚起那一天的所有回憶。","categories":[{"name":"閱讀賞析","slug":"閱讀賞析","permalink":"https://tingsyuanwang.github.io/categories/閱讀賞析/"}],"tags":[],"keywords":[{"name":"閱讀賞析","slug":"閱讀賞析","permalink":"https://tingsyuanwang.github.io/categories/閱讀賞析/"}]},{"title":"PHP multiple select 寫入資料庫的方法","slug":"PHP-multiple-select-寫入資料庫的方法","date":"2016-12-01T05:48:23.000Z","updated":"2016-12-01T05:55:35.000Z","comments":true,"path":"2016/12/01/PHP-multiple-select-寫入資料庫的方法/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2016/12/01/PHP-multiple-select-寫入資料庫的方法/","excerpt":"","text":"填入文字的頁面需要用陣列的方式傳遞資料 name=&quot;item[]&quot; 123456&lt;label for=&quot;item[]&quot; class=&quot;formTitle&quot;&gt;選擇項目&lt;/label&gt;&lt;select name=&quot;item[]&quot; class=&quot;form-control selectpicker&quot; multiple&gt; &lt;option&gt;項目一&lt;/option&gt; &lt;option&gt;項目二&lt;/option&gt; &lt;option&gt;項目三&lt;/option&gt;&lt;/select&gt; 在取得值之前，要先將取得的陣列用文字的方式顯示。 1234// 得到 item 的值$item= $_POST[&quot;item&quot;];// 將取得的陣列用「、」分開$itemArray= implode(&quot;、&quot;, $item); 將得到的值寫入 DataTable 資料表內的 DataColumn 欄位，值為剛剛取得的陣列值 $itemarray 1$sql_query = INSERT INTO DataTable (`DataColumn`) VALUES (&apos;$itemarray&apos;);","categories":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}],"tags":[],"keywords":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}]},{"title":"Github Pushed Commit Delete (Redraw)","slug":"Github-Pushed-Commit-Delete-Redraw","date":"2016-11-17T06:47:14.000Z","updated":"2016-11-17T07:05:16.000Z","comments":true,"path":"2016/11/17/Github-Pushed-Commit-Delete-Redraw/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2016/11/17/Github-Pushed-Commit-Delete-Redraw/","excerpt":"","text":"如果 Commit 之後並 Push 到遠端，想要在本地端用 CI 去 Delete/Redraw，就可以用以下方法。 如果要刪除倒數第一個 Commit，用以下方法。 12git reset --hard HEAD^git push -f 如果要刪除倒數二個 Commit，用以下方法。 12git reset --hard HEAD^^git push -f","categories":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}],"tags":[],"keywords":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}]},{"title":"JavaScript用AJAX的方式獲得時間","slug":"JavaScript用AJAX的方式獲得時間","date":"2016-11-05T15:22:31.000Z","updated":"2016-11-05T15:23:05.000Z","comments":true,"path":"2016/11/05/JavaScript用AJAX的方式獲得時間/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2016/11/05/JavaScript用AJAX的方式獲得時間/","excerpt":"","text":"新增一個js的檔案，將以下程式碼複製貼上 1234567891011121314151617181920212223242526272829var xmlHttp;function srvTime()&#123;try &#123; //FF, Opera, Safari, Chrome xmlHttp = new XMLHttpRequest();&#125;catch (err1) &#123; //IE try &#123; xmlHttp = new ActiveXObject(&apos;Msxml2.XMLHTTP&apos;); &#125; catch (err2) &#123; try &#123; xmlHttp = new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;); &#125; catch (eerr3) &#123; //AJAX not supported, use CPU time. alert(&quot;AJAX not supported&quot;); &#125; &#125;&#125;xmlHttp.open(&apos;HEAD&apos;,window.location.href.toString(),false);xmlHttp.setRequestHeader(&quot;Content-Type&quot;, &quot;text/html&quot;);xmlHttp.send(&apos;&apos;);return xmlHttp.getResponseHeader(&quot;Date&quot;);&#125;var st = srvTime();var date = new Date(st); 新增時間 1var localTime = new Date();","categories":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}],"tags":[],"keywords":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}]},{"title":"In fact, life is a kind of strong","slug":"In-fact-life-is-a-kind-of-strong","date":"2016-09-17T05:45:46.000Z","updated":"2016-09-22T07:35:24.000Z","comments":true,"path":"2016/09/17/In-fact-life-is-a-kind-of-strong/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2016/09/17/In-fact-life-is-a-kind-of-strong/","excerpt":"","text":"Because of the rainy days, I didn’t go to visit the potted plants on the balcony for several days. Today, I went out to look and I feel surprised. One of them had been in critical conditions and leaves covered the ground. However, an unknown plant grow lush at it side and swayed proudly in the wind. One kind of sadness instantly came up from my mind. I blamed my carelessness, but also lamented the fragile of potted plants. I urgently watered the potted plants, but I don’t know why I couldn’t eradicate that unknown alien plant. What kind of conditions could make this life? Due to the lack of attention from me, my potted plants are gradually lost luster. However, it seized this gap and thrived itself. Yes, if I concerned in place, it might be removed when it was inconspicuous. After all, that is my potted plants world, this life didn’t belong to here will be eventually destroy the crafted beauty. But just a few days effort, it was no fear of lack of water and hold the opportunity to put itself look as tall as potted plants. I looked on the potted plants in the verge of death, but also looked at that unknown plant. I was suddenly enlightened in the sadness and moved emotion: In fact, life is a kind of strong. Isn’t it? Plant did it, life is also much better than this! Life can be born, because the mother and baby are all strong. Life comes from the strong. Life is inseparable from the strong. Every day we are dependent with the strong. I think, if you can choose, no one wants to have pain, willing to be sad, even to be toil. But from the birth, we are inevitably deal with some ailment or even illness. Everyone wants to expose under the sun when woke up every day, listen to songs and see the sights every day. However, we haven’t be willing to get up by parent’s call since we were in small age. Then do the things we need to do, reading or working. These all rely on the strong. There are no pure land on earth which can make us arbitrary. There is always a distance between dreams and realities. If the environment is unsatisfactory; if we are in sick and forsaken by lover; if life is too gloomy. Strong, it is the support of life. We must be use the strong to face the tedious every day and stimulate the neglected and injured soul. The strong is necessary in life. It is the pillar of the spirit and the faith to across obstacles. The unknown plant of the potted plants use the strong to touch me. I would leave it and have no regrets, because it let me understand thoroughly: in fact, life is a kind of strong.","categories":[{"name":"英文寫作","slug":"英文寫作","permalink":"https://tingsyuanwang.github.io/categories/英文寫作/"}],"tags":[],"keywords":[{"name":"英文寫作","slug":"英文寫作","permalink":"https://tingsyuanwang.github.io/categories/英文寫作/"}]},{"title":"在hexo使用emoji","slug":"在hexo使用emoji","date":"2016-09-11T02:15:30.000Z","updated":"2016-09-14T10:48:10.000Z","comments":true,"path":"2016/09/11/在hexo使用emoji/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2016/09/11/在hexo使用emoji/","excerpt":"","text":"修改渲染器 123cd /workspace/blogs/ //跳轉到hexo的目錄npm un hexo-renderer-marked --savenpm i hexo-renderer-markdown-it --save 下載markdown-it-emoji插件： 1npm install markdown-it-emoji --save 編輯Hexo的最上層的配置文件_config.yml來配置markdown渲染器 1234567891011121314markdown: render: html: true xhtmlOut: false breaks: true //這邊我改成true直接在.md裡面enter就換行 linkify: true typographer: true quotes: &apos;“”‘’&apos; plugins: - markdown-it-footnote - markdown-it-sup - markdown-it-sub - markdown-it-abbr - markdown-it-emoji","categories":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}],"tags":[],"keywords":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}]},{"title":"Train to Busan (屍速列車) - 劇透","slug":"Train-to-Busan-屍速列車-劇透","date":"2016-09-10T02:59:31.000Z","updated":"2016-09-16T09:25:18.000Z","comments":true,"path":"2016/09/10/Train-to-Busan-屍速列車-劇透/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2016/09/10/Train-to-Busan-屍速列車-劇透/","excerpt":"","text":"評價分數（滿分十分）：⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️ 地點：台中新時代威秀影城 陪看：豪豪、毛董、柏勳 劇情簡介： 劇情一開始，有位不知名的大叔開著車回家(應該是回家？)，前方有安檢人員消毒說前方洩漏了一點東西，不知名大叔抱怨說不知道這是第幾次了，進入之後，他為了接電話不小心撞死一隻小鹿，不知名大叔下車看了一下，覺得運氣很背的把車開走，結果，小鹿竟然站起來變成喪屍，病毒就這樣開始了… 男主角是一間證券公司的經理，他在電腦上看到某地區魚全部死光，就自私地賣掉所有相關股票，也不管是不是會造成市場動盪，只在乎有沒有賺錢。 男主角回家看到小孩秀安在跟媽媽講電話，今天是秀安的生日，爸爸特地買禮物回去給他，結果沒想到去年生日已經送過同樣的禮物了，秀安想要去釜山找媽媽，男主角擔心秀安的安全，決定一同前往，隔天要出發的時候，遠遠看到火燒的大樓，只是推斷那邊有事情發生，也沒有想太多。 大家上車之後，出現一個臨時衝上車的女生，她已經快要病變成殭屍，列車就這樣關上門了，火車離開之前，車站外已經有人開始大打出手，秀安看到外面有人咬人，想要叫醒男主角，可是男主角卻睡得正甜。秀安跑去上廁所發現一個流浪漢說著：「都死掉了…(碎碎念)」。 這個時候，病變的那個女生咬了要急救她的列車服務員，開始了一連串的有人被咬，男配角尹相華和他的老婆盛景在最後要逃到活人車廂的時候，被男主角關上門，後來秀安大叫是剛剛在廁所看到的大叔，男主角才開門讓他進來。男主角發現，殭屍不會開門，然後看到人才追擊，所以盛景把玻璃門用報紙貼起來，順利的讓殭屍安靜下來。男主角的媽媽剛好打電話來，詢問男主角是否平安，還有抱怨媳婦的不好之後，電話的另一頭就突然聽不到聲音了。 新聞訊息開始大量曝光，網路影片都開始看到殭屍的蹤影，車站到達下一站的時候因為不停使繼續開，外面卻是一陣混亂的殭屍追擊，車站經由管控室通知，決定在大田停車，男主角打電話給認識的人，請他幫忙確認大田的情況，友人指示讓他出站之後右轉會有人接應，一旁的流浪漢也聽到了。 抵達大田要出站之前，所有的軍人全部變成殭屍，追擊上來，只有一些人順利逃走，卻把男主角、尹相華、閔英國分在同個車廂，秀安、盛景、流浪漢、還有一對姐妹的姊姊在同個車廂，後來列車長決定繼續把列車開往釜山，男主角、尹相華、閔英國在和秀安、盛景、金珍熙分別通話之後，決定全副武裝通過數個車廂去找對方，在穿越車廂的時候，男主角又意外發現，如果列車進山洞的話，殭屍會停止追擊，只朝有聲音的地方移動，後來順利的找到秀安、盛景、流浪漢、還有一對姐妹的姊姊。閔英國打電話給金珍熙說要去同個車廂找他們，結果被金珍熙同車廂的自私客運營運長煽動不要讓其他人過來，結果讓尹相華被殭屍咬到，還有那對姐妹的姊姊也因為沒有順利抵達在妹妹面前被殭屍咬死了。男主角一群人雖然順利的到達活人的車廂，卻又被營運長說他們都被感染了煽動群眾，結果被所有人把男主角一群人趕到更前面的車廂。營運長的那個車廂開始吵架，在大家都不注意的時候，剛剛那對姐妹花的妹妹抱怨完姊姊為什麼那麼傻之後，就跑去把殭屍的門打開，營運長那個車廂的人就被咬了。 男主角一行人抵達東大區時，因為前面的列車東倒西歪而停住了，列車長廣播要大家下車跑向其他列車，繼續開往釜山。而營運長的那個車廂，服務員和營運長因為趁混亂中逃進了廁所逃過一劫，卻沒想到營運長為了到下一個列車，推了服務員一把，自己順利逃出。有一台不知道從哪裡來的冒火列車，突然撞上了男主角一群人附近的列車，把男主角一行人分開，棒球隊的閔英國和金珍熙為了破壞一個打不開的門拖了很久，營運長從剛剛的列車跑出之後，剛好也到了他們那個車廂，營運長又拉著金珍熙去撞殭屍，讓金珍熙被殭屍咬到，閔英國傷心地抱著她大哭，金珍熙變成殭屍之後也咬了閔英國一口。營運長繼續往要開往釜山的列車奔跑，結果列車長看到營運長要上來，過去幫他一把，沒想到列車長也被營運長推了一把之後被殭屍咬到，營運長自己順利逃到列車上。 男主角、秀安、盛景、流浪漢因為冒火的列車撞上其他列車，把他們困在列車之間，流浪漢也為了救他們自己犧牲而死，最後男主角帶著秀安、盛景順利地跑上開往釜山的列車，卻發現營運長已經被咬了，男主角為了救秀安和盛景，把營運長推下列車之後，因為自己也被咬，所以也跳下列車自殺。 最後剩下秀安和盛景抵達釜山，山洞的另一頭軍人看到兩個模糊的人走向他們，準備把他們射殺，這時候秀安卻唱起了歌，讓他們順利地被拯救了。 評論： 整部影片劇情緊湊，殭屍也演得很到位，在電影院被很多畫面嚇到，內容除了殭屍，也帶出了一些引人深思的議題，大部分的人都很自私，也正因為這種自私把大家帶入死亡，如果能更信賴彼此，其實很快就能把殭屍控制住了。除了這部電影，其實很多殭屍類別的影集也同樣帶出這樣的議題，人，其實比殭屍還要可怕。聽說要出前傳啦！會解釋到那個上車的女生怎麼來的，為什麼一直說對不起？非常期待十月的前傳。 要去看的時候也是臨時約的，我完全沒有看預告片，還以為是美劇之類的，沒想到韓國的電影已經有這樣的成熟度，也相當令我驚訝。 圖片來源：WellGoUSA","categories":[{"name":"閱讀賞析","slug":"閱讀賞析","permalink":"https://tingsyuanwang.github.io/categories/閱讀賞析/"}],"tags":[],"keywords":[{"name":"閱讀賞析","slug":"閱讀賞析","permalink":"https://tingsyuanwang.github.io/categories/閱讀賞析/"}]},{"title":"Mechanic: Resurrection (極速秒殺2) - 劇透","slug":"Mechanic: Resurrection (極速秒殺2) - 劇透","date":"2016-09-09T02:27:45.000Z","updated":"2016-09-14T02:55:51.000Z","comments":true,"path":"2016/09/09/Mechanic: Resurrection (極速秒殺2) - 劇透/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2016/09/09/Mechanic: Resurrection (極速秒殺2) - 劇透/","excerpt":"","text":"評價分數（滿分十分）：⭐️⭐️⭐️⭐️⭐️⭐️ 地點：台中新時代威秀影城 陪看：豪豪 劇情簡介： 男主角Bishop在一場假死之後住在里約熱內盧，過著愉快的隱居生活，突然有一位女性出現，表示他的老闆要他去殺死三個人，而且這三個人得死得像是意外，結果當然男主角不領情，拍一張她的照片之後逃走。後來，男主角為了躲避追擊逃到泰國的秘密基地，而他的朋友Mae正是男主角守護這個地方的人，男主角在秘密基地調查出襲擊他的人的老闆原來是Crain。 隔天，女主角Gina出現，並向Mae索要急救物品，Mae注意到他裂開的嘴唇和瘀傷的手臂，而那天下午，Mae看到Gina在船上被毆打，所以說服Bishop去拯救女主角，男主角衝到船上警告毆打女主角的男子，結果那名男子完全不理會，所以當然被男主角殺了（看起來像是意外），這時，Mae來到船上把Gina接走，男主角在船上調查發現女主角原來叫做Gina，而且他還為Crain工作，最後，為了隱匿蹤跡，男主角放火把船燒了。 男主角當面質問女主角，發現女主角在柬埔寨的兒童庇護所工作，Crain威脅她的那些小孩，強迫他到男主角所在的位置執行任務。男主角推斷Crain的計畫就是讓女主角在被Crain綁架之前，男主角會深深愛上她，最後男主角就不得不接受任務。男主角注意到Crain的特務正盯緊他，所以就故意牽起Gina的手，而且親密的互動，他告訴Gina其實他和Crain都是被賣到某個黑幫的孤兒，直到他逃離之前，他們都被當作戰士來訓練。最後，男主角順著Crain的計畫，就和女主角發生親密關係，等待明天被綁架。被綁架之後，男主角被帶去Crain面前，告訴他要殺哪三個人。 男主角第一個要殺的是非洲的軍閥Krill，他被關在馬來西亞的監獄裡，男主角把自己弄得跟某個通緝犯很像，順利地進去監獄，男主角在裡面殺死了一位試圖殺死Krill的囚犯取得Krill的信任，最後在他們兩個獨處的時候把他殺死，然後在Crain特工們的幫忙下順利躲過鯊魚的追擊逃出監獄。 男主角第二個要殺的是在澳洲做未成年人口販賣的Cook，男主角在Cook的露天游泳池下面鑽洞，導致游泳池漏水，然後Cook直接就從高樓墜下死亡。 這個時候，Bishop找到女主角想要救他出來，可是失敗了。他只好去殺他的第三個目標保加利亞的軍火商Adams，結果男主角和Adams合作要殺死Crain，男主角讓Adams假死，然後讓Crain以為他已經死掉了，並告訴Crain任務已經完成，結果Crain本來就準備要把男主角殺死，就讓傭兵們衝到Adams的要賽裡面，結果被男主角佈局殺了精光。 男主角回到船上找Crain，結果Crain已經設定了倒數計時的船隻引爆器，男主角把女主角放到水中的逃生艙裡面，自己去找Crain徒手單挑，最後男主角把Crain用鎖鏈鎖在甲板上面，在船爆炸之前往船裡面跑，爆炸之後，女主角被告知已經沒有任何生還者了。 女主角回到柬埔寨繼續工作，當男主角出現的時候，她非常驚訝。最後一幕則是Adams看了監視器，發現男主角從船裡面的另外一個逃生艙走出來，Adams直接把影片刪除，再次偽造男主角的死亡。 評論： 評分給六分，因為劇情完全沒有可看性，可以像你思考的一樣去走，本來還期待會有一些意想不到的情節，不過深深地讓我失望了。不過以畫面和特效來說都非常到位，如果喜歡打鬥的視覺效果，這部電影可以大大的滿足你的需求。 圖片來源：官方預告片","categories":[{"name":"閱讀賞析","slug":"閱讀賞析","permalink":"https://tingsyuanwang.github.io/categories/閱讀賞析/"}],"tags":[],"keywords":[{"name":"閱讀賞析","slug":"閱讀賞析","permalink":"https://tingsyuanwang.github.io/categories/閱讀賞析/"}]},{"title":"105-1 中醫研究所課表","slug":"105-1-中醫研究所課表","date":"2016-09-07T01:37:57.000Z","updated":"2016-09-22T07:23:05.000Z","comments":true,"path":"2016/09/07/105-1-中醫研究所課表/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2016/09/07/105-1-中醫研究所課表/","excerpt":"","text":"新學期來囉！把課表記錄下來。 學號：105043203 節數 星期二 星期三 星期四 星期五 1 生物統 2 計學特論 3 本草 中醫 醫學研究 生物材 4 經特論 學導論 方法特論 料特論 N 醫學論文與專書寫作特論 N 醫學工程特論 5 分 專 奈米科技與 6 子 題 中醫藥特論 7 醫 討 8 學 論 *未修過中醫入門課程（中醫學導論、中醫學史）之研究生，需補修中醫學系該二課程","categories":[{"name":"中醫典藏","slug":"中醫典藏","permalink":"https://tingsyuanwang.github.io/categories/中醫典藏/"}],"tags":[],"keywords":[{"name":"中醫典藏","slug":"中醫典藏","permalink":"https://tingsyuanwang.github.io/categories/中醫典藏/"}]},{"title":"Hello! JS! - 從零開始的React Native開發","slug":"Hello-JS-從零開始的React-Native開發","date":"2016-09-06T02:48:13.000Z","updated":"2016-09-09T03:10:40.000Z","comments":true,"path":"2016/09/06/Hello-JS-從零開始的React-Native開發/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2016/09/06/Hello-JS-從零開始的React-Native開發/","excerpt":"","text":"“If I have seen further it is by standing on the shoulders of giants.&quot; -Issac Newton 「如果說我看得比別人遠，那是因為我站在巨人的肩上。」 – 牛頓 序 2016年暑假，我在創科資訊(Trunk Studio)學習JS的部署與開發，在上課之前，我只學過html、CSS、jQuery，還有一些很偷懶的黑魔法，像是Bootstrap、WordPress theme。然而，很早之前就聽過JS的開發才是主流，苦於不知道如何開始，這次很開心能來上這樣的課程，除了認識很多很棒的人(未來有機會的合作夥伴們)，當然最重要的是能站在一堆超級講師們的肩膀上學習，我想用獲益良多來形容著實是不夠形容這種程式能力的提升，只可會意，不可言喻。 以下記錄我學習到的東西： Atom (本來用sublime的，除了Atom很漂亮之外，外掛的使用也更為簡單) Git Command (本來使用Source Tree，後來發現原來Command Line這麼簡單，神秘黑魔法啊！) Git Pages &amp; Heroku (免費的網站實作好地方) Markdown語法 (必學的語法，簡單且實用) Hexo (超級的棒網誌框架) TDD (目前還不太會用，不過有略懂略懂) Facebook API (串接Facebook的服務) sails.js (使用過express的框架，實作上蠻類似的，具體上有什麼不同，還需要我多多練習) Scss (有效率且大架構的CSS部署就要用上它囉！) Babel (ES6、ES5的轉換超好用) React (JavaScript的函式庫，100%的Client Rendering) React Native (可以同時實作iOS和Android App，而且有很多模組可以使用，還有很多Documentation要閱讀) Hexo 特別提到Hexo就是因為目前這個網站是用Hexo開發的，佈景主題採用ppoffice的Hueman，從Header到Footer，我都嘗試去修改，反覆的trial之後，讓我更了解Hexo的整個架構，很有趣的是，一開始我還不知道要把檔案上傳到master分支，直接Deploy上去gh-pages，結果檔案不見了，還以為直接git clone下來可以使用了，才驚覺原來檔案不一樣，深深地學了一課。 React Native React Native最吸引人不外乎就是可以同時開發iOS和Android App，也正是吸引我來上這個課程的原因，過程中，講師都有很耐心地講解，重要的觀念也會重複提醒，雖然目前還沒有實際作品可以上線，最大的問題在於自己能力仍然需要提升，但是這樣前導式的教學相信未來的開發有很大的幫助，過程中，我們也實作了一些簡單的功能，發掘React Native的無限可能，也讓我正式確定它就是我想學的JS框架。 後記 八週超級充實的課程，我都沒有錯過！太棒了！ 很高興認識Kent、Max、一村、鄒大大、黑盒子…還有一堆叫不出名字但是卻很Nice的人（請原諒我的金魚腦XD） 最後的結訓證書！！！","categories":[{"name":"生活記事","slug":"生活記事","permalink":"https://tingsyuanwang.github.io/categories/生活記事/"}],"tags":[],"keywords":[{"name":"生活記事","slug":"生活記事","permalink":"https://tingsyuanwang.github.io/categories/生活記事/"}]},{"title":"華碩Win8電腦USB開機","slug":"華碩Win8電腦USB開機","date":"2016-09-03T19:30:18.000Z","updated":"2016-09-13T12:33:56.000Z","comments":true,"path":"2016/09/04/華碩Win8電腦USB開機/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2016/09/04/華碩Win8電腦USB開機/","excerpt":"","text":"(1) 開機連按Del進入BIOS之後，切換到「Security」選單，將「Secure Boot Control」設定成「Disabled」，重新開機。 (2) 重新開機後繼續連按Del進入BIOS，切換到「Boot」選單，將「Lunch CSM」設定成「Enabled」，重新開機。 (3) 重新開機後繼續連按Del進入BIOS，切換到「Exit」選單，就可以找到USB進行重灌囉！","categories":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}],"tags":[],"keywords":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}]},{"title":"The connection of people in the age of information","slug":"The-connection-of-people-in-the-age-of-information","date":"2016-09-03T08:40:08.000Z","updated":"2016-09-14T05:36:34.000Z","comments":true,"path":"2016/09/03/The-connection-of-people-in-the-age-of-information/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2016/09/03/The-connection-of-people-in-the-age-of-information/","excerpt":"","text":"In the past, people were separated by the distant ocean, they got each others’ message need a long time through letters. Nowadays, we just need to sign in the account through internet, we can chat with each other. Not only that, we can use video to see each other as truly communication. It’s much more convenient than before, but this feature doesn’t make the interpersonal networks closely than before. We increased our quality of life, but also decreased our humanity. I’m so curious what happened in nowadays world? Surfing on internet and open Facebook, a piece of photos and so many short words which are expressing someone’s feelings. You can see all of current situations of your friends and relatives. Even you have had a friend which lost contact for ten years, you still can use the various search method and “catch the line” with that friend. If you are lucky, you can contact with overseas people through these convenient networks and become the friends. Furthermore, you will be the member of internationalization. All steps sound like just need one finger. It seems like you caught a mouse and you caught the corner of interpersonal network. All of connections naturally become the “object of hand”, you can play it as you want between the hands. However, rapid transmission of information also caused rapid interpersonal conversion. I think perhaps it’s the attitude of “the most beautiful star is that one you can’t pick it.”. Something was hard-earned in the past, but now you can easily get it. That star which already holds on your hand is not shiny anymore and it will be discarded in the end. Moreover, people who had bad idea use internet to cheat some good people. In the ginormous networks, someone is pretending as your friends and family. You can’t recognize and verify, how to protect yourself? More and more frauds and criminal events make people stopping use internet to communicate with others because they don’t want to be the next victims. And some people talk very happy on internet, but they are speechless in the reality. Comparing the warm and lively talk in virtual with the silent in reality, this phenomenon make me unable to stop sighing and sobbing. People addicted with online unreal world and ignored people and things they should concern about in reality. In addition, people are growing further apart in reality and try to seek the new warm from internet, the vicious cycles trigger again and again and difficult to save. In conclusion, although convenient networks shorten the distance between people, but the distance of heart is far away than before. We don’t have truly personal experience in many things, many things are hard to understand if you just rely on touching the cold screen. For me, instead of waiting people in front of computer all day, I would rather to turn around to talk someone who was waiting for my reply. Internet is convenient and just for moderate using. After all, something can tighten interpersonal networks is your hand but not the little mouse you hold on.","categories":[{"name":"英文寫作","slug":"英文寫作","permalink":"https://tingsyuanwang.github.io/categories/英文寫作/"}],"tags":[],"keywords":[{"name":"英文寫作","slug":"英文寫作","permalink":"https://tingsyuanwang.github.io/categories/英文寫作/"}]},{"title":"HelloJS專案開發提議","slug":"HelloJS專案開發提議","date":"2016-08-30T12:55:48.000Z","updated":"2016-09-06T21:42:52.000Z","comments":true,"path":"2016/08/30/HelloJS專案開發提議/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2016/08/30/HelloJS專案開發提議/","excerpt":"","text":"(1) PokeHunt 最近看到新聞，很多人玩寶可夢掉下懸崖、誤觸地雷區、甚至是在路上被車撞，我覺得我們是不是可以做一個偵測系統？大家有什麼方法可以提供一下？目前暫時只是概念性的解決問題，如果大家決定做這個就來討論一下細節。 (2) 翻轉文學聊天室 在我大學時期有做一個翻轉文學的網站，我想說來做一點延伸，就是做聊天室、有全體的，還有同學個別對個別的，還有像是github issue一樣的討論區塊，這個我目前有些規劃，如果大家對即時條天有興趣我們可以做這個，這個的架構我就比較清楚要怎麼做，較好上手。 (3) 中草藥不良反應通報系統 這是目前我在中國醫藥大學想做的專案，現在有很多中草藥的通報系統，但是目前卻沒有手機板的，而且填寫複雜，架構基本上已經定案，因為他有固定格式。 因為我們學校跟衛生福利部的關係非常好，如果這個App有開發完成，我會盡力爭取上線，未來如果順利上線，可以跟政府申請一筆經費，看能不能跟大家來做大的？","categories":[{"name":"生活記事","slug":"生活記事","permalink":"https://tingsyuanwang.github.io/categories/生活記事/"}],"tags":[],"keywords":[{"name":"生活記事","slug":"生活記事","permalink":"https://tingsyuanwang.github.io/categories/生活記事/"}]},{"title":"Hello World","slug":"hello-world","date":"2016-08-29T02:47:36.000Z","updated":"2017-03-07T11:46:27.000Z","comments":true,"path":"2016/08/29/hello-world/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2016/08/29/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new \"My New Post\" More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}],"tags":[],"keywords":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}]}]}