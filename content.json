{"meta":{"title":"Vincent's Corner","subtitle":"See More! Learn More! Do More!","description":"Who knows what fantastic things around Vincent's corner?","author":"Vincent Ting Syuan Wang","url":"https://tingsyuanwang.github.io"},"pages":[{"title":"關於","date":"2016-08-30T11:17:58.000Z","updated":"2017-07-22T18:52:18.000Z","comments":true,"path":"about/index.html","permalink":"https://tingsyuanwang.github.io/about/index.html","excerpt":"","text":"自我介紹（Self-Introduction） 我叫王霆瑄（Vincent）， 來自台中，熱愛閱讀、運動和旅行， 對於新鮮的事物更是愛不釋手。 我的座右銘 你若成功了 放屁都有道理 你若失敗了 再有道理都是屁 我的誕生 公元一九九四年，夏天。 傍晚。細濛濛的小雨從天而降，在路燈外緣交織成一團濕淋淋的光幕。醫院內，手術房裡本是一陣沉悶的氣息，交雜著汗水，但娃娃的哭鬧聲撕裂了這陣寂靜，取而代之的是喜悅和更多的歡樂的氛圍，一個新生命的誕生，他將用雙眼來見識這個世界，用雙手去探索這個生命。 學歷（Educational Background） National Taichung University of Science and Technology（國立臺中科技大學） Computer Science and Information Engineering, M.S.（資訊工程研究所） Asia University（亞洲大學） Department of Foreign Languages and Literature, B.A.（外國語文學系） 聯繫我（Contact Ｍe） WeChat的好友： LINE的好友： 寫信給我：dtvgood202@gmail.com Facebook私訊敲我：Facebook個人頁面"}],"posts":[{"title":"Nodejs 快速學習自我挑戰 Day9","slug":"Nodejs-快速學習自我挑戰-Day9","date":"2017-09-27T22:14:39.000Z","updated":"2017-10-04T08:08:40.000Z","comments":true,"path":"2017/09/28/Nodejs-快速學習自我挑戰-Day9/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/09/28/Nodejs-快速學習自我挑戰-Day9/","excerpt":"","text":"安全和認證 Private Routes 和 Auth Middleware 在 server/server.js 新增 get 1234567891011app.get(&apos;/users/me&apos;, (req, res) =&gt; &#123; var token = req.header(&apos;x-auth&apos;); User.findByToken(token).then((user) =&gt; &#123; if (!user) &#123; &#125; res.send(user); &#125;);&#125;); 在 server/models/users.js 新增 findByToken 12345678910111213141516UserSchema.statics.findByToken = function (token) &#123; var User = this; var decoded; try &#123; decoded = jwt.verify(token, &apos;abc123&apos;) &#125; catch (e) &#123; &#125; return User.findOne(&#123; &apos;_id&apos;: decoded._id, &apos;tokens.token&apos;: token, &apos;tokens.access&apos;: &apos;auth&apos; &#125;);&#125;; 使用 Postman 新增 user 並取得 x-auth，然後新增 GET /users/me，並在 Header 插入剛剛取得的 x-auth，就會順利取得 _id 和 email 將 在 server/models/users.js 的 error 部分處理好 12345try &#123; decoded = jwt.verify(token, &apos;abc123&apos;)&#125; catch (e) &#123; return Promise.reject();&#125; 將 server/server.js 的 error 部分處理好 123456789User.findByToken(token).then((user) =&gt; &#123; if (!user) &#123; return Promise.reject(); &#125; res.send(user);&#125;).catch((e) =&gt; &#123; res.status(401).send();&#125;); 新增 server/middleware/authenticate.js 12345678910111213141516171819var &#123;User&#125; = require(&apos;./../models/user&apos;);var authenticate = (req, res, next) =&gt; &#123; var token = req.header(&apos;x-auth&apos;); User.findByToken(token).then((user) =&gt; &#123; if (!user) &#123; return Promise.reject(); &#125; req.user = user; req.token = token; next(); &#125;).catch((e) =&gt; &#123; res.status(401).send(); &#125;);&#125;;module.exports = &#123;authenticate&#125;; 在 server/server.js 引入 authenticate var {authenticate} = require('./middleware/authenticate'); 在 /users/me 的部分使用 authenticate 123app.get(&apos;/users/me&apos;, authenticate, (req, res) =&gt; &#123; res.send(req.user);&#125;); Hashing Passwords 安裝 bcryptjs npm i bcryptjs@2.3.0 --save bcrypt 文件 在 playground/hashing.js 新增 bcrypt function 1234567891011const &#123;SHA256&#125; = require(&apos;crypto-js&apos;);const jwt = require(&apos;jsonwebtoken&apos;);const bcrypt = require(&apos;bcryptjs&apos;);var password = &apos;123abc!&apos;;bcrypt.genSalt(10, (err, salt) =&gt; &#123; bcrypt.hash(password, salt, (err, hash) =&gt; &#123; console.log(hash); &#125;);&#125;); node playground/hashing.js 將產出的 hashing 和本來的 password 比較，如果 true 則等於相等 12345var hashedPassword = &apos;$2a$10$.fiP4qt.xBk3w4CIZB1jN.x.WHFrexbi4Dk3Y/er/0MJASi8S1u1y&apos;;bcrypt.compare(password, hashedPassword, (err, res) =&gt; &#123; console.log(res);&#125;); 在 server/models/user.js 新增 UserSchema.pre function，如果 password 修改則要重新 hash，如果沒有修改則不 hash，避免重複 hash 的情況發生 1234567891011121314UserSchema.pre(&apos;save&apos;, function (next) &#123; var user = this; if (user.isModified(&apos;password&apos;)) &#123; bcrypt.genSalt(10, (err, salt) =&gt; &#123; bcrypt.hash(user.password, salt, (err, hash) =&gt; &#123; user.password = hash; next(); &#125;); &#125;); &#125; else &#123; next(); &#125;&#125;); 與 Users 傳送測試資料庫 新增 server/tests/seed/seed.js，把 todos 物件從 server.test.js 移出來，然後新增 populateTodos 123456789101112131415161718192021const &#123;ObjectID&#125; = require(&apos;mongodb&apos;);const &#123;Todo&#125; = require(&apos;./../../models/todo&apos;);const todos = [&#123; _id: new ObjectID(), text: &apos;First test todo&apos;&#125;, &#123; _id: new ObjectID(), text: &apos;Second test todo&apos;, completed: true, completedAt: 333&#125;];const populateTodos = (done) =&gt; &#123; Todo.remove(&#123;&#125;).then(() =&gt; &#123; return Todo.insertMany(todos); &#125;).then(() =&gt; done());&#125;;module.exports = &#123;todos, populateTodos&#125;; 在 server/tests/server.test.js 引入 seed 123const &#123;todos, populateTodos&#125; = require(&apos;./seed/seed&apos;);beforeEach(populateTodos); 在 server/tests/seed/seed.js 新增 Users 物件 12345678910111213141516171819const jwt = require(&apos;jsonwebtoken&apos;);const &#123;User&#125; = require(&apos;./../../models/user&apos;);const userOneId = new ObjectID();const userTwoId = new ObjectID();const users = [&#123; _id: userOneId, email: &apos;andrew@example.com&apos;, password: &apos;userOnePass&apos;, tokens: [&#123; access: &apos;auth&apos;, token: jwt.sign(&#123;_id: userOneId, access: &apos;auth&apos;&#125;, &apos;abc123&apos;).toString() &#125;]&#125;, &#123; _id:userTwoId, email: &apos;jen@example.com&apos;, password: &apos;userTwoPass&apos;&#125;]; 新增 populateUsers 並匯出 12345678910const populateUsers = (done) =&gt; &#123; User.remove(&#123;&#125;).then(() =&gt; &#123; var userOne = new User(users[0]).save(); var userTwo = new User(users[1]).save(); return Promise.all([userOne, userTwo]) &#125;).then(() =&gt; done());&#125;;module.exports = &#123;todos, populateTodos, users, populateUsers&#125;; 在 在 server/tests/server.test.js 引入 populateUsers 123const &#123;todos, populateTodos, users, populateUsers&#125; = require(&apos;./seed/seed&apos;);beforeEach(populateUsers); 測試 POST /users 和 GET /users/me 在 server/tests/server.test.js 新增 1234567891011121314151617181920212223describe(&apos;GET /users/me&apos;, () =&gt; &#123; it(&apos;should return user if authenticated&apos;, (done) =&gt; &#123; request(app) .get(&apos;/users/me&apos;) .set(&apos;x-auth&apos;, users[0].tokens[0].token) .expect(200) .expect((res) =&gt; &#123; expect(res.body._id).toBe(users[0]._id.toHexString()); expect(res.body.email).toBe(users[0].email); &#125;) .end(done); &#125;); it(&apos;should return 401 if not authenticated&apos;, (done) =&gt; &#123; request(app) .get(&apos;/users/me&apos;) .expect(401) .expect((res) =&gt; &#123; expect(res.body).toEqual(&#123;&#125;); &#125;) .end(done); &#125;);&#125;); 新增 POST /users test 123456789101112131415161718192021222324252627describe(&apos;POST /users&apos;, () =&gt; &#123; it(&apos;should create a user&apos;, (done) =&gt; &#123; var email = &apos;example@example.com&apos;; var password = &apos;123mnb!&apos;; request(app) .post(&apos;/users&apos;) .send(&#123;email, password&#125;) .expect(200) .expect((res) =&gt; &#123; expect(res.header[&apos;x-auth&apos;]).toExist(); expect(res.body._id).toExist(); expect(res.body.email).toBe(email); &#125;) .end((err) =&gt; &#123; if (err) &#123; return done(err); &#125; User.findOne(&#123;email&#125;).then((user) =&gt; &#123; expect(user).toExist(); expect(user.password).toNotBe(password); done(); &#125;) &#125;); &#125;);&#125;); 以上 test 會失敗，因為找不到 User，所以在最上面引入 User const {User} = require('./../models/user'); 新增兩種狀況，第一種是 email 和 password 不符合格式，第二種是 email 已經被使用了 123456789101112131415161718192021it(&apos;should return validation errors if request invalid&apos;, (done) =&gt; &#123; request(app) .post(&apos;/users&apos;) .send(&#123; email: &apos;and&apos;, password: &apos;123&apos; &#125;) .expect(400) .end(done)&#125;);it(&apos;should not create user if email in use&apos;, (done) =&gt; &#123; request(app) .post(&apos;/users&apos;) .send(&#123; email: users[0].email, password: &apos;Password123!&apos; &#125;) .expect(400) .end(done)&#125;); 登入 - POST /users/login 在 servers/models/user.js 新增 findByCredentials 的 Schema 1234567891011121314151617181920UserSchema.statics.findByCredentials = function (email, password) &#123; var User = this; return User.findOne(&#123;email&#125;).then((user) =&gt; &#123; if (!user) &#123; return Promise.reject(); &#125; return new Promise((resolve, reject) =&gt; &#123; // Use bcrypt.compare to compare password and user.password bcrypt.compare(password, user.password, (err, res) =&gt; &#123; if (res) &#123; resolve(user); &#125; else &#123; reject(); &#125; &#125;) &#125;); &#125;);&#125;; 在 server/server.js 新增 /users/login 123456789101112app.post(&apos;/users/login&apos;, (req, res) =&gt; &#123; var body = _.pick(req.body, [&apos;email&apos;, &apos;password&apos;]); User.findByCredentials(body.email, body.password).then((user) =&gt; &#123; return user.generateAuthToken().then((token) =&gt; &#123; res.header(&apos;x-auth&apos;, token).send(user); &#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;); 測試 POST /users/login 新增兩道測試，測試可以登入和不能登入的狀態 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950describe(&apos;POST /users/login&apos;, () =&gt; &#123; it(&apos;should login user and return auth token&apos;, (done) =&gt; &#123; request(app) .post(&apos;/users/login&apos;) .send(&#123; email: users[1].email, password: users[1].password &#125;) .expect(200) .expect((res) =&gt; &#123; expect(res.headers[&apos;x-auth&apos;]).toExist(); &#125;) .end((err, res) =&gt; &#123; if (err) &#123; return done(err); &#125; User.findById(users[1]._id).then((user) =&gt; &#123; expect(user.tokens[0]).toInclude(&#123; access: &apos;auth&apos;, token: res.headers[&apos;x-auth&apos;] &#125;); done(); &#125;).catch((e) =&gt; done(e)); &#125;); &#125;); it(&apos;should reject invalid login&apos;, (done) =&gt; &#123; request(app) .post(&apos;/users/login&apos;) .send(&#123; email: users[1].email, password: users[1].password + &apos;1&apos; &#125;) .expect(400) .expect((res) =&gt; &#123; expect(res.headers[&apos;x-auth&apos;]).toNotExist(); &#125;) .end((err, res) =&gt; &#123; if (err) &#123; return done(err); &#125; User.findById(users[1]._id).then((user) =&gt; &#123; expect(user.tokens.length).toBe(0); done(); &#125;).catch((e) =&gt; done(e)); &#125;); &#125;);&#125;); 登出 DELETE /users/me/token 在 server/server.js 新增 delete function 1234567app.delete(&apos;/users/me/token&apos;, authenticate, (req, res) =&gt; &#123; req.user.removeToken(req.token).then(() =&gt; &#123; res.status(200).send(); &#125;, () =&gt; &#123; res.status(400).send(); &#125;);&#125;); 在 server/models/user.js 新增 removeToken function 123456789UserSchema.methods.removeToken = function (token) &#123; var user = this; return user.update(&#123; $pull: &#123; tokens: &#123;token&#125; &#125; &#125;)&#125;;","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Nodejs","slug":"Nodejs","permalink":"https://tingsyuanwang.github.io/tags/Nodejs/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Nodejs 快速學習自我挑戰 Day8","slug":"Nodejs-快速學習自我挑戰-Day8","date":"2017-09-18T17:30:30.000Z","updated":"2017-09-28T19:38:51.000Z","comments":true,"path":"2017/09/19/Nodejs-快速學習自我挑戰-Day8/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/09/19/Nodejs-快速學習自我挑戰-Day8/","excerpt":"","text":"MongoDB，Mongoose 和 REST APIs (Todo API) 部署 API 到 Heroku 安裝 Heroku CLI brew install heroku/brew/heroku 在 server/server.js 新增 port 的設定 const port = process.env.PORT || 3000; 修改 app.listen 123app.listen(port, () =&gt; &#123; console.log(`Started up at port $&#123;port&#125;`);&#125;); 在 package.json 新增 start 指令，並新增 engine 12345678&quot;scripts&quot;: &#123; &quot;start&quot;: &quot;node server/server.js&quot;, &quot;test&quot;: &quot;mocha server/**/*.test.js&quot;, &quot;test-watch&quot;: &quot;nodemon --exec &apos;npm test&apos;&quot; &#125;, &quot;engines&quot;: &#123; &quot;node&quot;: &quot;6.11.3&quot; &#125;, heroku create heroku addons:create mongolab:sandbox 可以取得 MongoDB URI heroku config 修改 server/db/mongoose.js mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/TodoApp'); git push heroku master 如果應用發生問題，可以用以下指令確認 heroku logs Postman 環境 進去 Postman，右上角有 Management Environment，點進去之後，新增 Todo App Local 和 Todo App Heroku，分別設定 url 為 localhost:3000 和 Heroku 的網址 然後將網址都改為 的變數代替 刪除 Resource - DELETE /todos/:id 新增 playground/mongoose-remove.js 1234567891011121314151617181920const &#123;ObjectID&#125; = require(&apos;mongodb&apos;);const &#123;mongoose&#125; = require(&apos;./../server/db/mongoose&apos;);const &#123;Todo&#125; = require(&apos;./../server/models/todo&apos;);const &#123;User&#125; = require(&apos;./../server/models/user&apos;);// 移除全部Todo.remove(&#123;&#125;).then((result) =&gt; &#123; console.log(result);&#125;);// Todo.findOneAndRemoveTodo.findOneAndRemove(&#123;_id: &apos;59c0c37efd4847c2497a12a7&apos;&#125;).then((todo) =&gt; &#123; console.log(todo);&#125;);// Todo.findByIdAndRemoveTodo.findByIdAndRemove(&apos;59c0c37efd4847c2497a12a7&apos;).then((todo) =&gt; &#123; console.log(todo);&#125;); 在 server/server.js 新增 delete route 1234567891011121314151617app.delete(&apos;/todos/:id&apos;, (req, res) =&gt; &#123; var id = req.params.id; if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; Todo.findByIdAndRemove(id).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;); 使用 Postman 測試，並儲存 測試 DELETE /todos/:id 新增第一個測試，最後的部分是驗證資料是否被刪除 12345678910111213141516171819202122describe(&apos;DELETE /todos/:id&apos;, () =&gt; &#123; it(&apos;should remove a todo&apos;, (done) =&gt; &#123; var hexId = todos[1]._id.toHexString(); request(app) .delete(`/todos/$&#123;hexId&#125;`) .expect(200) .expect((res) =&gt; &#123; expect(res.body.todo._id).toBe(hexId) &#125;) .end((err, res) =&gt; &#123; if (err) &#123; return done(err); &#125; Todo.findById(hexId).then((todo) =&gt; &#123; expect(todo).toNotExist(); done(); &#125;).catch((e) =&gt; done(e)); &#125;); &#125;);&#125;); 基本上做法跟 GET 差不多，複製 code，然後把 .get 改成 .delete 即可 123456789101112131415it(&apos;should return 404 if todo not found&apos;, (done) =&gt; &#123; var hexId = new ObjectID().toHexString(); request(app) .delete(`/todos/$&#123;hexId&#125;`) .expect(404) .end(done);&#125;);it(&apos;should return 404 if object id is invalid&apos;, (done) =&gt; &#123; request(app) .delete(&apos;/todos/123abc&apos;) .expect(404) .end(done);&#125;); 更新 Resource - PATCH /todos/:id npm i --save lodash@4.15.0 修改 server/server.js，引入 lodash，將其它引入的資料用 const。 1234const _ = require(&apos;lodash&apos;);const express = require(&apos;express&apos;);const bodyParser = require(&apos;body-parser&apos;);const &#123;ObjectID&#125; = require(&apos;mongodb&apos;); 新增 patch，如果 completed = true，寫入日期，如果沒有，把 completed 設為 false 且 completedAt 設為 null 12345678910111213141516171819202122232425app.patch(&apos;/todos/:id&apos;, (req, res) =&gt; &#123; var id = req.params.id; var body = _.pick(req.body, [&apos;text&apos;, &apos;completed&apos;]); if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; if (_.isBoolean(body.completed) &amp;&amp; body.completed ) &#123; body.completedAt = new Date().getTime(); &#125; else &#123; body.completed = false; body.completedAt = null; &#125; Todo.findByIdAndUpdate(id, &#123;$set: body&#125;, &#123;new: true&#125;).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;); 用 Postman 測試，傳入 JSON，本地端測試完，再用 Heroku 1234&#123; &quot;completed&quot;: true, &quot;text&quot;: &quot;update from postman&quot;&#125; 測試 PATCH /todos/:id PATCH test 的設計邏輯 12345678910111213141516describe(&apos;PATCH /todos/:id&apos;, () =&gt; &#123; it(&apos;should update the todo&apos;, (done) =&gt; &#123; // grab id of first item // update text, set completed true // 200 // text is changed, completed is true, completedAt is a number .toBeA &#125;); it(&apos;should clear completedAt when todo is not completed&apos;, (done) =&gt; &#123; // grab id of second todo item // update text, set completed to false // 200 // text is changed, completed is false, completedAt is null .toNotExist &#125;);&#125;); 測試修改 completed 為 true 123456789101112131415161718it(&apos;should update the todo&apos;, (done) =&gt; &#123; var hexId = todos[0]._id.toHexString(); var text = &apos;This should be the new text&apos;; request(app) .patch(`/todos/$&#123;hexId&#125;`) .send(&#123; completed: true, text &#125;) .expect(200) .expect((res) =&gt; &#123; expect(res.body.todo.text).toBe(text); expect(res.body.todo.completed).toBe(true); expect(res.body.todo.completedAt).toBeA(&apos;number&apos;); &#125;) .end(done);&#125;); 測試修改 completed 為 false 123456789101112131415161718it(&apos;should clear completedAt when todo is not completed&apos;, (done) =&gt; &#123; var hexId = todos[1]._id.toHexString(); var text = &apos;This should be the new text!!&apos;; request(app) .patch(`/todos/$&#123;hexId&#125;`) .send(&#123; completed: false, text &#125;) .expect(200) .expect((res) =&gt; &#123; expect(res.body.todo.text).toBe(text); expect(res.body.todo.completed).toBe(false); expect(res.body.todo.completedAt).toNotExist(); &#125;) .end(done);&#125;); 創建測試 Database 修改 package.json 12345&quot;scripts&quot;: &#123; &quot;start&quot;: &quot;node server/server.js&quot;, &quot;test&quot;: &quot;export NODE_ENV=test || \\&quot;SET NODE_ENV=test\\&quot; &amp;&amp; mocha server/**/*.test.js&quot;, &quot;test-watch&quot;: &quot;nodemon --exec &apos;npm test&apos;&quot;&#125;, 修改 server/db/mongoose.js mongoose.connect(process.env.MONGODB_URI); 新增 server/config/config.js 123456789var env = process.env.NODE_ENV || &apos;development&apos;;if (env === &apos;development&apos;) &#123; process.env.PORT = 3000; process.env.MONGODB_URI = &apos;mongodb://localhost:27017/TodoApp&apos;;&#125; else if (env === &apos;test&apos;) &#123; process.env.PORT = 3000; process.env.MONGODB_URI = &apos;mongodb://localhost:27017/TodoAppTest&apos;;&#125; 在 server/server.js 引入 config require('./config/config'); node server/server.js，會進入 development 環境 npm test，會進入 test 環境，會再新建一個資料庫 安全和認證 建立 User Model npm i validator@5.6.0 --save 修改 server/models/user.js 123456789101112131415161718192021222324252627282930313233const mongoose = require(&apos;mongoose&apos;);const validator = require(&apos;validator&apos;);var User = mongoose.model(&apos;User&apos;, &#123; email: &#123; type: String, required: true, trim: true, minlength: 1, unique: true, validate: &#123; validator: validator.isEmail, message: &apos;&#123;VALUE&#125; is not a valid email&apos; &#125; &#125;, password: &#123; type: String, require: true, minlength: 6, &#125;, tokens: [&#123; access: &#123; type: String, require: true &#125;, token: &#123; type: String, require: true &#125; &#125;]&#125;);module.exports = &#123;User&#125;; 修改 server/server.js 12345678910app.post(&apos;/users&apos;, (req, res) =&gt; &#123; var body = _.pick(req.body, [&apos;email&apos;, &apos;password&apos;]); var user = new User(body); user.save().then((user) =&gt; &#123; res.send(user); &#125;).catch((e) =&gt; &#123; res.status(400).send(e); &#125;);&#125;); JWTs 和 Hashing npm install crypto-js@3.1.6 --save 新增 playground/hashing.js 1234567891011121314151617181920212223const &#123;SHA256&#125; = require(&apos;crypto-js&apos;);var message = &apos;I am user number 3&apos;;var hash = SHA256(message).toString();console.log(`Message: $&#123;message&#125;`);console.log(`Hash: $&#123;hash&#125;`);var data = &#123; id: 4&#125;;var token = &#123; data, hash: SHA256(JSON.stringify(data) + &apos;somesecret&apos;).toString()&#125;;var resultHash = SHA256(JSON.stringify(token.data) + &apos;somesecret&apos;).toString();if (resultHash === token.hash) &#123; console.log(&apos;Data was not changed&apos;);&#125; else &#123; console.log(&apos;Data was changed. Do not trust!&apos;);&#125; 驗證 data 如果不同會跳出資料改變的訊息 12token.data.id = 5;token.hash = SHA256(JSON.stringify(token.data)).toString(); npm i jsonwebtoken@7.1.9 --save JWT 官方網站 使用 jwt 來進行驗證 1234567891011const jwt = require(&apos;jsonwebtoken&apos;);var data = &#123; id: 10&#125;;var token = jwt.sign(data, &apos;123abc&apos;);console.log(token);var decoded = jwt.verify(token, &apos;123abc&apos;);console.log(&apos;decoded&apos;, decoded); 產生 Auth Tokens 和 Setting Headers 修改 server/models/user.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556const mongoose = require(&apos;mongoose&apos;);const validator = require(&apos;validator&apos;);const jwt = require(&apos;jsonwebtoken&apos;);const _ = require(&apos;lodash&apos;);var UserSchema = new mongoose.Schema(&#123; email: &#123; type: String, required: true, trim: true, minlength: 1, unique: true, validate: &#123; validator: validator.isEmail, message: &apos;&#123;VALUE&#125; is not a valid email&apos; &#125; &#125;, password: &#123; type: String, require: true, minlength: 6, &#125;, tokens: [&#123; access: &#123; type: String, require: true &#125;, token: &#123; type: String, require: true &#125; &#125;]&#125;);UserSchema.methods.toJSON = function () &#123; var user = this; var userObject = user.toObject(); return _.pick(userObject, [&apos;_id&apos;, &apos;email&apos;]);&#125;;UserSchema.methods.generateAuthToken = function () &#123; var user = this; var access = &apos;auth&apos;; var token = jwt.sign(&#123;_id: user._id.toHexString(), access&#125;, &apos;abc123&apos;).toString(); user.tokens.push(&#123;access, token&#125;); return user.save().then(() =&gt; &#123; return token; &#125;);&#125;;var User = mongoose.model(&apos;User&apos;, UserSchema);module.exports = &#123;User&#125;; 修改 server/server.js 12345678910111213// POST /usersapp.post(&apos;/users&apos;, (req, res) =&gt; &#123; var body = _.pick(req.body, [&apos;email&apos;, &apos;password&apos;]); var user = new User(body); user.save().then((user) =&gt; &#123; return user.generateAuthToken(); &#125;).then((token) =&gt; &#123; res.header(&apos;x-auth&apos;, token).send(user); &#125;).catch((e) =&gt; &#123; res.status(400).send(e); &#125;);&#125;);","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Nodejs","slug":"Nodejs","permalink":"https://tingsyuanwang.github.io/tags/Nodejs/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Nodejs 快速學習自我挑戰 Day7","slug":"Nodejs-快速學習自我挑戰-Day7","date":"2017-09-17T11:56:53.000Z","updated":"2017-09-18T17:27:10.000Z","comments":true,"path":"2017/09/17/Nodejs-快速學習自我挑戰-Day7/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/09/17/Nodejs-快速學習自我挑戰-Day7/","excerpt":"","text":"MongoDB，Mongoose 和 REST APIs (Todo API) 安裝 Postman Postman 官網 Resource Creation Endpoint - POST /todos 新增 server/db/mongoose.js 123456var mongoose = require(&apos;mongoose&apos;);mongoose.Promise = global.Promise;mongoose.connect(&apos;mongodb://localhost:27017/TodoApp&apos;);module.exports = &#123;mongoose&#125;; 新增 server/models/todo.js 1234567891011121314151617181920var mongoose = require(&apos;mongoose&apos;);var Todo = mongoose.model(&apos;Todo&apos;, &#123; text: &#123; type: String, required: true, minlength: 1, trim: true &#125;, completed: &#123; type: Boolean, default: false &#125;, completedAt: &#123; type: Number, default: null &#125;&#125;);module.exports = &#123;Todo&#125;; 新增 server/models/user.js 123456789101112var mongoose = require(&apos;mongoose&apos;);var User = mongoose.model(&apos;User&apos;, &#123; email: &#123; type: String, required: true, trim: true, minlength: 1 &#125;&#125;);module.exports = &#123;User&#125;; 剛剛把 server/server.js 的資料都搬到了其它資料夾，所以檔案簡化為 123var &#123;mongoose&#125; = require(&apos;./db/mongoose&apos;);var &#123;Todo&#125; = require(&apos;./models/todo&apos;);var &#123;User&#125; = require(&apos;./models/user&apos;); 安裝 body-parse 可以把 JSON 轉換為 object npm i express@4.14.0 body-parser@1.15.2 --save 在 server/server.js 引入 Library 12var express = require(&apos;express&apos;);var bodyParser = require(&apos;body-parser&apos;); 使用 express 1234567891011var app = express();app.use(bodyParser.json());app.post(&apos;/todos&apos;, (req, res) =&gt; &#123; console.log(req.body);&#125;);app.listen(3000, () =&gt; &#123; console.log(&apos;Started on port 3000&apos;);&#125;); 在 Postman 新增 Post http://localhost/todos，選擇 Body，選擇 raw，選擇 JSON，並送出 Post 123&#123; &quot;text&quot;: &quot;This is from postman&quot;&#125; 在 console 就會看到傳進去的資料 HTTP Status Codes：確認 HTTP 狀態碼 修改 app.post，如果 OK 就寫入 MongoDB，並回傳 OK 的訊息，如果有問題就回傳 error。 1234567891011app.post(&apos;/todos&apos;, (req, res) =&gt; &#123; var todo = new Todo(&#123; text: req.body.text &#125;); todo.save().then((doc) =&gt; &#123; res.send(doc); &#125;, (e) =&gt; &#123; res.status(400).send(e); &#125;);&#125;); 測試 POST /todos npm i expect@1.20.2 mocha@3.0.2 nodemon@1.10.2 supertest@2.0.0 --save-dev 把 server/server.js 輸出 module.exports = {app}; 新增 server/tests/server.test.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950const expect = require(&apos;expect&apos;);const request = require(&apos;supertest&apos;);const &#123;app&#125; = require(&apos;./../server&apos;);const &#123;Todo&#125; = require(&apos;./../models/todo&apos;);beforeEach((done) =&gt; &#123; Todo.remove(&#123;&#125;).then(() =&gt; done());&#125;);describe(&apos;POST /todos&apos;, () =&gt; &#123; it(&apos;should create a new todo&apos;, (done) =&gt; &#123; var text = &apos;Test todo text&apos;; request(app) .post(&apos;/todos&apos;) .send(&#123;text&#125;) .expect(200) .expect((res) =&gt; &#123; expect(res.body.text).toBe(text); &#125;) .end((err, res) =&gt; &#123; if (err) &#123; return done(err); &#125; Todo.find().then((todos) =&gt; &#123; expect(todos.length).toBe(1); expect(todos[0].text).toBe(text); done(); &#125;).catch((e) =&gt; done(e)); &#125;); &#125;); it(&apos;should not create todo with invalid body data&apos;, (done) =&gt; &#123; request(app) .post(&apos;/todos&apos;) .send(&#123;&#125;) .expect(400) .end((err, res) =&gt; &#123; if (err) &#123; return done(err); &#125; Todo.find().then((todos) =&gt; &#123; expect(todos.length).toBe(0); done(); &#125;).catch((e) =&gt; done(e)); &#125;); &#125;);&#125;); List Resources - GET /todos 在 server/server.js 新增 GET 1234567app.get(&apos;/todos&apos;, (req, res) =&gt; &#123; Todo.find().then((todos) =&gt; &#123; res.send(&#123;todos&#125;); &#125;, (e) =&gt; &#123; res.status(400).send(e); &#125;);&#125;); node server/server.js 去 Postman 測試 新增 GET http://localhost:3000/todos 右方 save as，新增一個新的 collection，Todo App，把指令加進去 再新增 POST http://localhost:3000/todos，選 raw，JSON，並寫入資料 也加入新的 collection 測試 GET /todos 修改 server/tests/server.test.js 1234567891011const todos = [&#123; text: &apos;First test todo&apos;&#125;, &#123; text: &apos;Second test todo&apos;&#125;];// 在測試每一筆的時候，插入兩筆beforeEach((done) =&gt; &#123; Todo.remove(&#123;&#125;).then(() =&gt; &#123; return Todo.insertMany(todos); &#125;).then(() =&gt; done());&#125;); 第一個測試直接找 {text} Todo.find({text}).then((todos) =&gt; { 第二個測試改為兩筆 expect(todos.length).toBe(2); 新增 GET 測試 1234567891011describe(&apos;GET /todos&apos;, () =&gt; &#123; it(&apos;should get all todos&apos;, (done) =&gt; &#123; request(app) .get(&apos;/todos&apos;) .expect(200) .expect((res) =&gt; &#123; expect(res.body.todos.length).toBe(2); &#125;) .end(done); &#125;);&#125;); Mongoose Queries 和 ID Validation 新增 playground/mongoose-queries.js 123456789101112131415161718192021222324252627282930const &#123;ObjectID&#125; = require(&apos;mongodb&apos;);const &#123;mongoose&#125; = require(&apos;./../server/db/mongoose&apos;);const &#123;Todo&#125; = require(&apos;./../server/models/todo&apos;);const &#123;User&#125; = require(&apos;./../server/models/user&apos;);var id = &apos;59be9ceb9e82d91c669205a611&apos;;if (!ObjectID.isValid(id)) &#123; console.log(&apos;ID not valid&apos;);&#125;Todo.find(&#123; _id: id&#125;).then((todos) =&gt; &#123; console.log(&apos;Todos&apos;, todos);&#125;);Todo.findOne(&#123; _id: id&#125;).then((todo) =&gt; &#123; console.log(&apos;Todo&apos;, todo);&#125;);Todo.findById(id).then((todo) =&gt; &#123; if (!todo) &#123; return console.log(&apos;Id not found&apos;); &#125; console.log(&apos;Todo by id&apos;, todo);&#125;).catch((e) =&gt; console.log(e)); nodemon playground/mongoose-queries.js 新增 query user 123456789User.findById(&apos;59be61a5c4e4cea95cfe65ea&apos;).then((user) =&gt; &#123; if (!user) &#123; return console.log(&apos;Unable to find user&apos;); &#125; console.log(JSON.stringify(user, undefined, 2));&#125;, (e) =&gt; &#123; console.log(e);&#125;); 取得 individual Resource - GET /todos/:id 取得資料的思路 123456789// Valid id using isValid // 404 - send back empty send// findById // success // if todo - send it back // if no todo - send back 404 with empty body // error // 400 - and send empty body back 引入 ObjectId var {ObjectID} = require('mongodb'); 取得 id 1234567891011121314151617app.get(&apos;/todos/:id&apos;, (req, res) =&gt; &#123; var id = req.params.id; if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; Todo.findById(id).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;); 測試 GET /todos/:id 在 server/tests/server.test.js 引入 ObjectId const {ObjectID} = require('mongodb'); 在傳入的陣列新增 id 1234567const todos = [&#123; _id: new ObjectID(), text: &apos;First test todo&apos;&#125;, &#123; _id: new ObjectID(), text: &apos;Second test todo&apos;&#125;]; 寫測試 123456789101112131415161718192021222324252627describe(&apos;GET /todo/:id&apos;, () =&gt; &#123; it(&apos;should return todo doc&apos;, (done) =&gt; &#123; request(app) .get(`/todos/$&#123;todos[0]._id.toHexString()&#125;`) .expect(200) .expect((res) =&gt; &#123; expect(res.body.todo.text).toBe(todos[0].text); &#125;) .end(done); &#125;); it(&apos;should return 404 if todo not found&apos;, (done) =&gt; &#123; var hexId = new ObjectID().toHexString(); request(app) .get(`/todos/$&#123;hexId&#125;`) .expect(404) .end(done); &#125;); it(&apos;should return 404 for non-object ids&apos;, (done) =&gt; &#123; request(app) .get(&apos;/todos/123abc&apos;) .expect(404) .end(done); &#125;);&#125;);","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Nodejs","slug":"Nodejs","permalink":"https://tingsyuanwang.github.io/tags/Nodejs/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Nodejs 快速學習自我挑戰 Day6","slug":"Nodejs-快速學習自我挑戰-Day6","date":"2017-09-15T06:01:22.000Z","updated":"2017-09-17T11:54:13.000Z","comments":true,"path":"2017/09/15/Nodejs-快速學習自我挑戰-Day6/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/09/15/Nodejs-快速學習自我挑戰-Day6/","excerpt":"","text":"MongoDB，Mongoose 和 REST APIs (Todo API) 安裝 MongoDB 和 Mongoose 下載 MongoDB 將檔案解壓縮後，修改檔名為 mongo，然後移動到家目錄底下 在家目錄新增 mongo-data 的資料夾 啟動 server 並指定路徑./mongod --dbpath ~/mongo-data 新開分頁，執行 ./mongo 寫入資料庫 db.Todos.insert({text: 'File new node course'}) db.Todos.find() ，搜尋資料庫會發現剛剛輸入的資料 Robomongo 建立 NoSQL Vocabulary SQL 有 table 結構，NoSQL 則是使用物件的形式 (Collection) SQL 每一筆資料稱為 Row/Record，NoSQL 則稱為 Document SQL 每一個欄位稱為 Column，NoSQL 則稱為 Field 連接 MongoDB 並寫入資料 MongoDB native mkdir node-todo-api npm init npm install mongodb@2.2.5 --save 新增 playground/mongodb-connect.js 12345678910const MongoClient = require(&apos;mongodb&apos;).MongoClient;MongoClient.connect(&apos;mongodb://localhost:27017/TodoApp&apos;, (err, db) =&gt; &#123; if (err) &#123; return console.log(&apos;Unable to connect to MongoDB server&apos;); &#125; console.log(&apos;Connected to MongoDB server&apos;); db.close();&#125;); node playground/mongodb-connect.js 在 playground/mongodb-connect.js 插入一行 123456789db.collection(&apos;Todos&apos;).insertOne(&#123; text: &apos;Something to do&apos;, completed: false &#125;, (err, result) =&gt; &#123; if (err) &#123; return console.log(&apos;Unable to insert todo&apos;, err); &#125; console.log(JSON.stringify(result.ops, undefined, 2)); &#125;); node playground/mongodb-connect.js 在 playground/mongodb-connect.js 新增 Users 資料表，且新增 fields (name, age, location) 1234567891011// Insert new doc into Users (name, age, location) db.collection(&apos;Users&apos;).insertOne(&#123; name: &apos;Andrew&apos;, age: 25, location: &apos;Philadelphia&apos; &#125;, (err, result) =&gt; &#123; if (err) &#123; return console.log(&apos;Unable to insert User&apos;, err); &#125; console.log(JSON.stringify(result.ops)); &#125;); node playground/mongodb-connect.js ObjectId 將 const MongoClient = require('mongodb').MongoClient; 取代為 const { MongoClient, ObjectID } = require('mongodb'); 取得資料 直接在 Robo 裡面的 Todos 新增 document 1234&#123; text: &quot;Walk the dog&quot;, completed: false&#125; 複製 mongodb-connect.js 並新增為 mongodb-find.js 1234567891011121314151617const &#123; MongoClient, ObjectID &#125; = require(&apos;mongodb&apos;);MongoClient.connect(&apos;mongodb://localhost:27017/TodoApp&apos;, (err, db) =&gt; &#123; if (err) &#123; return console.log(&apos;Unable to connect to MongoDB server&apos;); &#125; console.log(&apos;Connected to MongoDB server&apos;); db.collection(&apos;Todos&apos;).find().toArray().then((docs) =&gt; &#123; console.log(&apos;Todos&apos;); console.log(JSON.stringify(docs, undefined, 2)); &#125;, (err) =&gt; &#123; console.log(&apos;Unable to fetch todos&apos;, err); &#125;); // db.close();&#125;); node playground/mongodb-find.js db.collection('Todos').find({completed: false}).toArray().then((docs) =&gt; { 這樣就只會出現 false 的選項了 node playground/mongodb-find.js db.collection('Todos').find({_id: new ObjectID('59bb791adf952c24d5ae60b7')}) 也可以用 id 的方式搜尋 node playground/mongodb-find.js 用計數的方式算出東西 12345db.collection(&apos;Todos&apos;).find().count().then((count) =&gt; &#123; console.log(`Todos count: $&#123;count&#125;`);&#125;, (err) =&gt; &#123; console.log(&apos;Unable to fetch todos&apos;, err);&#125;); Deleting Document 一次刪除很多 deleteMany 123db.collection(&apos;Todos&apos;).deleteMany(&#123;text: &apos;Eat lunch&apos;&#125;).then((result) =&gt; &#123; console.log(result);&#125;); 一次刪除一個 deleteOne 123db.collection(&apos;Todos&apos;).deleteOne(&#123;text: &apos;Eat lunch&apos;&#125;).then((result) =&gt; &#123; console.log(result);&#125;); 選擇一個然後刪除，如果有多個一樣的，會自動選擇第一筆找到的 findOneAndDelete 123db.collection(&apos;Todos&apos;).findOneAndDelete(&#123;completed: false&#125;).then((result) =&gt; &#123; console.log(result);&#125;); 更新資料 更新 Todos，set 改變值，returnOriginal 設為 false 就是回傳值的時候，傳回更新後的值，預設為 true 1234567891011db.collection(&apos;Todos&apos;).findOneAndUpdate(&#123; _id: new ObjectID(&apos;59bcaa59fd4847c2497a0104&apos;)&#125;, &#123; $set: &#123; completed: true &#125;&#125;, &#123; returnOriginal: false&#125;).then((result) =&gt; &#123; console.log(result);&#125;); 更新 Users，inc 設為 1 就是把值增加 1 1234567891011121314db.collection(&apos;Users&apos;).findOneAndUpdate(&#123; _id: new ObjectID(&apos;59bb7a6630523c252369e2e4&apos;)&#125;, &#123; $set: &#123; name: &apos;Andrew&apos; &#125;, $inc: &#123; age: 1 &#125;&#125;,&#123; returnOriginal: false&#125;).then((result) =&gt; &#123; console.log(result);&#125;); 設定 Mongoose Mongoose 官方網站 npm i mongoose@4.5.9 --save 使用 Mongoose 寫入資料到 MongoDB 1234567891011121314151617181920212223242526var mongoose = require(&apos;mongoose&apos;);mongoose.Promise = global.Promise;mongoose.connect(&apos;mongodb://localhost:27017/TodoApp&apos;);var Todo = mongoose.model(&apos;Todo&apos;, &#123; text: &#123; type: String &#125;, completed: &#123; type: Boolean &#125;, completedAt: &#123; type: Number &#125;&#125;);var newTodo = new Todo(&#123; text: &apos;Cook dinner&apos;&#125;);newTodo.save().then((doc) =&gt; &#123; console.log(&apos;Save todo&apos;, doc);&#125;, (e) =&gt; &#123; console.log(&apos;Unable to save todo&apos;);&#125;); 再寫入別的資料 1234567891011var otherTodo = new Todo(&#123; text: &apos;Feed the cat&apos;, completed: true, completedAt: 123&#125;);otherTodo.save().then((doc) =&gt; &#123; console.log(JSON.stringify(doc, undefined, 2));&#125;, (e) =&gt; &#123; console.log(&apos;Unable to save&apos;, e);&#125;); Validators，Types 和 Defaults 修改 server/server.js，新增 model，並設定驗證 12345678var User = mongoose.model(&apos;User&apos;, &#123; email: &#123; type: String, required: true, trim: true, minlength: 1 &#125;&#125;); 插入物件並儲存 123456789var user = new User(&#123; email: &apos;andrew@example.com &apos;&#125;);user.save().then((doc) =&gt; &#123; console.log(&apos;User saved&apos;, doc);&#125;, (e) =&gt; &#123; console.log(&apos;Unable to save user&apos;, e);&#125;); 這個部分有一個很特別的地方，如果 type 設為 String，輸入數字或是布林值都會變成 text，並不會出錯。","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Nodejs","slug":"Nodejs","permalink":"https://tingsyuanwang.github.io/tags/Nodejs/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Nodejs 快速學習自我挑戰 Day5","slug":"Nodejs-快速學習自我挑戰-Day5","date":"2017-09-14T03:24:09.000Z","updated":"2017-09-15T05:59:45.000Z","comments":true,"path":"2017/09/14/Nodejs-快速學習自我挑戰-Day5/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/09/14/Nodejs-快速學習自我挑戰-Day5/","excerpt":"","text":"網頁伺服器及應用程式部署 進階 template 註冊 partials hbs.registerPartials(__dirname + '/views/partials') 將 footer code 移到 views/partials/footer.hbs 123&lt;footer&gt; &lt;p&gt;Copyright &#123;&#123;currentYear&#125;&#125;&lt;/p&gt;&lt;/footer&gt; 本來 footer 的區塊用 {{> footer}} 取代 nodemon 監控 js 和 hbs 檔案 nodemon server.js -e js, hbs 將 header code 移到 views/partials/header.hbs 12345&lt;header&gt; &lt;h1&gt;&#123;&#123;pageTitle&#125;&#125;, 123&lt;/h1&gt; &lt;p&gt;&lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;/about&quot;&gt;About&lt;/a&gt;&lt;/p&gt;&lt;/header&gt; 本來 footer 的區塊用 {{> header}} 取代 使用 hbs 的 Helper 來取得年份 123hbs.registerHelper(&apos;getCurrentYear&apos;, () =&gt; &#123; return new Date().getFullYear();&#125;); 本來 {{currentYear}} 用 {{getCurrentYear}} 取代 使用 hbs 的 Helper 註冊 screamIt 然後將 text 變數送進去 123hbs.registerHelper(&apos;screamIt&apos;, (text) =&gt; &#123; return text.toUpperCase();&#125;); 使用 screamIt，text 變數設為 welcomeMessage {{screamIt welcomeMessage}} Express Middleware 註冊一個 middleware，然後 console 時間以及擷取的狀態 123456app.use((req, res, next) =&gt; &#123; var now = new Date().toString(); console.log(`$&#123;now&#125;: $&#123;req.method&#125; $&#123;req.url&#125;`); next();&#125;); 新增 maintenance.hbs 12345678910111213&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;Some Website&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;We&apos;ll be right back&lt;/h1&gt; &lt;p&gt; The site is currently being updated. &lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 使用 middleware 把頁面通通導向 maintenance 123app.use((req, res ,next) =&gt; &#123; res.render(&apos;maintenance&apos;);&#125;); Git 版本控制 Git 官方網站 啟動 git 專案 git init 新增檔案 git add 新增 .gitignore 讓部分檔案不上傳 對新增的檔案做 commit git commit -m 'Commit Content' 設置 ssh key ssh key 目錄 ~/.ssh 產生 ssh key ssh-keygen -t rsa -b 4096 -C 'YOUR@EMAIL' 設定完成會產生出 id_rsa(此為私密金鑰，不能給別人) 和 id_rsa_pub(此為公開金鑰，用於第三方軟件) 開啟 ssh-agent eval &quot;$(ssh-agent -s)&quot; 將 ssh 私鑰加入 ssh-agent ssh-add ~/.ssh/id_rsa 將 ssh key 貼到 Github =&gt; Setting =&gt; SSH and GPG key pbcopy &lt; ~/.ssh/id_rsa.pub 跟 Github 進行連線 ssh -T git@github.com 部署 apps heroku 安裝 heroku cli brew install heroku 在本地端 cli 登入 heroku heroku login 新增 ssh key 到 keroku heroku keys:add 檢查在電腦上的 key heroku keys 跟 heroku 進行連線 ssh -v git@heroku.com 修改 server.js 讓 port 動態調整，先取得 env 的 PORT，如果不存在則使用預設的 3000 Port const port = process.env.PORT || 3000; 修改 server.js 的 app.listen 123app.listen(port, () =&gt; &#123; console.log(`Server is up on port $&#123;port&#125;`);&#125;); 在 package.json 的 script 新增 start，讓 server 知道要執行哪個檔案 1234&quot;scripts&quot;: &#123; &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;, &quot;start&quot;: &quot;node server.js&quot; &#125; 開啟 heroku 專案 heroku create 將專案推到 heroku git push heroku 用瀏覽器開啟 keroku 的專案heroku open 測試 Apps Mocha 和基本測試 mkdir node-tests cd node-tests npm init，全部直接使用預設值 新增檔案 utils/utils.js module.exports.add = (a, b) =&gt; a + b; Mocha 官方網站 安裝 mocha 且不在正式上線時使用，僅用於開發用途 npm i mocha@3.0.0 --save-dev 新增 utils/util.test.js 12345const utils = require(&apos;./utils&apos;);it(&apos;should add two numbers&apos;, () =&gt; &#123; var res = utils.add(33, 11);&#125;); 修改 package.json，**搜尋所有資料夾 123&quot;scripts&quot;: &#123; &quot;test&quot;: &quot;mocha **/*.test.js&quot;&#125;, npm test 執行測試 加一行錯誤 throw new Error('Value not correct!') 再執行 npm test，就會發現錯誤了 加 if statement，回傳得到的錯誤值 123if (res !== 44) &#123; throw new Error(`Expected 44, but got $&#123;res&#125;.`)&#125; 在 utils/utils.js 新增一個 module module.exports.square = (x) =&gt; x * x; 在 utils.utils.test.js 多新增一個 test 1234567it (&apos;should square a number&apos;, () =&gt; &#123; var res = utils.square(3); if (res !== 9) &#123; throw new Error(`Expected 9, but got $&#123;res&#125;.`) &#125;&#125;); 監控和自動重啟測試 nodemon --exec 'npm test' 在 package.json 直接新增 command &quot;test-watch&quot;: &quot;nodemon --exec \\&quot;npm test\\&quot;&quot; npm run test-watch 使用 Assertion Library Assertion Library 安裝 expect npm install expect@1.20.2 --save-dev 用 expect 簡化函數 12345678910111213141516171819202122232425262728const expect = require(&apos;expect&apos;);const utils = require(&apos;./utils&apos;);it(&apos;should add two numbers&apos;, () =&gt; &#123; var res = utils.add(33, 11); expect(res).toBe(44).toBeA(&apos;number&apos;);&#125;);it (&apos;should square a number&apos;, () =&gt; &#123; var res = utils.square(3); expect(res).toBe(9).toBeA(&apos;number&apos;);&#125;);it (&apos;should expect some values&apos;, () =&gt; &#123; expect(12).toNotBe(12); expect(&#123;name: &apos;andrew&apos;&#125;).toNotEqual(&#123;name: &apos;Andrew&apos;&#125;); expect([2, 3, 4]).toExclude(1); expect(&#123; name: &apos;Andrew&apos;, age: 25, location: &apos;Philadelphia&apos; &#125;).toExclude(&#123; age: 23 &#125;)&#125;); 在 utils/utils.js 新增 module 123456module.exports.setName = (user, fullName) =&gt; &#123; var names = fullName.split(&apos; &apos;); user.firstName = names[0]; user.lastName = names[1]; return user;&#125;; 用 expect 確認回傳的物件是正確值 123456789101112// should verify first and last names are set// assert it includes firstName and lastName with proper valuesit (&apos;should set firstName and lastName&apos;, () =&gt; &#123; var user = &#123;location: &apos;Philadelphia&apos;, age: 25&#125;; var res = utils.setName(user, &apos;Andrew Mead&apos;); expect(res).toInclude(&#123; firstName: &apos;Andrew&apos;, lastName: &apos;Mead&apos;, age: 25 &#125;);&#125;); 測試非同步式程式碼 在 utils/utils.js 新增一個 asyncAdd 12345module.exports.asyncAdd = (a, b, callback) =&gt; &#123; setTimeout(() =&gt; &#123; callback(a + b); &#125;, 1000);&#125;; 在 utils/utils.test.js 測試 asyncAdd，這邊一定要使用 done，這樣才知道他是非同步，會等完成再執行 expect 123456it(&apos;should async add two numbers&apos;, (done) =&gt; &#123; utils.asyncAdd(4, 3, (sum) =&gt; &#123; expect(sum).toBe(7).toBeA(&apos;number&apos;); done(); &#125;);&#125;); 在 utils/utils.js 新增一個 asyncSquare 12345module.exports.asyncSquare = (x, callback) =&gt; &#123; setTimeout(() =&gt; &#123; callback(x * x); &#125;, 1000);&#125;; 在 utils/utils.test.js 測試 asyncSqure 123456it(&apos;should async square a number&apos;, (done) =&gt; &#123; utils.asyncSquare(5, (res) =&gt; &#123; expect(res).toBe(25).toBeA(&apos;number&apos;); done(); &#125;);&#125;); 測試 Express 應用 安裝 Express npm i express@4.14.0 --save 新增 server/server.js 123456789const express = require(&apos;express&apos;);var app = express();app.get(&apos;/&apos;, (req, res) =&gt; &#123; res.send(&apos;Hello world!&apos;);&#125;);app.listen(3000); 執行 server node server/server.js 去瀏覽器輸入 http://localhost:3000/ 就會看到 Hello world! SuperTest npm i supertest@2.0.0 --save-dev 修改 server/server.js 輸出內容讓其它地方可用 module.exports.app = app; 新增 server/server.test.js 12345678910const request = require(&apos;supertest&apos;);var app = require(&apos;./server&apos;).app;it(&apos;should return hello world response&apos;, (done) =&gt; &#123; request(app) .get(&apos;/&apos;) .expect(&apos;Hello world!&apos;) .end(done);&#125;); 引入 expect，用 expect 客製化測試 12345678910111213141516const request = require(&apos;supertest&apos;);const expect = require(&apos;expect&apos;);var app = require(&apos;./server&apos;).app;it(&apos;should return hello world response&apos;, (done) =&gt; &#123; request(app) .get(&apos;/&apos;) .expect(404) .expect((res) =&gt; &#123; expect(res.body).toInclude(&#123; error: &apos;Page not found.&apos; &#125;); &#125;) .end(done);&#125;); 在 server/server.js 新增路由 1234567891011121314// GET /users// Give users a name prop and age propapp.get(&apos;/users&apos;, (req, res) =&gt; &#123; res.send([&#123; name: &apos;Mike&apos;, age: 27 &#125;, &#123; name: &apos;Andrew&apos;, age: 25 &#125;, &#123; name: &apos;Jen&apos;, age: 26 &#125;]);&#125;); 在 server/server.test.js 新增測試 123456789101112131415// Make a new test// assert 200// Assert that you exist in users arrayit(&apos;should return my user object&apos;, (done) =&gt; &#123; request(app) .get(&apos;/users&apos;) .expect(200) .expect((res) =&gt; &#123; expect(res.body).toInclude(&#123; name: &apos;Andrew&apos;, age: 25 &#125;); &#125;) .end(done);&#125;); 使用 describe() 組織測試 修改 utils/utils.test.js 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960const expect = require(&apos;expect&apos;);const utils = require(&apos;./utils&apos;);describe(&apos;Utils&apos;, () =&gt; &#123; describe(&apos;#add&apos;, () =&gt; &#123; it(&apos;should add two numbers&apos;, () =&gt; &#123; var res = utils.add(33, 11); expect(res).toBe(44).toBeA(&apos;number&apos;); &#125;); it(&apos;should async add two numbers&apos;, (done) =&gt; &#123; utils.asyncAdd(4, 3, (sum) =&gt; &#123; expect(sum).toBe(7).toBeA(&apos;number&apos;); done(); &#125;); &#125;); &#125;); it (&apos;should square a number&apos;, () =&gt; &#123; var res = utils.square(3); expect(res).toBe(9).toBeA(&apos;number&apos;); &#125;); it(&apos;should async square a number&apos;, (done) =&gt; &#123; utils.asyncSquare(5, (res) =&gt; &#123; expect(res).toBe(25).toBeA(&apos;number&apos;); done(); &#125;); &#125;);&#125;);// should verify first and last names are set// assert it includes firstName and lastName with proper valuesit (&apos;should set firstName and lastName&apos;, () =&gt; &#123; var user = &#123;location: &apos;Philadelphia&apos;, age: 25&#125;; var res = utils.setName(user, &apos;Andrew Mead&apos;); expect(res).toInclude(&#123; firstName: &apos;Andrew&apos;, lastName: &apos;Mead&apos;, age: 25 &#125;);&#125;);// it (&apos;should expect some values&apos;, () =&gt; &#123; // expect(12).toNotBe(12); // expect(&#123;name: &apos;andrew&apos;&#125;).toNotEqual(&#123;name: &apos;Andrew&apos;&#125;); // expect([2, 3, 4]).toExclude(1); // expect(&#123; // name: &apos;Andrew&apos;, // age: 25, // location: &apos;Philadelphia&apos; // &#125;).toExclude(&#123; // age: 23 // &#125;)// &#125;); 修改 server/server.test.js 123456789101112131415161718192021222324252627282930313233343536373839404142434445const request = require(&apos;supertest&apos;);const expect = require(&apos;expect&apos;);var app = require(&apos;./server&apos;).app;// Server // GET / // some test case // GET /users // some test casedescribe(&apos;Server&apos;, () =&gt; &#123; describe(&apos;GET /&apos;, () =&gt; &#123; it(&apos;should return hello world response&apos;, (done) =&gt; &#123; request(app) .get(&apos;/&apos;) .expect(404) .expect((res) =&gt; &#123; expect(res.body).toInclude(&#123; error: &apos;Page not found.&apos; &#125;); &#125;) .end(done); &#125;); &#125;); describe(&apos;GET /users&apos;, () =&gt; &#123; // Make a new test // assert 200 // Assert that you exist in users array it(&apos;should return my user object&apos;, (done) =&gt; &#123; request(app) .get(&apos;/users&apos;) .expect(200) .expect((res) =&gt; &#123; expect(res.body).toInclude(&#123; name: &apos;Andrew&apos;, age: 25 &#125;); &#125;) .end(done); &#125;); &#125;);&#125;); Test Spies 新增 spies/db.js 123module.exports.saveUser = (user) =&gt; &#123; console.log(&apos;Saving the user&apos;, user);&#125;; 新增 spies/app.js 12345678var db = require(&apos;./db&apos;);module.exports.handleSignup = (email, password) =&gt; &#123; // Check if email already exists db.saveUser(&#123;email, password&#125;); // Save the user to the database // Send the welcome email&#125;; 新增 spies/app.test.js 1234567891011const expect = require(&apos;expect&apos;);describe(&apos;App&apos;, () =&gt; &#123; it(&apos;should call the spy correctly&apos;, () =&gt; &#123; var spy = expect.createSpy(); spy(&apos;Andrew&apos;, 25); expect(spy).toHaveBeenCalledWith(&apos;Andrew&apos;, 25); &#125;);&#125;); npm install rewire@2.5.2 --save-dev 在 spies/app.test.js 使用 rewire 引入 app var app = rewire('./app'); 用 describe 將 rewire 單元測試分類在一起 123456789101112131415describe(&apos;App&apos;, () =&gt; &#123; var db = &#123; saveUser: expect.createSpy() &#125;; app.__set__(&apos;db&apos;, db); it(&apos;should call saveUser with user object&apos;, () =&gt; &#123; var email = &apos;andrew@example.com&apos;; var password = &apos;123abc&apos;; app.handleSignup(email, password); expect(db.saveUser).toHaveBeenCalledWith(&#123;email, password&#125;); &#125;);&#125;);","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Nodejs","slug":"Nodejs","permalink":"https://tingsyuanwang.github.io/tags/Nodejs/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Mac 開發環境建置","slug":"Mac-開發環境建置","date":"2017-09-13T13:07:44.000Z","updated":"2017-09-14T06:18:53.000Z","comments":true,"path":"2017/09/13/Mac-開發環境建置/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/09/13/Mac-開發環境建置/","excerpt":"","text":"內建工具 1. Xcode 到 App Store 下載 記得要打開 Xcode，並且同意服務條款 生產力工具 1. Alfred + Powerbank (付費) 直接從官方網站下載應用 2. iTerm2 直接從官方網站下載應用 設定： 把字體改大 iTerm2 =&gt; Preferences =&gt; Profiles =&gt; Text =&gt; Font =&gt; 20px 讓 iTerm2 可以無限的往回滾動 iTerm2 =&gt; Preferences =&gt; Profiles =&gt; Terminal =&gt; Scrollback Buffer =&gt; Unlimited scrollback 修改主題 - 下載 Dracula 主題 iTerm2 =&gt; Preferences =&gt; Profiles =&gt; Color =&gt; 找到右下角的 Color Presets =&gt; Import =&gt; 選擇 Dracula 3. Wunderlist 直接從官方網站下載應用 4. Dropbox 直接從官方網站下載應用 5. MoneyPro (付費軟體) 直接從官方網站下載應用 6. Filezilla 直接從官方網站下載應用 7. Zoom 直接從官方網站下載應用 8. VirtualBox 直接從官方網站下載應用 9. WebStorm 直接從官方網站下載應用 10. PhpStorm 直接從官方網站下載應用 11. Visual Studio Code 直接從官方網站下載應用 設定： 常用套件 Auto Close Tag Beautify ESLint Git History HTML Snippets Material Icon Theme Material Theme Kit 打開自動存檔 File =&gt; Auto Save 字體放大 Code =&gt; Preferences =&gt; Setting =&gt; “editor.fontSize”: 16 修改佈景主題 Command+Shift+P =&gt; theme =&gt; Solarized Light 12. Enpass (密碼管理工具) 直接從官方網站下載應用 13. Anki 直接從官方網站下載應用 14. Slack 直接從官方網站下載應用 套件 &amp; 指令 1. zsh 安裝指令 sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot; 修改佈景主題 vim ~/.zshrc 修改 ZSH_THEME=&quot;cloud&quot; 相關主題參考 2. Homebrew 安裝指令 /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 3. nvm 安裝指令 參考官方網站 curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.4/install.sh | bash 列出所有版本 nvm ls-remote 安裝 TLS 版本 nvm install 6.11.3 4. Git 安裝指令 brew update &amp;&amp; brew install git 設定全域 username 和 email git config --global user.name &quot;tingsyuanwang&quot; git config --global user.email &quot;dtvgood202@gmail.com&quot; 5. Hexo (部落格套件) 安裝指令 npm install -g hexo-cli 6. Composer 進去 Composer 網站按照指令安裝 7. Docker 直接從官方網站下載應用 8. Kubectl (Kubernetes 指令) 安裝指令 1curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/darwin/amd64/kubectl React Native 環境 安裝 node watchman brew install node brew install watchman 安裝 React Native CLI npm install -g react-native-cli Java Development Kit 從官方網站下載 Android Studio 從官方網站下載 加到 .zshrc 123456# JDK configurationexport JAVA_HOME=`/usr/libexec/java_home`export ANDROID_HOME=$HOME/Library/Android/sdkexport PATH=$PATH:$ANDROID_HOME/toolsexport PATH=$PATH:$ANDROID_HOME/platform-tools React Native Debugger brew update &amp;&amp; brew cask install react-native-debugger","categories":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"https://tingsyuanwang.github.io/tags/Mac/"}],"keywords":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}]},{"title":"Jenkins 快速學習自我挑戰 Day1","slug":"Jenkins-快速學習自我挑戰-Day1","date":"2017-09-02T15:49:25.000Z","updated":"2017-09-02T17:47:10.000Z","comments":true,"path":"2017/09/02/Jenkins-快速學習自我挑戰-Day1/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/09/02/Jenkins-快速學習自我挑戰-Day1/","excerpt":"","text":"介紹 Jenkins 課程介紹 目標 了解關鍵知識 使用 Jenkins 來設置自動建立 熟悉基礎 Jenkins 強烈的起始點 課程簡介 介紹 &amp; 核心觀念 快速安裝 Jenkins UI 概覽 Jenkins 基礎 (自由型式工作) Maven 專案 超越基礎 結論 / Bonus 課程重點和方法 課程重點 Mac OS X 初學者 Java / Maven Git &amp; Github Jenkins 相同的系統 簡單 課程方法 最少量的理論 / 核心觀念 一步一步實際練習範例 補充內容 影片：短且針對重點 暫停和跟隨 加入討論 什麼是 Jenkins？為什麼使用 Jenkins？ 什麼是 Jenkins？ 持續整合 / 建立 Server 自動軟體建立 Orchestration 免費 (開源) 商業支援可用 Powered by Java / Jetty WAR for Java Web Containers (像是 Tomcat) Jenkins.io 為什麼使用 Jenkins？ 剛開始 手動的 每一個開發者 在自己的機器運作 不需要 Scale 非常危險 建立 Servers 監控改變 建立 code 自動地 定期地 Jenkins 非常熱門 強大的 強壯的社群支持 極度有彈性的 Jenkins 架構 Host System 裡面會有用 Jetty (預設) 執行的 Container，Jetty 可以存取 JDK tools 會有一個叫做 service 的程式，他負責啟動、停止和監控 Jetty 而在 Container 裡面會執行 Jenkins，在 Jenkins 裡面則會放置 View (依照分組或目錄分類)，View 裡面會放置 Project，提供如何建立軟體的指引，Project 會把工作放到 View 外面的 Job Queue，最後由 Executor 來協助 Job Queue 完成 快速安裝 快速安裝概覽 安裝流程 支援多個技能等級 快速安裝流程 (這一部分) 完整安裝流程 (Bonus) Mac OS X 或 mac OS 應該支援部多數最新版本 Git Apple - Command Line Tools 任意文字編輯器 TextMate 2 (包含教學) Atom Sublime Java Software Development Kit (JDK) Apache Maven 3 Jenkins 2 Mac OS Launch Daemon Service 啟動 / 暫停 / 重新啟動 Jenkins 安裝流程的文字教程 有些人比較喜歡這個方法 Jenkins 快速安裝 安裝 JDK 在 .zshrc 加上這一行 1export JAVA_HOME=`/usr/libexec/java_home` 下載 Maven，下載 tar.gz 版本 使用 Command Line 解壓縮 tar -xvzf apache-maven-3.5.0-bin.tar.gz 在 .zshrc 加上這兩行 123plugins=(mvn)export MAVEN_HOME=~/Development/mavenexport PATH=&quot;$&#123;PATH&#125;:$&#123;MAVEN_HOME&#125;/bin&quot; 下載 LTS 版本 安裝完成之後，可以在 http://localhost:8080 看到 Service Daemon MacOS 上的 Jenkins 服務 重新啟動 Jenkins http://localhost:8080/restart unload 移除組態設定 sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist load 會重新載入組態設定 sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Jenkins","slug":"Jenkins","permalink":"https://tingsyuanwang.github.io/tags/Jenkins/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"提高生產效率：適應、改善、執行","slug":"提高生產效率：適應、改善、執行","date":"2017-08-31T07:39:56.000Z","updated":"2017-08-31T11:30:33.000Z","comments":true,"path":"2017/08/31/提高生產效率：適應、改善、執行/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/08/31/提高生產效率：適應、改善、執行/","excerpt":"","text":"為誰設計的課程？ 從 Planning 到 doing faster 課程有以下特點 根據研究 實際演練 證明結果 什麼都有，就是沒有 generic advice 很簡單易用 帶你從 Where You Are 到 You Want To Be 概觀 意志力 動機 習慣 做決定 設定目標 意志力：你最重要的資源 這邊會談到自我管理的重要性 每天練習，持續三十天，並記錄結果 第一項：意志力 冥想 幫助專注 減輕壓力 增強意志力 對初學者有很好的效果 在 11 小時之後，腦中會產生生理改變 快速開始指南 坐下 清理思緒 注意呼吸 每天至少 10 分鐘，堅持至少三個禮拜 第二項：Pause &amp; Plan Response 大腦在壓力之下，會做不好的決定 You + Stress = Short Term Thinking 讓呼吸變慢 第三項：原諒自己 原諒讓自己回到正軌 PRE-COMMIT：找別人一起做，你就會不得不做 想像未來的自己是真的人，關心他，在做不好的決定的時候想到他 動機：為什麼它很重要但不夠 它很棒，但是它不夠讓你完成事情 思考為什麼：你為什麼想達成這個目標？ 我現在就想要，但是現實不是這樣的 動機讓你開始，但是只有習慣可以讓你持續進行 如果你什麼都有了，你想要做什麼？ 你不會永遠享受它 答案在你自己的心中 習慣：成功的秘密 We first make our habits then our habits make us - John Dryden 他們可以在生理上改變大腦 習慣由什麼組成？ Craving Cue Routine Reward 習慣永遠不會完全消失 壞習慣就養成好習慣來取代它就可以了 工作 -&gt; 覺得無聊 -&gt; 看社交軟體，產生拖延 工作 -&gt; 覺得無聊 -&gt; 回來工作吧！ 針對壞習慣記得： 讓習慣慢下來 然後針對某個環節攻擊 創造動力 建立 checklist 當危機產生的時候就是最好的改變時間 結論 了解習慣 創造動力 讓時機更正確 目標：達成任何事情的框架 一定要知道目標 有效目標設定 6 步驟 1 你想要達成什麼？ 2 你想要付出什麼作為交換？ 3 設定明確的時間 4 有一個清楚的計畫 5 列印出來並簽名 6 每天大聲唸出來兩遍 (起床的時候和要睡覺的時候) S M A R T rule Specific Measurable Attainable Realistic Time Bound：把它分為每週里程碑 做決定：速度、彈性和持續性 準備 =&gt; 決定 =&gt; 溝通 =&gt; 執行 =&gt; 衡量 做決定的四個核心標準 結果 選擇 時間框架 參與的人事物 準備：做好調查，可以減少很多投資，還有更多選擇。但是記得不要真的行動，就做調查就好 決定：最好的做法是 Consensus，但是很難執行，而且很慢。 溝通：使用適合的工具來通知 1 做了什麼決定？ 2 誰做的決定？ 3 為什麼做了這個決定？ 執行：完全取決於你 衡量：分析反應，然後適應！ 3 個做決定的迷思 CEO 決定的 在會議決定 決定一定會是最明智的 最大的問題：認知偏差 我們通常都過分自信 sunk-cost 效應 recency 效應：比較願意相信已經隨時可用的東西 克服做決定的風險 注意 鼓勵回饋 擁抱坦率 記得 專注於改正那些錯誤的決定 改善速度 瞄準 Concensus 的做法 舒適圈：它如何同時是祝福也是詛咒 你的知覺會決定怎麼體驗事情 如何修復有缺陷的知覺 了解 Map 如何形成 Map 的形成 知覺 連結 評估 決定 建構式想像：當覺得有尚未完成的潛力，那是因為有限制的信念(憤怒、噁心、害怕) 完成建構式想像 找到未完成的潛力 了解自己目前的情緒 想像自己要用什麼心情緒來達成尚未完成的潛力 口頭承諾你要改變的事情 重新規劃你自己 10 個承諾設計法則 個人的 正向的 現在式的 包含成果 關於自己的：跟自己比較，不要跟別人比較 行動 興奮的情緒 準確的 現實的 負責任的 承諾就是一種工具，他不關說話，他是關於感覺的 每天重複兩次，不然他不會有效的 帶走生產力關鍵 這些都是關於自我管理 意志力： 冥想 pause &amp; plan 原諒自己 背水一戰 動機： 為什麼？ 習慣： 關鍵 Component：cue、routine、reward、craving 建立動力 在危機時刻改變 目標設定 S.M.A.R.T 做決定 components 類型 陷阱 舒適圈、Reality Map 你的戰鬥計畫 了解為什麼？ 寫下來 有備忘錄 使用意志力創造習慣和動機 慢慢地整合新習慣 重複至少 30 天 選擇一樣東西，然後黏著它 你想要持續的效果 當準備好的時候，增加更多 這是關於你有多難受到打擊，而且持續向前行；你能花費多少，而且持續向前行。這就是成功。 完成課程","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Productivity","slug":"Productivity","permalink":"https://tingsyuanwang.github.io/tags/Productivity/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Kubernetes 快速學習自我挑戰 Day6","slug":"Kubernetes-快速學習自我挑戰-Day6","date":"2017-08-29T01:40:46.000Z","updated":"2017-08-29T15:47:35.000Z","comments":true,"path":"2017/08/29/Kubernetes-快速學習自我挑戰-Day6/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/08/29/Kubernetes-快速學習自我挑戰-Day6/","excerpt":"","text":"Kubernetes 管理 Kubernetes 的 Master 服務 Kubectl 要和 REST 介面溝通，在溝通之前，要做 authorization Kubernetes 用 etcd 當作後端 Scheduler 會負責排程 pod，可以使用預設的或是外掛 資源配額 當 Kubernetes cluster 被很多人或團隊使用的時候，資源管理變得非常重要 你想要能夠管理資源，你可以給一個人或一個團隊 你不想要一個人或團隊占用 cluster 的所有資源(例如：CPU 或記憶體) 可以使用 namespaces 來分離 cluster 且在上面啟用資源配額 可以用 ResourceQuota 和 ObjectQuota objects 來實現 每一個 container 都可以指定 request capacity 和 capacity limits Request capacity 對資源來說是一種明確的請求 Scheduler 可以使用 request capacity 來決定要把 pod 放在哪裡 可以看成 pod 需要的最少資源量 Resource limit 是一種對 container 的限制規定 container 沒辦法利用比指定更多的資源 resource quotas 範例 運行一個 CPU resource request 為 200m 的 deployment 在 pod 上面 200m = 200millicpu (或是 200 millicores) 200m = 0.2 也就是運行 node 的 CPU 核心的 20% 如果 node 是雙核心，它還是只有單核心的 20% 也可以限制它，例如：400m Memory quotas 用 MiB 或 GiB 來定義 如果一個 capacity quota (例如：記憶體/cpu) 已經被管理者指定，那麼在創建 pod 的時候一定要指定 capacity quota 管理者可以為 pod 指定預設 request 值，且不需要為 capacity 指定任何值 對 limit quotas 一樣有效 如果資源被請求的次數高於允許的 capacity，伺服器 API 會丟出 403 FORBIDDEN 錯誤，且 kubectl 會顯示錯誤 管理者可以用一個 namespace 設定以下 resource limits Resource Description requests.cpu 全部 pods 的 CPU requests 總和不能超過這個值 requests.mem 全部 pods 的 MEM requests 總和不能超過這個值 requests.storage 全部 persistent volume 的 storage requests 總和不能超過這個值 limits.cpu 全部 pods 的 CPU limits 總和不能超過這個值 limits.memory 全部 pods 的 MEM limits 總和不能超過這個值 管理者可以設定以下 objects limits Resource Description configmaps 可以存在 namespace 的 configmaps 總數 persistentvolumeclaims 可以存在 namespace 的 persistent volume claims 總數 pods 可以存在 namespace 的 pods 總數 replicationcontrollers 可以存在 namespace 的 replicationcontrollers 總數 resourcequotas 可以存在 namespace 的 resource quotas 總數 services 可以存在 namespace 的 services 總數 services.loadbalancer 可以存在 namespace 的 load balancers 總數 services.nodeports 可以存在 namespace 的 nodeports 總數 secrets 可以存在 namespace 的 secrets 總數 Namespaces Namespaces 可以在 phisical cluster 裡面創建 virtual cluster Namespaces 有邏輯的分離 cluster 標準的 namespace 叫做 “default”，而且那是所有資源預設啟動的地方 另外一個為 Kubernetes 特定資源擁有的 namespace，叫做 kube-system Namespaces 是有必要的，當同時有很多團隊/專案使用 kubernetes cluster 資源名稱在一個 namespace 必須要是獨一無二的，而且不能跨越 namespaces 例如：在不同 namespaces 可以擁有叫做 “helloworld” 的 deployment 很多次，但是在一個 namespace 不能有兩次 可以使用 namespaces 來分開一個 Kubernetes cluster 的資源 你可以以每一個單一 namespace 為基礎來限制資源 例如：市場組只能使用最多 10 GiB 的記憶體、2 個 Loadbalancers、2 核心 CPU 首先，你必須要先創建一個 namespace kubectl create namespace myspace 你可以列出所有 namespaces kubectl get namespaces 如果想要設定預設 namespace 來啟動資源 export CONTENT=$(kubectl config view | awk '/current-context/ {print $2}') kubectl config set-context $CONTEXT --namespace=myspace 接下來可以在 namespace 建立 resource limits 1234567891011apiVersion: v1kind: ResourceQuotametadata: name: compute-resources namespace: myspacespec: hard: requests.cpu: &quot;1&quot; requests.memory: 1Gi limits.cpu: &quot;2&quot; limits.memory: 2Gi 也可以建立 object limits： 12345678910111213apiVersion: v1kind: ResourceQuotametadata: name: object-counts namespace: myspacespec: hard: configmaps: &quot;10&quot; persistentvolumeclaims: &quot;4&quot; relicationcontrollers: &quot;20&quot; secrets: &quot;10&quot; services: &quot;10&quot; services.loadbalancers: &quot;2&quot; Demo：Namespace quotas cat resourcequotas/resourcequota.yml kubectl create -f resourcequotas/resourcequota.yml cat resourcequotas/helloworld-no-quotas.yml kubectl create -f resourcequotas/helloworld-no-quotas.yml kubectl get deploy --namespace=myspace kubectl get rs --namespace=myspace kubectl describe rs/helloworld-deployment-4153696333 --namespace=myspace 會發現出現錯誤 failed quota，因為沒有指定限定資源，而本身 namespace 有限定資源 kubectl delete deploy/helloworld-deployment --namespace=myspace cat resourcequotas/helloworld-with-quotas.yml kubectl create -f resourcequotas/helloworld-with-quotas.yml kubectl get pod --namespace=myspace 這邊會發現，我明明要求三個 replicas，可是只出現兩個 kubectl get rs --namespace=myspace kubectl describe rs/helloworld-deployment-1576367412 --namespace=myspace kubectl get quota --namespace=myspace kubectl describe quota/compute-quota --namespace=myspace kubectl delete deploy/helloworld-deployment --namespace=myspace cat resourcequotas/defaults.yml kubectl describe limits limits --namespace=myspace kubectl create -f resourcequotas/helloworld-no-quotas.yml kubectl get pods --namespace=myspace User 管理 有兩種 users 可以創建 Normal user，可以外部存取 user 例如：through kubectl 這個 user 不能使用 object 來管理 Service user，可以在 Kubernetes 用 object 管理的 user 這個類型的 user 只能用在 cluster 裡面 authenticate 例如：從 pod 裡面，或從 kubelet 這些 credentials 被像是 Secrets 管理 對 normal users 有很多 authentication strategies Client Cetificates Bearer Tokens Authentication Proxy HTTP Basic Authentication OpenID Webhooks Service Users 使用 Service Account Tokens 它們被儲存為 credentials 且使用 Secrets 那些 Secrets 被掛接在 pods 裡面來讓服務之間溝通 Service Users 對 namespace 是特定的 它們被用 API 自動建立或使用 objects 手動建立 任何 API 被稱為 not authenticated 被視為 anonymous user 獨立在認證機制之外，normal users 有以下特質： 一個 Username (例如：user123 或 user@email.com) 一個 UID Groups 其它儲存其它資訊的 field 在一個 normal users authenticate 之後，他就可以存取所有東西 為了限制存取，你必須設定 authorization 以下有幾種選項可以選擇： AlwaysAllow / AlwaysDeny ABAC (Attribute-Based Access Control) RBAC (Role Based Access Control) Webhook (從遠端 service 做 authorization) Authorization 還在更新中 The ABAC 必須要手動設定 RBAC 使用 rbac.authorization.k8s.io API group 這允許 admins 可以透過 API 來動態設定權限 在 Kubernetes 1.3 RBAC 還在 alpha 而且甚至被當作實驗性的 RBAC 是很有展望的而且會變成 stable 關於 ABAC/RBAC 的目前狀況，可以參照 Kubernetes Authorization Networking Networking 的方法跟預設 Docker 設定非常不一樣 在這個課程包含： 在 pod 裡面 Container to container 的溝通 透過 localhost 和 port number Pod-To-Service 通訊 使用 NodePort 或 DNS External-To-Service 使用 LoadBalancer、NodePort 在 Kubernetes，pod 本身應該要總是可以 routeable 這是 Pod-to-Pod 通訊 Kubernetes 假設 pods 應該要能夠跟其它 pods 溝通，不論它們運行在哪個 node 上面 每一個 pod 都有它自己的 IP 位址 在不同 nodes 上的 pods 必須要能夠跟其它使用 IP 位址的 pod 溝通 在實作上會根據你的網路設定而有不同 在 AWS：kubernets networking (kops default) 每一個 pod 可以使用 AWS Virtual Private Network (VPC) 得到 routable 的 IP kubernetes master 分配一個 /24 subent 給每一個 node (254 IP 位址) 這個 subnet 會被新增到 VPCs route table 有限制 50 個 entries，也就是說，你不能夠建立超過 50 個 node 在單一 AWS cluster 雖然，AWS 可以把 limit 改到 100，但是可能會影響效能 並不是每個主機商都有 VPC-technology (雖然 GCP 和 Azure 都有) 還有其它替代方案 Container Network Interface (CNI) 軟體會提供在 containers 裡的 network interfaces 的函式庫/外掛 熱門的解決方案包含 Calico、Weave (standalone or with CNI) Overlay Network Flannel 是一個簡單又熱門的方式 Node Maintenance 這是 Node Controller，它負責管理 Node Objects 它分派 IP space 給 node，當新的 node 啟動的時候 它使可用機器的 node list 維持最新 node controller 也監控 node 的健康狀態 如果 node 不健康，它就會被刪除 Pods 運行在不健康的 node 會 rescheduled 當新增新的 node，kubelet 會企圖自行註冊 這個叫做 self-registration，而且是預設的行為 它允許你簡單的新增更多 nodes 到 cluster，且不需要自己修改 API 一個新的 node object 會自動帶有以下內容進行建立 metadata (帶有名稱：IP 或 hostname) Labels (例如：cloud region / availability zone / instance size) 一個 node 也有 node condition (例如：Ready、OutOfDisk) 當你想要 decommission 一個 node，你想要優雅地做 你要 drain 一個 node 在你關閉它或是把它拿移出 cluster 為了 drain 一個 node，可以用以下指令 kubectl drain nodename --grace-period=600 如果 nodes 運行 pods 且不受 controller 控制，那就是一個單一 pod kubectl drain nodename --force Demo：Node Maintenance kubectl create -f deployment/helloworld.yml kubectl get pod kubectl drain minikube --force kubectl get node kubectl get pod High Availability 如果想要運行 cluster 在產品上，你會想要所有的 master services 有 high availability (HA) 設置 設定會像是這樣： Clustering etcd：至少運行三個 etcd nodes 使用一個 LoadBalancer 去複製 API servers 運行很多 scheduler 和 controllers 的 instances 只有其中一個會是 leader，其它的都會 stand-by 像是 minikube 的 cluster 不需要 HA - 它是單一 node cluster 如果要在 AWS 使用產品化 cluster，kops 可以為你做 heavy lifting 如果你運行在其它雲端平台，看看針對那個平台的 kube deployment tools kubeadm 是一個 tool 可以為你設置 cluster 如果你使用某個平台且不使用任何工具，可以看看文件來自行實作 Demo：High Availability kops create cluster --name=kubernetes.appsoliloquy.com --state=s3://kops-state-qq123 --zones=ap-southeast-2a,ap-southeast-2b,ap-southeast-2c --node-count=2 --node-size=t2.micro --master-size=t2.micro --dns-zone=kubernetes.appsoliloquy.com --master-zones=ap-southeast-2a,ap-southeast-2b,ap-southeast-2c kops edit ig --name=kubernetes.appsoliloquy.com nodes --state=s3://kops-state-qq123 kops edit ig --name=kubernetes.appsoliloquy.com master-ap-southeast-2a --state=s3://kops-state-qq123 kops edit ig --name=kubernetes.appsoliloquy.com master-ap-southeast-2b --state=s3://kops-state-qq123 完成課程","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Kubernetes","slug":"Kubernetes","permalink":"https://tingsyuanwang.github.io/tags/Kubernetes/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Kubernetes 快速學習自我挑戰 Day5","slug":"Kubernetes-快速學習自我挑戰-Day5","date":"2017-08-21T16:46:53.000Z","updated":"2017-08-28T18:04:24.000Z","comments":true,"path":"2017/08/22/Kubernetes-快速學習自我挑戰-Day5/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/08/22/Kubernetes-快速學習自我挑戰-Day5/","excerpt":"","text":"進階的主題 Volumes Autoprovisioning Kubernetes plugins 可以提供 storage AWS Plugin 可以藉由在 AWS 創建 volumes 來提供 storage，但是要在 volume 連接到 node 之前才能做 這些可以使用 StorageClass object 來完成 Documentation 使用 auto provisioned volumes，可以創建以下 yaml 檔案： storage.yml 12345678kind: StorageClassapiVersion: storage.k8s.io/v1beta1metadata: name: standardprovisioner: kubernetes.io/aws-ebsparameters: type: gp2 zone: us-east-1 這樣可以創建 volume 並宣告使用 aws-ebs provisioner Kubernetes 將會提供 type gp2 的 volume (一般用途 - SSD) 接下來，可以創建 volume 並宣告和指定容量 my-volume.claim.yml 123456789101112kind: PersistentVolumeClaimapiVersion: v1metadata: name: myclaim annotations: volume.beta.kubernetes.io/storage-class: &quot;standard&quot;spec: accessModes: - ReadWriteOnce resources: requests: storage: 8Gi 最後，可以使用 volume 來啟動 pod my-pod.yml 123456789101112131415kind: PodapiVersion: v1metadata: name: mypodspec: containers: - name: myfrontend image: nginx volumeMounts: - mountPath: &quot;/var/www/html&quot; name: mypd volumes: - name: mypd persistentVolumeClaim: claimName: myclaim Demo：使用 Volumes 的 WordPress cd wordpress-volumes cat storage.yml cat pv-claim.yml cat wordpress-db.yml cat wordpress-db-service.yml cat wordpress-secrets.yml cat wordpress-web.yml cat wordpress-web-service.yml 查詢 AWS 服務區域 aws efs create-file-system --creation-token 1 --region ap-southeast-2 找尋 SubnetId 和 SecurityGroups aws ec2 describe-instances --region ap-southeast-2 aws efs create-mount-target --file-system-id fs-518f6c68 --subnet-id subnet-5ed8c73a --security-groups sg-5154a737 --region ap-southeast-2 修改倒數第二行的 server vim wordpress-web.yml kubectl create -f storage.yml kubectl create -f pv-claim.yml kubectl create -f wordpress-secrets.yml kubectl create -f wordpress-db.yml kubectl create -f wordpress-db-service.yml kubectl get pvc kubectl get pod kubectl describe pod wordpress-db-8n665 kubectl create -f wordpress-web.yml kubectl create -f wordpress-web-service.yml 去 Route53 新增一個 DNS record - wordpress.，在 alias 的地方打勾，選擇剛剛建立的 LoadBalancer kubectl edit deployment/wordpress-deployment 把以下五行加到 35 行之後，把後面 env 縮排進去並刪除 -，完成之後就發現 wordpress 可以上傳圖片了 123456- command: - bash - -c - chown www-data:www-data /var/www/html/wp-content/uploads &amp;&amp; docker-entrypoint.sh apache2-foreground env: - name: kubectl get pod 刪除所有的 pod，就會發現會全部自動重啟 kubectl delete pod wordpress-db-5cgvm kubectl delete pod/wordpress-deployment-1534735485-71kjs kubectl delete pod wordpress-deployment-1534735485-j74hb kubectl get pod，再一次 get pod 就會發現 pod 全部重啟了 kubectl logs wordpress-deployment-1534735485-0wtxq kubectl exec wordpress-deployment-1534735485-0wtxq -i -t -- bash ls -ahl -R wp-content/uploads/ 會發現檔案都還在 Pet Sets Pet Sets 是從 Kubernetes 1.3 之後開始的新功能 要執行 stateful application 需要： 一個穩定的 pod hostname(取代 podname-randomstring) 當一個 pod 有很多 instances，podname 需要有索引(例如：podname-1、podname-2、podname-3) 一個 stateful app 需要基於序號數(podname-x)或 hostname 的多個有 volumes 的 pods 目前刪除和/或擴展一個 PetSet down不會刪除跟 PetSet 有關連的 Volume 一個 PetSet 允許 stateful app 使用 DNS 找尋其它同伴 Cassandra clusters、ElasticSearch clusters 使用 DNS 來找到其它 cluster 的 members 在 Pet Set 之中一個運行中的 node 叫做 一個 Pet (例如：Cassandra 中的一個 node) 舉例來說： 在 Kubernetes 上使用 Pet Sets 的五個 cassandra nodes，可以命名為 cassandra-1 到 cassandra-5 如果不使用 Pet Sets，可以用取得一個動態 hostname 的方式，而這個方式不能夠使用在設定檔，因為設定檔可以隨時修改名字 一個 PetSet 也允許 stateful app 排序啟動和關閉的 pets： 取代隨機終止一個 Pet (app 中的一個 instance)，你會知道哪一個會不見 當在可以關閉之前，第一次需要從一個 node 倒出資料的時候，這很有用 在 PetSets 依然還很多未來工作需要完成 Daemon Sets Daemon Sets 確保 Kubernetes cluster 的每一個 node 運行相同的 pod 資源 如果你想要確保特定 pod 運行在每一個 Kubernetes node，這個非常有用 當一個 node 被新增到 cluster，新的 pod 就會自動被啟動 同樣地，當一個 node 被移除，pod 將不會在其它 node 進行再排程 典型的應用例子 Logging aggregators Monitoring Load Balancers / Reverse Proxies / API Gateways 運行一個 daemon 在每一個 physical instance 只需要一個 instance 監控資源用量 Heapster 能夠監控 Container Cluster 和效能分析 它提供了 Kubernetes 的監控平台 它是必要的，如果想要在 Kubernetes 使用 pod auto-scaling Heapster 透過 REST endpoint 輸出 cluster metrics 可以與 Heapster 使用不同的後端 範例會使用 InfluxDB，但是其它像是 Google Cloud Monitoring/Logging 和 Kafka 也是可以的 Visualizations (圖像) 可以使用 Grafana 表現 Kubernetes 儀表板只要 monitoring 啟動就可以顯示圖表 所有的這些技術(Heapster、InfluxDB 和 Grafana)都可以在 pods 裡面啟動 YAML 檔案可以在 Heapster 的 github repository 被找到 在下載完 repository 之後，平台可以使用 addon system 或使用 kubectl create -f directory-with-yaml-files/ 來部署 Demo：監控資源用量 git clone https://github.com/kubernetes/heapster.git 後改用 1.3 版本 cd heapster/deploy/kube-config/influxdb vim grafana.yaml 把這行註解掉 kubernetes.io/cluster-service: 'true' vim heapster.yaml 把這行註解掉 kubernetes.io/cluster-service: 'true' vim influxdb.yaml 把這行註解掉 kubernetes.io/cluster-service: 'true' cd .. kubectl create -f influxdb kubectl create -f kubernetes-course/deployment/helloworld.yml minikube service monitoring-grafana --namespace=kube-system --url 進去 Grafana 之後，選擇左列選單，選擇 Sign In，然後就可以選擇 cluster 或是 pod 觀看目前的狀態 Autoscaling Kubernetes 可以基於 metrics 來自動 scale pods Kubernetes 可以自動 scale 一個 Deployment、Replication Controller 或 ReplicaSet 在 Kubernetes 1.3 版本後，根據 CPU 用量 scaling 是可以使用的 有 alpha 的支持，基於 metrics 的 application 是可用的 (像是每秒取得或平均請求延遲) 要啟動這個，cluster 必須要設 env 變數裡面的 ENABLE_CUSTOM_METRICS 為 true 來啟動 Autoscaling 會對目標 pods 定期取得用量 預設是 30 秒，可以在啟動 controller-manager 使用 --horizontal-pod-autoscaler-sync-period 來修改 Autoscaling 會使用監控工具 heapster 來收集它們的 metrics 和決定如何 scaling Heapster 必須要在 autoscaling work 之前安裝並運行 例子 運行一個 200m 的 CPU 資源請求的 pod 並在 pod 運行一個 deployment 200m = 200 millicpu (或是 200 millicores) 200m = 0.2 也就是運行 node 的 CPU 核心的 20% 如果 node 是雙核心，它還是只有單核心的 20% 可以採用 CPU 用量為 50% 的 autoscaling (也就是 100m) 水平 Pod Autoscaling 可以增加/減少 pods 來維持目標 CPU 用量為 50%(或是 100m/在 pod 裡面一個核心10%) 測試 autoscaling 1234567891011121314151617181920apiVersion: extensions/v1beta1kind: Deploymentmetadata: name: hpa-examplespec: replicas: 3 template: metadata: labels: app: hpa-example spec: containers: - name: hpa-example image: gcr.io/google_containers/hpa-example ports: - name: http-port containerPort: 80 resources: requests: cpu: 200m autoscaling specification 範例 123456789101112apiVersion: autoscaling/v1kind: HorizontalPodAutoscalermetadata: name: hpa-example-autoscalerspec: scaleTargetRef: apiVersion: extensions/v1beta1 kind: Deployment name: hpa-example minReplicas: 1 maxReplicas: 10 targetCPUUtilizationPercentage: 50 Demo：Autoscaling cat autoscaling/hpa-example.yml minikube stop minikube start --extra-config kubelet.EnableCustomMetrics=true kubectl create -f autoscaling/hpa-example.yml kubectl get hpa kubectl run -i --tty load-generator --image=busybox /bin/sh wget http://hpa-example.default.svc.cluster.local:31001 cat index.html rm index.html while true; do wget -q -O- http://hpa-example.default.svc.cluster.local:31001; done kubectl get pod，這時候可以看出他會建立很多個 kubectl get hpa 觀看使用狀態","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Kubernetes","slug":"Kubernetes","permalink":"https://tingsyuanwang.github.io/tags/Kubernetes/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Kubernetes 快速學習自我挑戰 Day4","slug":"Kubernetes-快速學習自我挑戰-Day4","date":"2017-08-20T06:27:44.000Z","updated":"2017-08-23T16:16:21.000Z","comments":true,"path":"2017/08/20/Kubernetes-快速學習自我挑戰-Day4/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/08/20/Kubernetes-快速學習自我挑戰-Day4/","excerpt":"","text":"進階的主題 深入 Service 在 Kubernets 1.3，DNS 是一個內建的 service 且會自動使用 addon 管理器啟動 addon 在 master node 的 etc/kubernetes/addons 目錄 DNS 服務可以在 pod 裡面被使用，且找到其它服務運行在相同的 cluster 上 在一個 pod 中的很多 containers 的架構不需要這種 service，因為它們可以直接互相聯繫 在相同 pod 中的 container 可以使用 localhost:port 為了要讓 DNS 可以運作，pod 需要 Service Definition Demo：深入 Service cat service-discovery/secrets.yml kubectl create -f service-discovery/secrets.yml cat service-discovery/database.yml cat service-discovery/database-service.yml kubectl create -f service-discovery/database.yml kubectl create -f service-discovery/database-service.yml cat service-discovery/helloworld-db.yml 這邊會發現 env 下的 value: database-service，因為在創建 database-service.yml 的 metadata name 也是使用這個名稱 kubectl create -f service-discovery/helloworld-db.yml kubectl create -f service-discovery/helloworld-db-service.yml minikube service helloworld-db-service --url kubectl get pods 確認是否連線到資料庫 kubectl logs helloworld-deployment-2141920616-5bzp0 curl 剛剛取得的 ip curl http://192.168.99.100:30888 kubectl exec database -i -t -- mysql -u root -p 密碼是 rootpassword show databases; use helloworld show tables; select * from visits; \\q kubectl run -i --tty busybox --image=busybox --restart=Never -- sh nslookup helloworld-db-service nslookup database-service telnet helloworld-db-service 3000 kubectl delete pod busybox ConfigMap 設定參數不是秘密，可以放在 ConfigMap Input 是重複的 key-value pairs ConfigMap key-value pairs 可以被 app 讀取，使用： 環境變數 在 Pod 設定裡面的 Container commandline arguments 使用 voulmes ConfigMap 也可以包含 full configuration 檔案 例如：網頁伺服器的 config 檔案 這些檔案可以被使用 volumes 的方式掛接，而 volumes 正是 application 放置 config file 的地方 這樣的方法可以輸入配置設置到 containers 裡面，而不需要改變 container 本身 使用檔案產生 ConfigMap 123456driver=jdbcdatabase=postgreslookandfeel=1otherparams=xyzparam.with.hierarchy=xyzEOF kubectl create configmap app-config --from-file=app.properties 可以使用 volume 來 expose ConfigMap 的方式創建 pod 1234567891011121314151617181920apiVersion: v1kind: Podmetadata: name: nodehelloworld.example.com labels: app: helloworldspec: containers: - name: k8s-demo image: wardviaene/k8s-demo ports: - containerPort: 3000 volumeMounts: - name: config-volume // config 檔案會被存在 /ect/config/driver、/etc/config/param/with/hierarchy mountPath: /etc/config volumes: - name: config-volume configMap: name: app-config 可以使用環境變數來 expose ConfigMap 的方式創建 pod 1234567891011121314151617181920apiVersion: v1kind: Podmetadata: name: nodehelloworld.example.com labels: app: helloworldspec: containers: - name: k8s-demo image: wardviaene/k8s-demo ports: - containerPort: 3000 env: - name: DRIVER valueFrom: configMapKeyRef: name: app-config key: driver - name: DATABASE [...] Demo：ConfigMap cat configmap/reverseproxy.conf kubectl create configmap nginx-config --from-file=configmap/reverseproxy.conf kubectl get configmap kubectl get configmap nginx-config -o yaml cat configmap/nginx.yml kubectl create -f configmap/nginx.yml kubectl create -f configmap/nginx-service.yml minikube service helloworld-nginx-service --url curl http://192.168.99.100:31965 -vvv kubectl exec -i -t helloworld-nginx -c nginx -- bash ps x cat /etc/nginx/conf.d/reverseproxy.conf Ingress Controller Ingress 是一個從 Kubernetes 1.1 之後可用的解決方案，用來允許 inbound connections 給 cluster 它是 external Loadbalancer 和 nodePorts 的替代方案 Ingress 允許簡單的 expose services，如果 services 需要從 cluster 外部 存取 如果有 Ingress 就可以在 Kubernetes 運行自己的 ingress controller (基本上就是 loadbalancer) 有預設的 ingress controllers 可以使用，或是也可以寫自己的 ingress controller 可以使用 ingress object 來創建 ingress rules 1234567891011121314151617181920apiVersion: extensions/v1beta1kind: ingressmetadata: name: helloworld-rulesspec: rules: - host: helloworld-v1.example.com http: paths: - path: / backend: serviceName: helloworld-v1 servicePort: 80 - host: hellowrld-v2.example.com http: paths: - path: / backend: serviceName: helloworld-v2 servicePort: 80 Demo：Ingress Controller cat ingress/nginx-ingress-controller.yml cat ingress/ingress.yml kubectl create -f ingress/ingress.yml kubectl create -f ingress/nginx-ingress-controller.yml kubectl create -f ingress/echoservice.yml kubectl create -f ingress/helloworld-v1.yml kubectl create -f ingress/helloworld-v2.yml helloworld-v2 和 v1 的差別在於 image 版本 minikube ip curl 192.168.99.100 curl 192.168.99.100 -H 'Host: helloworld-v1.example.com' curl 192.168.99.100 -H 'Host: helloworld-v2.example.com' kubectl get svc Volumes Kubernetes 裡面的 Volumes 用來儲存 container 之外的 data 當 container 停止，所有在 container 裡面的資料會 不見 這正是為什麼我們一直執行 stateless 的 apps：apps 不會保留 本地 state，但是會儲存它們的 state 到 外部 service 外部 Service 像是 database，快取伺服器 (例如：MySQL、AWS S3) Kubernetes 裡面的 Persistent Volumes 可以 連接一個 volume 到 container，而檔案會繼續存在就算 container 停止 Volumes 可以使用不同的 volume plugins 來連接 本地 Volume AWS Cloud：EBS Storage Google Cloud：Google Disk 網路儲存空間：NFS、Cephfs Microsoft Cloud：Azure Disk 使用 Volumes 可以在 cluster 上部署 application with state 這些應用必須要在本地檔案系統讀/寫檔案，而且需要持續存在 可以運行 MySQL 資料庫且使用 persistent volumes 雖然這還沒準備好產品化 Volumes 是 Kubernetes 在 2016 年 6 月發佈的，所以還很新，關於這個部分還需要多加注意 如果 node 停止運行，pod 會重新排程到另外一個 node，然後 volume 可以被連接到新的 node 使用 volumes 必須要先創建 volume 使用 volumes 必須要創建有 volume definition 的 pod Demo：Volumes aws ec2 create-volume --size 10 --region ap-northeast-1 --availability-zone ap-northeast-1a --volume-type gp2 把剛剛拿到的 VolumeId 貼近去 vim volumes/helloworld-with-volume.yml kubectl create -f volumes/helloworld-with-volume.yml kubectl get pod kubectl describe pod helloworld-deployment-2277790027-3c1q2 kubectl exec helloworld-deployment-2277790027-3c1q2 -i -t -- bash ls -ahl /myvol/ echo 'test' &gt; /myvol/myvol.txt echo 'test2' &gt; /test.txt kubectl drain ip-172-20-49-46.ap-northeast-1.compute.internal --force kubectl get pod kubectl exec helloworld-deployment-2277790027-ll7w0 -i -t -- bash ls -ahl /myvol/myvol.txt ls -ahl /test.txt =&gt; 這會找不到，因為沒有存在 volume，而是存在 container kubectl delete -f volumes/helloworld-with-volume.yml aws ec2 delete-volume --volume-id vol-0ae6788e2541f0252 --region ap-northeast-1","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Kubernetes","slug":"Kubernetes","permalink":"https://tingsyuanwang.github.io/tags/Kubernetes/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"React Native 快速學習自我挑戰 Day6","slug":"React-Native-快速學習自我挑戰-Day6","date":"2017-08-18T11:54:13.000Z","updated":"2017-08-22T06:59:46.000Z","comments":true,"path":"2017/08/18/React-Native-快速學習自我挑戰-Day6/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/08/18/React-Native-快速學習自我挑戰-Day6/","excerpt":"","text":"深入了解 Redux Redux 的基礎 建立新專案 react-native init tech_stack JSPlaygrounds Reducer：一個可以回傳一些資料的 function Action：一個告訴 reducer 如何改變它的資料的物件 State：給 app 使用的資料 更多 Redux 簡易 Redux 範例 123456789101112131415161718192021222324252627282930const reducer = (state = [], action) =&gt; &#123; if (action.type === &apos;split_string&apos;) &#123; return action.payload.split(&apos;&apos;); &#125; else if (action.type === &apos;add_character&apos;) &#123; return [ ...state, action.payload ]; &#125; return state;&#125;;const store = Redux.createStore(reducer);store.getState();const action = &#123; type: &apos;split_string&apos;, payload: &apos;asdf&apos;&#125;;store.dispatch(action);store.getState();const action2 = &#123; type: &apos;add_character&apos;, payload: &apos;d&apos;&#125;;store.dispatch(action2);store.getState(); Application 樣板 安裝 redux npm install --save redux react-redux 新增 src/app.js 12345678910import React from &apos;react&apos;;import &#123; View &#125; from &apos;react-native&apos;;const App = () =&gt; &#123; return ( &lt;View /&gt; );&#125;;export default App; 刪除 ios.index.js 的所有內容，用以下取代 1234import &#123; AppRegistry &#125; from &apos;react-native&apos;;import App from &apos;./src/app&apos;;AppRegistry.registerComponent(&apos;tech_stack&apos;, () =&gt; App ); 在 app.js 引入函式庫 12import &#123; Provider &#125; from &apos;react-redux&apos;;import &#123; createStore &#125; from &apos;redux&apos;; 新增 src/reducers/index.js 12345import &#123; combineReducers &#125; from &apos;redux&apos;;export default combineReducers(&#123; libraries: () =&gt; []&#125;); 引入 reducers，將 reducers 放到 createStore 裡面 123456789import reducers from &apos;./reducers&apos;;const App = () =&gt; &#123; return ( &lt;Provider store=&#123;createStore(reducers)&#125;&gt; &lt;View /&gt; &lt;/Provider&gt; );&#125;; 渲染 Header 新增 src/components/common，把舊檔案複製進去 引入 Header import { Header } from './components/common'; 使用 Header 123456789const App = () =&gt; &#123; return ( &lt;Provider store=&#123;createStore(reducers)&#125;&gt; &lt;View&gt; &lt;Header headerText=&quot;Tech Stack&quot; /&gt; &lt;/View&gt; &lt;/Provider&gt; );&#125;; Data 的 Library List 新增 src/reducers/LibraryReducer.js export default () =&gt; []; 在 reducers/index.js 引入 LibraryReducer.js 123456import &#123; combineReducers &#125; from &apos;redux&apos;;import LibraryReducer from &apos;./LibraryReducer&apos;;export default combineReducers(&#123; libraries: LibraryReducer&#125;); 新增 src/reducers/LibraryList.json 1234567891011121314151617181920212223242526272829303132333435363738[ &#123;&quot;id&quot;: 0, &quot;title&quot;: &quot;Webpack&quot;, &quot;description&quot;: &quot;Webpack is a module bundler. It packs CommonJs/AMD modules i. e. for the browser. Allows to split your codebase into multiple bundles, which can be loaded on demand.&quot; &#125;, &#123;&quot;id&quot;: 1, &quot;title&quot;: &quot;React&quot;, &quot;description&quot;: &quot;React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes.&quot; &#125;, &#123;&quot;id&quot;: 2, &quot;title&quot;: &quot;Redux&quot;, &quot;description&quot;: &quot;Redux is a predictable state container for JavaScript apps. It helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test.&quot; &#125;, &#123;&quot;id&quot;: 3, &quot;title&quot;: &quot;React-Redux&quot;, &quot;description&quot;: &quot;React-Redux is the official set of bindings between the React and Redux libraries. With this library you can keep your views and data in sync.&quot; &#125;, &#123;&quot;id&quot;: 4, &quot;title&quot;: &quot;Lodash&quot;, &quot;description&quot;: &quot;A modern JavaScript utility library delivering modularity, performance, &amp; extras. Lodash is released under the MIT license &amp; supports modern environments.&quot; &#125;, &#123;&quot;id&quot;: 5, &quot;title&quot;: &quot;Redux-Thunk&quot;, &quot;description&quot;: &quot;Redux Thunk middleware allows you to write action creators that return a function instead of an action. The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met.&quot; &#125;, &#123;&quot;id&quot;: 6, &quot;title&quot;: &quot;ESLint&quot;, &quot;description&quot;: &quot;ESLint is an open source JavaScript linting utility originally created by Nicholas C. Zakas in June 2013. Code linting is a type of static analysis that is frequently used to find problematic patterns or code that doesn&apos;t adhere to certain style guidelines.&quot; &#125;, &#123;&quot;id&quot;: 7, &quot;title&quot;: &quot;Babel&quot;, &quot;description&quot;: &quot;Babel has support for the latest version of JavaScript through syntax transformers. These plugins allow you to use new syntax, right now without waiting for browser support.&quot; &#125;, &#123;&quot;id&quot;: 8, &quot;title&quot;: &quot;Axios&quot;, &quot;description&quot;: &quot;Promise based HTTP client for the browser and node.js. With Axios, you can make XMLHttpRequests from the browser or Node with the full Promise Api.&quot; &#125;] The Connect Function 引入 json 的資料，然後輸出 123import data from &apos;./LibraryList.json&apos;;export default () =&gt; data; 新增 src/components/LibraryList.js，在這邊有一點要注意，可以直接引入 json 來使用，但是在 redux 不能這樣用 12345678910import React, &#123; Component &#125; from &apos;react&apos;;import &#123; connect &#125; from &apos;react-redux&apos;;class LibraryList extends Component &#123; render() &#123; return; &#125;&#125;export default connect()(LibraryList); Connect 與 MapStateToProps 在 LibraryList.js 新增 mapStateToProps function 123const mapStateToProps = state =&gt; &#123; return &#123; libraries: state.libraries &#125;;&#125;; 在 LibraryList 裡面 console，會看到物件和 dispatch 123456class LibraryList extends Component &#123; render() &#123; console.log(this.props); return; &#125;&#125; 用正確的方法渲染 List 實作 ListView 引入 ListView，然後用 componentWillMount 來取得值，最後送到 ListView 123456789101112131415161718192021222324import &#123; ListView &#125; from &apos;react-native&apos;;class LibraryList extends Component &#123; componentWillMount() &#123; const ds = new ListView.DataSource(&#123; rowHasChanged: (r1, r2) =&gt; r1 !== r2 &#125;); this.dataSource = ds.cloneWithRows(this.props.libraries); &#125; renderRow() &#123; &#125; render() &#123; return ( &lt;ListView dataSource=&#123;this.dataSource&#125; renderRow=&#123;this.renderRow&#125; /&gt; ); &#125;&#125; 渲染單一的列 新增 ListItem.js 123456789import React, &#123; Component &#125; from &apos;react&apos;;class ListItem extends Component &#123; render() &#123; &#125;&#125;export default ListItem; 在 LibraryList.js 引入 ListItem，然後放在 renderRow 裡面，並傳入 props 叫做 Library 12345import ListItem from &apos;./ListItem&apos;;renderRow(library) &#123; return &lt;ListItem library=&#123;library&#125; /&gt;;&#125; 美化 List 引入 CardSection，然後讓接收上一層傳過來的值並顯示它 123456789101112131415import &#123; CardSection &#125; from &apos;./common&apos;;class ListItem extends Component &#123; render() &#123; const &#123; titleStyle &#125; = styles; return ( &lt;CardSection&gt; &lt;Text style=&#123;titleStyle&#125;&gt; &#123;this.props.library.title&#125; &lt;/Text&gt; &lt;/CardSection&gt; ); &#125;&#125; 新增樣式 123456const styles = &#123; titleStyle: &#123; fontSize: 18, paddingLeft: 15 &#125;&#125;; 在 app.js 的 View 新增 flex 1 的樣式，讓 List 可以在整頁滾動 &lt;View style={{ flex: 1 }}&gt; 創建 Selection Reducer 新增 src/reducers/SelectionReducer.js，在畫面產生的時候，預設不要選任何東西，所以送出 null 123export default () =&gt; &#123; return null;&#125;; 在 reducer/index.js 把 SelectionReducer 加入 123456import SelectionReducer from &apos;./SelectionReducer&apos;;export default combineReducers(&#123; libraries: LibraryReducer, selectedLibraryId: SelectionReducer&#125;); 介紹 Action Creator 在 Component 裡面用 Action Creator 呼叫 Action，Action 會去要求 Reducer 改變值 新增 src/actions/index.js 123456export const selectLibrary = (libraryId) =&gt; &#123; return &#123; type: &apos;select_library&apos;, payload: libraryId &#125;;&#125;; 呼叫 Action Creators 在 ListItem.js 引入所有 actions import * as actions from '../actions'; 在 ListItem.js 引入 connect，connect 的第一個參數是傳入的 props 值，目前沒有要傳東西，所以用 null，第二個參數是 actions，最後把 action 傳入 ListItem 的 component 123import &#123; connect &#125; from &apos;react-redux&apos;;export default connect(null, actions)(ListItem); 新增 Touchable 元件 在 ListItem.js 引入 TouchableWithoutFeedback 和 View import { Text, TouchableWithoutFeedback, View } from 'react-native'; 把 TouchableWithoutFeedback 和 View 加到元件裡面，onPress 之後，使用 action 1234567891011121314151617181920class ListItem extends Component &#123; render() &#123; const &#123; titleStyle &#125; = styles; const &#123; id, title &#125; = this.props.library; return ( &lt;TouchableWithoutFeedback onPress=&#123;() =&gt; this.props.selectLibrary(id)&#125; &gt; &lt;View&gt; &lt;CardSection&gt; &lt;Text style=&#123;titleStyle&#125;&gt; &#123;title&#125; &lt;/Text&gt; &lt;/CardSection&gt; &lt;/View&gt; &lt;/TouchableWithoutFeedback&gt; ); &#125;&#125; Reducer 的規則 修改 SelectionReducer.js，如果選到東西就回傳 id，如果沒有就回傳現在的 state 12345678export default (state = null, action) =&gt; &#123; switch (action.type) &#123; case &apos;select_library&apos;: return action.payload; default: return state; &#125;&#125;; 展開列 新增 mapStateToProps 回傳 object，然後會用 props 的形式放到 component 裡面，state.selectedLibraryId 是從 reducer/index.js 裡面取得的，最後將 mapStateToProps 和 actions 放在一起，就可以比較 selectedLibraryId 和 library.id 是不是一樣，一樣的話就展開 12345const mapStateToProps = state =&gt; &#123; return &#123; selectedLibraryId: state.selectedLibraryId &#125;;&#125;;export default connect(mapStateToProps, actions)(ListItem); 在 ListItem 的元件新增 renderDescription function 比較選擇的和本來的一不一樣，一樣就展開 123456789renderDescription() &#123; const &#123; library, selectedLibraryId &#125; = this.props; if (library.id === selectedLibraryId) &#123; return ( &lt;Text&gt;&#123;library.description&#125;&lt;/Text&gt; ); &#125;&#125; 最後把 renderDescription 放到 Component 裡面 12345678&lt;View&gt; &lt;CardSection&gt; &lt;Text style=&#123;titleStyle&#125;&gt; &#123;title&#125; &lt;/Text&gt; &lt;/CardSection&gt; &#123;this.renderDescription()&#125;&lt;/View&gt; 將邏輯移出 Component mapStateToProps 引入第二個參數 ownProps，它等於 this.props，所以最後可以用 expanded 簡化，它只會回傳 true 或 false 12345const mapStateToProps = (state, ownProps) =&gt; &#123; const expanded = state.selectedLibraryId === ownProps.library.id; return &#123; expanded &#125;;&#125;; 修改 renderDescription 123456789renderDescription() &#123; const &#123; library, expanded &#125; = this.props; if (expanded) &#123; return ( &lt;Text&gt;&#123;library.description&#125;&lt;/Text&gt; ); &#125;&#125; 動畫 在 renderDescription 加入 CardSection 讓版面更漂亮 123&lt;CardSection&gt; &lt;Text&gt;&#123;library.description&#125;&lt;/Text&gt;&lt;/CardSection&gt; 引入 LayoutAnimation 123456import &#123; Text, TouchableWithoutFeedback, View, LayoutAnimation&#125; from &apos;react-native&apos;; 在 ListItem 的 Component 加入 componentWillUpdate 123componentWillUpdate() &#123; LayoutAnimation.spring();&#125; 流程：User 點擊 Library =&gt; 呼叫 Action Creator =&gt; Action Creator 回傳 Action，然後傳到 Reducers =&gt; 新狀態會傳到 mapstateToProps =&gt; Components 重新渲染 =&gt; View 就會更新","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React-Native","slug":"React-Native","permalink":"https://tingsyuanwang.github.io/tags/React-Native/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"React Native 快速學習自我挑戰 Day5","slug":"React-Native-快速學習自我挑戰-Day5","date":"2017-08-17T08:39:32.000Z","updated":"2017-08-19T05:39:27.000Z","comments":true,"path":"2017/08/17/React-Native-快速學習自我挑戰-Day5/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/08/17/React-Native-快速學習自我挑戰-Day5/","excerpt":"","text":"處理 Authentication Credentials 讓 User 登入 在送出 button 地方，要取得值之後，做 callback function 在送出的 button 加上 onPress 來取得值 &lt;Button onPress={this.onButtonPress.bind(this)}&gt; 在 LoginForm.js 引入 firebase import firebase from 'firebase'; 新增 onButtonPress 的 callback function 12345onButtonPress() &#123; const &#123; email, password &#125; = this.state; firebase.auth().signInWithEmailAndPassword(email, password); &#125; 登入的三種模式 登入 =&gt; 成功 登入 =&gt; 失敗 =&gt; 創建帳號 =&gt; 成功 登入 =&gt; 失敗 =&gt; 創建帳號 =&gt; 失敗 =&gt; 出現錯誤 錯誤處理 點擊之後，用 catch 來處理失敗的 Promise，最後顯示出 error，error 要新增一個空白的 state 讓它去改變 12345678910111213state = &#123; email: &apos;&apos;, password: &apos;&apos;, error: &apos;&apos; &#125;; onButtonPress() &#123; const &#123; email, password &#125; = this.state; firebase.auth().signInWithEmailAndPassword(email, password) .catch(() =&gt; &#123; firebase.auth().createUserWithEmailAndPassword(email, password) .catch(() =&gt; &#123; this.setState(&#123; error: &apos;Authentication Failed.&apos;&#125;) &#125;); &#125;); &#125; 把 Text 補回來，因為要讓 error 顯示 import { Text } from 'react-native'; 新增 Text 區塊來顯示 error 123&lt;Text style=&#123;styles.errorTextStyle&#125;&gt; &#123;this.state.error&#125;&lt;/Text&gt; 新增 error Text 的 style 樣式 1234567const styles = &#123; errorTextStyle: &#123; fontSize: 20, alignSelf: &apos;center&apos;, color: &apos;red&apos; &#125;&#125;; 更多 Authentication Flow 在登入錯誤的密碼之後，如果又正確登入，要把錯誤訊息移除，所以要在 onPress 的 callback function 裡面把 state 設為預設空值 this.setState({error: ''}); 為了要讓送出的時候，等候存取資料庫回覆前，要做一個旋轉圖示 Spinner 讓用戶知道在等候，新增 src/components/Spinner.js 12345678910import React from &apos;react&apos;;import &#123; View &#125; from &apos;react-native&apos;;const Spinner = () =&gt; &#123; return ( &lt;View /&gt; );&#125;;export &#123; Spinner &#125;; 在 components/index.js 新增 component export * from './Spinner'; 建立一個活動 Spinner 新增 ActivityIndicator import { View, ActivityIndicator } from 'react-native'; 新增 spinner styles 1234567const styles = &#123; spinnerStyle: &#123; flex: 1, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos; &#125;&#125;; 將 style 加到 View，然後從上層元件取得 size props，最後用預設的方式，如果沒有 size 的 props，預設 large 1234567const Spinner = (&#123; size &#125;) =&gt; &#123; return ( &lt;View style=&#123;styles.spinnerStyle&#125;&gt; &lt;ActivityIndicator size=&#123;size || &apos;large&apos;&#125; /&gt; &lt;/View&gt; );&#125;; JSX 中有條件的渲染 預設不顯示 loading state = { email: '', password: '', error: '', loading: false }; 在 onButtonPress 的 callback function 加上 loading true，做法就是在點選登入時，清掉所有錯誤，然後顯示 Loading this.setState({error: '', loading: true }); 把 Spinner 的元件也 load 進來 import { Button, Card, CardSection, Input, Spinner } from &quot;./common&quot;; 新增一個 renderButton 的 function，如果 this.state.loading === true，就 return spinner，如果不是，就 return 本來的 Button 1234567891011renderButton() &#123; if (this.state.loading) &#123; return &lt;Spinner size=&quot;small&quot; /&gt;; &#125; return ( &lt;Button onPress=&#123;this.onButtonPress.bind(this)&#125;&gt; 登入 &lt;/Button&gt; )&#125; 最後把本來送出 Button 的地方用 renderButton 的 function 取代 123&lt;CardSection&gt; &#123;this.renderButton()&#125;&lt;/CardSection&gt; 清除表單 Spinner 建立 LoginSuccess function 12345678onLoginSuccess() &#123; this.setState(&#123; email: &apos;&apos;, password: &apos;&apos;, loading: false, error: &apos;&apos; &#125;);&#125; 建立 LoginFail function 123onLoginFail() &#123; this.setState(&#123; error: &apos;Authentication Failed&apos;, loading: false &#125;);&#125; 送出表單時候，正確的話，執行 .then 裡面的 function，錯誤的話，執行 .catch 裡面的 function 1234567firebase.auth().signInWithEmailAndPassword(email, password) .then(this.onLoginSuccess.bind(this)) .catch(() =&gt; &#123; firebase.auth().createUserWithEmailAndPassword(email, password) .then(this.onLoginSuccess.bind(this)) .catch(this.onLoginFail.bind(this)); &#125;); 處理 Authentication 事件 新增一個 state 叫做 loggedIn，預設為未登入，然後在 componentWillMount 新增 onAuthStateChanged 的 function，如果是 user 就登入 1234567891011state = &#123; loggedIn: false &#125;;componentWillMount() &#123; firebase.auth().onAuthStateChanged((user) =&gt; &#123; if (user) &#123; this.setState(&#123; loggedIn: true&#125;); &#125; else &#123; this.setState(&#123; loggedIn: false &#125;); &#125; &#125;);&#125; 更多有條件的渲染 把 loggedIn 的 state 改成 null，然後新增 renderContent，登入時在讀取資料會先跑出 Spinner，成功的話就顯示登出的 Button，失敗的話就回到登入表單 123456789101112state = &#123; loggedIn: null &#125;;renderContent() &#123; switch (this.state.loggedIn) &#123; case true: return &lt;Button&gt;登出&lt;/Button&gt;; case false: return &lt;LoginForm /&gt;; default: return &lt;Spinner size=&quot;large&quot;/&gt;; &#125;&#125; 引入 Button 和 Spinner import { Header, Button, Spinner } from './components/common'; 修改 button 樣式，修改 src/component/common/Button.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344import React from &apos;react&apos;;import &#123; View, Text, TouchableOpacity &#125; from &apos;react-native&apos;;const Button = (&#123; onPress, children &#125;) =&gt; &#123; const &#123; buttonStyle, textStyle, viewStyle &#125; = styles; return ( &lt;View style=&#123;viewStyle&#125;&gt; &lt;TouchableOpacity onPress=&#123;onPress&#125; style=&#123;buttonStyle&#125;&gt; &lt;Text style=&#123;textStyle&#125;&gt; &#123;children&#125; &lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; );&#125;;const styles = &#123; textStyle: &#123; alignSelf: &apos;center&apos;, color: &apos;#007aff&apos;, fontSize: 16, fontWeight: &apos;600&apos;, paddingTop: 10, paddingBottom: 10 &#125;, viewStyle: &#123; flexDirection: &apos;row&apos;, &#125;, buttonStyle: &#123; flex: 1, alignSelf: &apos;stretch&apos;, justifyContent: &apos;center&apos;, height: 45, backgroundColor: &apos;#fff&apos;, borderRadius: 5, borderWidth: 1, borderColor: &apos;#007aff&apos;, marginLeft: 5, marginRight: 5 &#125;&#125;;export &#123; Button &#125;; 讓 User 登出和結束 用 firebase 的語法讓用戶登出 12345return ( &lt;Button onPress=&#123;() =&gt; firebase.auth().signOut()&#125;&gt; 登出 &lt;/Button&gt;);","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React-Native","slug":"React-Native","permalink":"https://tingsyuanwang.github.io/tags/React-Native/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"React Native 快速學習自我挑戰 Day4","slug":"React-Native-快速學習自我挑戰-Day4","date":"2017-08-15T21:41:09.000Z","updated":"2017-08-17T03:21:48.000Z","comments":true,"path":"2017/08/16/React-Native-快速學習自我挑戰-Day4/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/08/16/React-Native-快速學習自我挑戰-Day4/","excerpt":"","text":"使用 Firebase 進行認證 前置作業 新增新的專案 react-native init auth 新增 src/app.js 1234567891011121314import React, &#123; Component &#125; from &apos;react&apos;;import &#123; View, Text &#125; from &apos;react-native&apos;;class App extends Component &#123; render() &#123; return ( &lt;View&gt; &lt;Text&gt;An App!&lt;/Text&gt; &lt;/View&gt; ); &#125;&#125;export default App; 在 ios.index.js 把 app.js 放進來 1234import &#123; AppRegistry &#125; from &apos;react-native&apos;;import App from &apos;./src/app&apos;;AppRegistry.registerComponent(&apos;auth&apos;, () =&gt; App); 將 Album 專案的 src/components/Button.js Card.js CardSection.js header.js 複製到新專案目錄的 src/components/common/ 底下 在 src/components/common 底下新增 index.js 1234export * from &apos;./BUtton&apos;;export * from &apos;./Card&apos;;export * from &apos;./CardSection&apos;;export * from &apos;./Header&apos;; 在個別檔案用元件的方式輸出 export { Button }; export { Card }; export { CardSection }; export { Header }; Firebase Firebase 在專案目錄下安裝 firebase npm install --save firebase Import firebase，且在 app.js 的 component 下新增 componentWillMount import firebase from 'firebase'; 12345componentWillMount() &#123; firebase.initializeApp(&#123; &#123;CONFIG CODE FROM FIREBASE&#125; &#125;);&#125; 新增 src/components/LoginForm.js 123456789101112131415161718192021import React, &#123; Component &#125; from &apos;react&apos;;import &#123; View &#125; from &apos;react-native&apos;;import &#123; Button, Card, CardSection &#125; from &quot;./common&quot;;class LoginForm extends Component &#123; render() &#123; return ( &lt;Card&gt; &lt;CardSection /&gt; &lt;CardSection /&gt; &lt;CardSection&gt; &lt;Button&gt; Log in &lt;/Button&gt; &lt;/CardSection&gt; &lt;/Card&gt; ); &#125;&#125;export default LoginForm; 在 app.js 引用 LoginForm 且放到 View 裡面 import LoginForm from './components/LoginForm'; 1234&lt;View&gt; &lt;Header headerText=&quot;Authentication&quot; /&gt; &lt;LoginForm /&gt;&lt;/View&gt; 在 LoginForm.js 新增輸入欄位 import { TextInput } from 'react-native'; 123&lt;CardSection&gt; &lt;TextInput style=&#123;&#123; height: 20, width: 100 &#125;&#125; /&gt;&lt;/CardSection&gt; 產生 state state = { text: '' }; 1234567&lt;CardSection&gt; &lt;TextInput value=&#123;this.state.text&#125; onChangeText=&#123;text =&gt; this.setState(&#123; text &#125;)&#125; style=&#123;&#123; height: 20, width: 100 &#125;&#125; /&gt;&lt;/CardSection&gt; Text input 流程：TextInput =&gt; 使用者輸入 text =&gt; OnChange 事件被呼叫 =&gt; 給新的文字 「setState」=&gt; 元件重新渲染 新增 src/components/common/Input.js 123456789101112import React from &apos;react&apos;;import &#123; TextInput, View, Text &#125; from &apos;react-native&apos;;const Input = (&#123; label &#125;) =&gt; &#123; return ( &lt;View&gt; &lt;Text&gt;&#123;label&#125;&lt;/Text&gt; &lt;/View&gt; );&#125;;export &#123; Input &#125;; 在 common/index.js 加入 export * from './Input'; 讓 input 可以到處存取 修改 LoginForm.js，把 import react-native 刪除，新增 Input 到 common import 1234&lt;Input value=&#123;this.state.text&#125; onChangeText=&#123;text =&gt; this.setState(&#123; text &#125;)&#125;/&gt; 修改 Input.js 123456789101112const Input = (&#123; label, value, onChangeText &#125;) =&gt; &#123; return ( &lt;View&gt; &lt;Text&gt;&#123;label&#125;&lt;/Text&gt; &lt;TextInput value=&#123;value&#125; onChangeText=&#123;onChangeText&#125; style=&#123;&#123; height: 20, width: 100 &#125;&#125; /&gt; &lt;/View&gt; );&#125;; 在 Input.js 新增 styles 123456789101112131415161718192021const styles = &#123; inputStyle: &#123; color: &apos;#000&apos;, paddingRight: 5, paddingLeft: 5, fontSize: 18, lineHight: 23, flex: 2 &#125;, labelStyle: &#123; fontSize: 18, paddingLeft: 20, flex: 1 &#125;, containerStyle: &#123; height: 40, flex: 1, flexDirection: &apos;row&apos;, alignItems: &apos;center&apos; &#125;&#125;; 在元件中加入 styles 1234567891011121314const Input = (&#123; label, value, onChangeText &#125;) =&gt; &#123; const &#123; inputStyle, labelStyle, containerStyle &#125; = styles; return ( &lt;View style=&#123;containerStyle&#125;&gt; &lt;Text style=&#123;labelStyle&#125;&gt;&#123;label&#125;&lt;/Text&gt; &lt;TextInput style=&#123;inputStyle&#125; value=&#123;value&#125; onChangeText=&#123;onChangeText&#125; /&gt; &lt;/View&gt; );&#125;; 在 LoginForm.js 加入 label 12345&lt;Input label=&quot;Email&quot; value=&#123;this.state.text&#125; onChangeText=&#123;text =&gt; this.setState(&#123; text &#125;)&#125;/&gt; 在 Input.js 加入 autoCorrect 且改成 false，讓 apple 不自動選取文字，新增 placeholder 參數 1234567&lt;TextInput placeholder=&#123;placeholder&#125; autoCorrect=&#123;false&#125; style=&#123;inputStyle&#125; value=&#123;value&#125; onChangeText=&#123;onChangeText&#125;/&gt; 取得上一層傳遞的 placeholder const Input = ({ label, value, onChangeText, placeholder }) =&gt; { 傳遞 placeholder 參數給 Input 元件 123456&lt;Input placeholder=&quot;user@gmail.com&quot; label=&quot;Email&quot; value=&#123;this.state.text&#125; onChangeText=&#123;text =&gt; this.setState(&#123; text &#125;)&#125;/&gt; 把 state 改為 email，避免重複使用參數 12345678910state = &#123; email: &apos;&apos; &#125;;&lt;CardSection&gt; &lt;Input placeholder=&quot;user@gmail.com&quot; label=&quot;Email&quot; value=&#123;this.state.email&#125; onChangeText=&#123;email =&gt; this.setState(&#123; email &#125;)&#125; /&gt;&lt;/CardSection&gt; 新增 password 欄位 12345678910state = &#123; email: &apos;&apos;, password: &apos;&apos; &#125;;&lt;CardSection&gt; &lt;Input placeholder=&quot;password&quot; label=&quot;Password&quot; value=&#123;this.state.password&#125; onChangeText=&#123;password =&gt; this.setState(&#123; password &#125;)&#125; /&gt;&lt;/CardSection&gt; 在 Input.js 加入 secureTextEntry 1234567891011121314151617const Input = (&#123; label, value, onChangeText, placeholder, secureTextEntry &#125;) =&gt; &#123; const &#123; inputStyle, labelStyle, containerStyle &#125; = styles; return ( &lt;View style=&#123;containerStyle&#125;&gt; &lt;Text style=&#123;labelStyle&#125;&gt;&#123;label&#125;&lt;/Text&gt; &lt;TextInput secureTextEntry=&#123;secureTextEntry&#125; placeholder=&#123;placeholder&#125; autoCorrect=&#123;false&#125; style=&#123;inputStyle&#125; value=&#123;value&#125; onChangeText=&#123;onChangeText&#125; /&gt; &lt;/View&gt; );&#125;; 直接加入 secureTextEntry，它就會知道是 true，如果沒有設定就是 undefined，在這邊跟 false 的意思一樣 123456789&lt;CardSection&gt; &lt;Input secureTextEntry placeholder=&quot;password&quot; label=&quot;Password&quot; value=&#123;this.state.password&#125; onChangeText=&#123;password =&gt; this.setState(&#123; password &#125;)&#125; /&gt;&lt;/CardSection&gt;","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React-Native","slug":"React-Native","permalink":"https://tingsyuanwang.github.io/tags/React-Native/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Kubernetes 快速學習自我挑戰 Day3","slug":"Kubernetes-快速學習自我挑戰-Day3","date":"2017-08-14T20:47:58.000Z","updated":"2017-08-16T14:39:06.000Z","comments":true,"path":"2017/08/15/Kubernetes-快速學習自我挑戰-Day3/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/08/15/Kubernetes-快速學習自我挑戰-Day3/","excerpt":"","text":"Kubernetes 觀念簡介 Service Pods 是非常動態的，它們在 Kubernetes 上面是來去自如的 當使用 Replication Controller，pods 在擴展的操作時是被終止的且再被創建的 當使用 Deployments，且在更新 image 版本的時候，pods 會被終止且創建一個新的 pods 取代舊的 這就是為什麼 pods 不應該被直接存取，而是透過 Service 一個服務是在 “mortal” pods 和其它 services 或終端使用者之間的邏輯橋樑 當使用 “kubectl expose” 命令，就會為 pod 創建一個新的服務，如此一來它就可以被外部存取 創建一個服務會為 pod(s) 創建一個 endpoint ClusterIP：一個虛擬 ip 位址只能從 cluster 裡面被存取(這是預設) NodePort：在每一個 node 都使用一樣的 port，而且可以被外部存取 LoadBalancer：LoadBalance 是由雲端主機商建立的，它會路由外部網路到每一個在 NodePort 上的 node (AWS 上的 ELB 服務) 以上所提到的選項可以使用的只有創建 虛擬 IPs 或 ports 它還有使用 DNS 名稱的可能性 ExternalName 可以為 service 提供 DNS 名稱 例如：為 service discovery 使用 DNS 它只有在 DNS add-on 啟動的時候可以使用 筆記：預設的服務只能運行在 30000-32767 port 之間，但是可以在 kube-apiserver 的命令 argument 加上 --service-node-port-range= 來改變這種特性 (在 init scripts) Demo：Service kubectl create -f first-app/helloworld.yml kubectl describe pod nodehelloworld.example.com cat first-app/helloworld-nodeport-service.yml kubectl create -f first-app/helloworld-nodeport-service.yml minikube service helloworld-service --url curl http://192.168.99.100:31001 kubectl describe svc helloworld-service kubectl get svc kubectl delete svc helloworld-service kubectl create -f first-app/helloworld-nodeport-service.yml kubectl describe svc helloworld-service，會發現 ip 不一樣了 Labels Labels 是 key/value pairs，而且可以連接到 objects Labels 在 AWS 或其它雲端服務商裡就像 tags ，且用來標籤 resource 可以 label objects，例如 pod，要跟隨以下組織架構 Key：environment - Value：dev/staging/qa/prod Key：department - Value：engineering/finance/marketing 在上一個範例，已經使用 label 來標籤 pods 了 Labels 不是獨一無二且可以增加多重標籤到一個 object 上面 一旦 labels 連結到 objects，就可以使用過濾器來縮小結果 這叫做 Label Selectors 使用 Label Selector 可以使用 matching expressions 來匹配 labels 例如：特定的 pod 只能運行在「environment」標籤上的 node 等同於 「development」 更複雜的匹配：「environment」必須要是「development」或「qa」 也可以用 labels 來標籤 nodes 一旦 nodes 被標籤，就可以使用 label selector 來讓 pods 只能運行在 特定 nodes 在特定設置的 nodes 上運行一個 pod 有必要的兩步驟 第一步驟要標籤 node 第二步驟要新增一個 nodeSelector 到 pod 組態設定 第一步驟：新增一個或是多數 labels 到 nodes 上 kubectl label nodes node1 hardware=high-spec kubectl label nodes node2 hardware=low-spec 第二步驟：新增一個使用這些 labels 的 pod Demo：使用 labels 的 Node Selector cat deployment/helloworld-nodeselector.yml kubectl get nodes --show-labels kubectl create -f deployment/helloworld-nodeselector.yml kubectl get deployments，這邊會發現新增出來的東西沒有 available kubectl get pods，會發現都在 pending kubectl describe pod helloworld-deployment-4129182270-70sdz，隨便選一個在 pending 的看內容，會發現錯誤在 MatchNodeSelector (1). kubectl label nodes minikube hardware=high-spec kubectl get nodes --show-labels，檢查是否有 hight-spec 的標籤 kubectl get pods，就會發現全部啟動了 kubectl describe pod helloworld-deployment-4129182270-70sdz，會看到 log 檔，發現啟動失敗，後來就可以啟動了 Health checks 如果應用壞掉了，pod 和 container 仍然繼續運行，應用可能已經沒有再繼續運作了 如果要偵測和解決應用的問題，可以運行health checks 有以下兩種 health checks 可以執行 在 container 定期執行 command 在 URL (HTTP)上定期檢查 在 Load balancer 後的典型的產品化應用應該要總是有用某種方法執行的 health checks 來確保應用的可用性和彈性 以下為 health checks 的範例 123456livenessProbe: httpGet: paht: / port: 3000 initailDelaySeconds: 15 timeoutSeconds: 30 Demo：Health checks kubectl create -f deployment/helloworld-healthcheck.yml kubectl get pods kubectl describe pod helloworld-deployment-583969349-0m0p8，會發現裡面有一個 Liveness 的選項 kubectl edit deployment/helloworld-deployment，進去會看到 livenessProbe，可以進行編輯 Secrets Secrets 提供一種在 Kubernetes 的方法，可以分配 credentials、keys、passwords 和 “secret” data 給 pods Kubernetes 自己本身也使用 Secrets 機制來提供 credentials 以存取內部 API 也可以使用同樣的機制來提供 secrets 給應用 Secrets 是一種提供 secrets 的方法，Kubernetes 原生的 如果不想使用 Secrets，還是有其它方法可以讓 container 取得它的 secrets(例如：在應用裡使用 external vault services) Secrets 可以使用以下方式來使用 以環境變數的方法使用 Secrets 在 pod 裡以檔案的方式使用 Secrets 這個設定 volumes 一定要被掛接在 container 裡 在這個 volume 有檔案 可以被使用在 dotenv 檔案或應用可以直接閱讀檔案 使用 external image 來 pull secrets (從private image registry) 使用檔案來產生 secrets echo -n &quot;root&quot; &gt; ./username.txt echo -n &quot;password&quot; &gt; ./password.txt kubectl create secret generic db-user-pass --from-file=./usernmae.txt --from-file=./password.txt secreat 可以是 SSH key 或是 SSL 憑證 kubectl create secret generic ssl-certificate --from-file=ssh-privatekey=~/.ssh/id_rsa --ssl-cert=ssl-cert=mysslcert.crt 使用 YAML 產生 secrets 使用 base64 產生 password 和 username echo -n &quot;root&quot; | base64 完成創建 YAML 檔案，可以直接使用 kubectl 創建 kubectl create -f secrets-db-secret.yml 可以創建 pods 並且 expose secrets 為環境變數 name: SECRET_USERNAME 或者，也可以在檔案內提供 secrets 12345678volumeMount:-name: credvolume mountPath: /etc/creds readOnly: truevolumes:-name: credvolumesecret: secretName: db-secrets Demo：使用 Volumes 的 Credentails cat deployment/helloworld-secrets.yml kubectl create -f deployment/helloworld-secrets.yml cat deployment/helloworld-secrets-volumes.yml kubectl create -f deployment/helloworld-secrets-volumes.yml kubectl describe pod helloworld-deployment-292348803-34dq4 kubectl exec helloworld-deployment-292348803-34dq4 -i -t -- /bin/bash cat /etc/creds/username cat /etc/creds/password mount Demo：在 kubernetes 上運行 WordPress cat wordpress/wordpress-secrets.yml cat wordpress/wordpress-single-deployment-no-volumes.yml kubectl create -f wordpress/wordpress-secrets.yml kubectl create -f wordpress/wordpress-single-deployment-no-volumes.yml kubectl get pods kubectl describe pod wordpress-deployment-2401615361-1j6rw cat wordpress/wordpress-service.yml kubectl create -f wordpress/wordpress-service.yml minikube service wordpress-service --url kubectl delete pod/wordpress-deployment-2401615361-1j6rw kubectl get pods，刪除之後會發現 pod 依然還在 Web UI Kubernetes 自帶 Web UI，可以取代 kubectl 指令 它可以用來 cluster 上運行的應用總覽 創建和修改個別 Kubernetes 資源和工作量(像是 kubectl create 和 delete) 取得資源狀態的資訊(像是 kubectl describe pod) 一般來說，可以用 https:///ui 來存取 kubernetes Web UI 如果不能存取(例如：部署類型沒有啟動功能)，可以手動安裝： kubectl create -f https://rawgit.com/kubernetes/dashboard/master/src/deploy/kubernetes-dashboard.yaml 如果被詢問密碼，可以用以下方式取得密碼 kubectl config view 如果使用 minikube 可以使用下列命令啟動 dashboard minikube dashboard 如果想要知道 url minikube dashboard --url Demo：Web UI minikube dashboard --url","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Kubernetes","slug":"Kubernetes","permalink":"https://tingsyuanwang.github.io/tags/Kubernetes/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Kubernetes 快速學習自我挑戰 Day2","slug":"Kubernetes-快速學習自我挑戰-Day2","date":"2017-08-10T20:42:43.000Z","updated":"2017-08-12T20:44:04.000Z","comments":true,"path":"2017/08/11/Kubernetes-快速學習自我挑戰-Day2/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/08/11/Kubernetes-快速學習自我挑戰-Day2/","excerpt":"","text":"Kubernetes 觀念簡介 建立 docker containers 建立 container，可以使用 Docker Engine 建立 Dockerfile 來執行就可以快速建立需要的 container Docker build 可以手動執行，也可以透過像是 jenkins 的 CI/CD 軟體 在 Kubernetes 上面運行應用程式 運行新建立的應用在新的 Kubernetes cluster 在我們要運行基於 image 之上的 container，我們需要創建 pod definition 一個 pod 就是一個應用運行在 Kubernetes 上面 一個 pod 包含一個或多個緊密耦合的容器，如此一來可以形成一個應用 這些應用們可以輕易的使用本地 port number 跟其它應用溝通 我們的應用只包含一個 container 創建一個 pod 創建一個 pod-helloworld.yml 的檔案 使用 kubectl 在 kubernetes cluster 上面創建 pod 有用的命令 kubectl get pod：取得所有在運行的 pods 的資訊 kubectl describe pod ：描述一個 pod kubectl expose pod --port=444 --name=fronted：公開一個 pod 的 port (創建一個新服務) kubectl port-forward 8080：Port 傳送公開的 pod port 到自己的本地機器 kubectl attach -i：連接到特定 pod kubectl exec --command：執行一個命令在 pod 上面 kubectl label pods myloable=awesome：新增一個標籤到 pod 上面 kubectl run -i --tty busybox --image=busybox --restart=Never – sh：在 pod 裡面運行一個 sh - 對除錯非常有用 先用 minikube start 運行 minikube，再用 kubectl create -f first-app/helloworld.yml 創建 pod kubectl describe pod nodehelloworld.example.com kubectl port-forward nodehelloworld.example.com 8081:3000 curl localhost:8081 就可以看到服務運行了 kubectl expose pod nodehelloworld.example.com --type=NodePort --name nodehelloworld-service minikube service &lt;Service Name&gt; --url 即可以取得服務的 url 有用的 kubectl commands kubectl attach nodehelloworld.example.com 連接 nodehelloworld.example.com kubectl exec nodehelloworld.example.com -- ls /app 在應用裡面執行命令 kubectl exec nodehelloworld.example.com -- touch /app/test.txt kubectl exec nodehelloworld.example.com -- ls /app kubectl describe service nodehelloworld-service kubectl run -i --tty busybox --image=busybox --restart=Never -- sh 新增一個 box 來和 nodehellowrold-service 進行連線 telnet 172.17.0.4 3000 GET / 負載平衡服務 在真實的世界裡面，必須要可以從 cluster 的外部連線到應用 在 AWS 上面，可以輕鬆的新增 外部負載平衡器(external Load Balancer) 這個 AWS Load Balancer 將會路由到正確的 Kubernetes pod 其它雲端服務商沒有 Load Balancer，但是仍有其它解決方案 擁有 haproxy/nginx load balancer 在 cluster 之前 或是可以直接將 ports 公開 AWS ELB LoadBalancer 服務 kops create cluster --name=kubernetes.appsoliloquy.com --state=s3://kops-state-b429d --zones=ap-northeast-1a --node-count=2 --node-size=t2.micro --master-size=t2.micro --dns-zone=kubernetes.appsoliloquy.com kops update cluster kubernetes.appsoliloquy.com --yes --state=s3://kops-state-b429d kubectl create -f first-app/helloworld.yml kubectl create -f first-app/helloworld-service.yml 進去 EC2 的 Load Balancer，確認資料狀態。 進入 Route 53，新增 record，名稱設為 helloworld，Alias 設為 yes，Alias Target 設為 Loadbalancer，點選 create。 進入 helloworld.kubernetes.appsoliloquy.com. 就可以看到結果了 Kubernetes 基礎 Node 架構 Docker 裡面裝有 Pods，Pods 裡面裝有 containers container 之間可以簡單地互相溝通 kubelet 用來管理 pods，在 container 之外，kube-proxy 負責和 iptable 溝通，如果 pod 有問題，它會更新 iptable 的規則 Replication Controller 如果應用是 stateless，可以橫向的擴展 Stateless 就是應用沒有 state，不需要寫入任何本地檔案/保存本地 sessions 所有傳統的資料庫(MySQL、Postgres)都是 stateful，它們都有資料庫檔案且不能分到多個 instances 大部分的網頁應用可以做成 stateless Session 管理 必須要在 container 之外完成 任何檔案需要被儲存的都不能儲存在 container 的本機 我們的範例應用是 stateless，如果相同的應用執行很多次，也不會改變它的 state 更多關於練習的資訊，請看 12factor.net 或是看 Learn DevOps: Continuously delivering better software/scalig apps on-premise and in the cloud 後面會解釋如何使用 volumes 來運行 stateful 應用 這些 stateful 應用不能橫向擴展，但是可以在單一 container 裡面運行它們且縱向擴展 (分配更多 CPU/記憶體/硬碟) Kubernetes 的擴展可以透過使用 Replication Controller 來完成 Replication Controller 可以確保指定數量的 pod relicas 將會隨時運行 如果被 relica controller 創建出來的 pod 運行失敗、被刪除或是被終止，那麼 pod 就會自動被取代 如果你只想確保一個 pod是永遠運行的，甚至在重新開機之後，那麼使用 Replication Controller 是被推薦的 可以只與一個 replica 運行一個 Replication Controller 這樣可以確保 pod 總是處於運行狀態 在 YAML 裡面設定 kind 為 ReplicationController、spec 裡面的 replicas 設為 2，即可複製應用兩次 Demo：Replication Controller kubectl create -f replication-controller/helloworld-repl-controller.yml kubectl describe pod helloworld-controller-cwbbn 複製其中的 controller 檢查狀態 kubectl scale --replicas=4 -f replication-controller/helloworld-repl-controller.yml 擴展服務 kubectl get rc kubectl scale --replicas=1 rc/helloworld-controller kubectl delete rc/helloworld-controller 部署 Replication Set 是 Replication Controller 的下個世代 它支援一種新的 selector，這個 selector 可以做基於過濾的 selection，而過濾是根據 sets of values 例如：“environment” 不是 “dev” 就是 “qa” 不只根據 equality，就像是 Replication Controlller 例如 “environment” == “dev” 跟 Replication Controller 相比，Replica Set 是使用 Deployment object Kubernetes 裡的部署聲明允許讓應用做部署和更新 當使用 deployment object，你就定義了你的應用的 state Kubernetes 將會確保 clusters 符合你的 desired state 只使用 replication controller 或 replication set 可能會在部署應用的時候很麻煩 Deployment Obeject 比較容易使用且有更多可能性 有 deployment object，你可以： 創建一個 deployment(例如：部署一個應用) 更新一個 deployment(例如：部署一個新版本) 可以做 rolling updates(零停機時間部署) Roll back 到上一版本 停止/恢復一個 deployment(例如：只推出部分比例) 在 YAML 裡面設定 kind 為 Deployment 非常有用的命令： kubectl get deployments：取得現有的 deployments 資訊 kubectl get rs：取得 replica sets 的資訊 kubectl get pods --show-labels：取得 pods 且顯示連結到這些 pods 的 labels kubectl rollout status deployment/helloworld-deployment：取得 deployment 狀態 kubectl set image deployment/helloworld-deployment k8s-demo=k8s-demo:2：運行 image label version 2 的 k8s-demo kubectl edit deployment/helloworld-deployment：編輯 deployment object kubectl rollout status deployment/hellowrold-deployment：取得 rollout 的狀態 kubectl rollout history deployment/helloworld-deployment：取得 rollout 的歷史 kubectl rollout undo deployment/helloworld-deployment：Rollback 到上一版本 kubectl rollout undo deployment/helloworld-deployment --to-revision=n：Rollback 到任何版本 Demo：部署 kubectl create -f deployment/helloworld.yml kubectl get deployments kubectl get rs kubectl get pods kubectl get pods --show-labels kubectl rollout status deployment/helloworld-deployment kubectl expose deployment helloworld-deployment --type=NodePort kubectl describe service helloworld-deployment minikube service helloworld-deployment --url kubectl set image deployment/helloworld-deployment k8s-demo=wardviaene/k8s-demo:2 kubectl rollout status deployment/helloworld-deployment curl http://192.168.99.100:32635 curl 剛剛取得的 ip，就會發現變成 Helloworld v2 kubectl rollout history deployment/helloworld-deployment kubectl rollout undo deployment/helloworld-deployment kubectl rollout status deployment/helloworld-deployment kubectl edit deployment/helloworld-deployment，在 spec 的 replica 下面新增 revisionHistoryLimit: 100 kubectl set image deployment/helloworld-deployment k8s-demo=wardviaene/k8s-demo:2 kubectl rollout history deployment/helloworld-deployment kubectl rollout undo deployment/helloworld-deployment --to-revision=8 kubectl rollout history deployment/helloworld-deployment","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Kubernetes","slug":"Kubernetes","permalink":"https://tingsyuanwang.github.io/tags/Kubernetes/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Kubernetes 快速學習自我挑戰 Day1","slug":"Kubernetes-快速學習自我挑戰-Day1","date":"2017-08-10T07:02:09.000Z","updated":"2017-08-11T18:59:28.000Z","comments":true,"path":"2017/08/10/Kubernetes-快速學習自我挑戰-Day1/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/08/10/Kubernetes-快速學習自我挑戰-Day1/","excerpt":"","text":"Kubernetes 觀念簡介 什麼是 Kubernetes Kubernetes 是一個開源的 orchestration system (編排系統)，提供給 Docker containers 做使用 它可以讓你在機器的 cluster 中規劃 containers 你可以在一台機器上面跑很多 containers 你可以運行 long running services (像是網頁應用程式) Kubernetes 會控管這些 container 的狀態 可以在特定 nodes 上啟動 container 當 container 被砍的時候，會再重啟一個 container 可以將 containers 從一個 node 移到另外一個 node 跟只有手動運行一些 docker containers 在一個 host 上不同的是，Kubernetes 是一個將會為你管控 container 的平台 Kubernetes clusters 可以從一個 node 開始到數千個 nodes 其他有名的 docker orchestrators： Docker Swarm Mesos Kubernetes 的優點 你可以在任何地方運行 Kubernetes On-premise (自有資料中心) 公開 (Google cloud, AWS) 混合：公開和私有 高度模組化 開源 非常好的社群 Google 支援 Container 簡介 Docker 是最受歡迎的 container 軟體 Docker 的另外一個方案是 rkt，同樣也可以與 Kubernetes 一同運行 Dokcer Engine The Docker runtime 讓 docker images 運行的軟體 Docker Hub 用來儲存和取得 docker images 的線上服務 同樣也允許你線上建立 docker images Docker 的優點 獨立：使用所有的 dependencies 來 ship binary 不需要運行在自己的機器上，不過不能用在產品化 在 Dev、QA和產品化環境更加接近，因為使用同樣的 binary Docker 讓開發團隊可以更加快速的 ship 你可以運行完全一樣的 docker image 在筆電、資料中心虛擬機和雲端主機供應商 Docker 對作業系統級的分離使用 Linux Containers (一個核心特色) Kubernetes 設定 Kubernetes 應該要可以在任何地方運行 但是，對於雲端供應商，像是 AWS 和 GCE，還是有很多整合要做 像是 Volumes 和 外部 Load Balances 只能運行在被支援的雲端供應商 會先使用 minikube 來快速讓本機單一機器用 Kubernetes cluster 運行起來 接下來會用 kops 在 AWS 上把一個 cluster 運行起來 kops 是可以被用來運行高可用型的 產品化 cluster 使用自己的實驗室是有可能的(而且高度建議) 使用 AWS 免費方案 (給你 t2.micro’s 750 小時/月) https://aws.amazon.com 使用本地機器 使用 minikube 使用 Digital Ocean 使用 minikube 在本地端設定 Minikube 是一個讓 Kubernetes 在本地端運行變簡單的工具 Minikube 運行單一 node Kubernetes cluster 在 Linux VM 裡面 它的目標用戶是那些想要拿來測試或是用它來開發的人 它不能運行在產品化的 cluster，它是一個沒有高可用性的單一 node 機器 它可以運行在 Windows、Linux 和 MacOS 你會需要安裝 虛擬化軟體 才能運行 minikube Virtualbox 是免費的且可以直接下載 下載 minikube 啟動你的 cluster 只要(在 shell/terminal/powershell)輸入 minikube start 安裝 minikube 安裝最新版本的 minikube 安裝完成之後，啟動 minikube minikube start 安裝 kubectl chmod +x kubectl &amp;&amp; sudo mv kubectl /usr/local/bin/ kubectl run hello-minikube --image=gcr.io/google_containers/echoserver:1.4 --port=8080 kubectl expose development hello-minikube --type=NodePort minikube service hello-minikube --url minikube stop Kops 介紹 設置 Kubernetes 在 AWS 上面，可以使用叫做 kops 的工具 kops 代表 Kubernetes Operations 這個工具允許你做產品化等級的 Kubernetes 安裝、升級和管理 另外，還有一個叫做 kube-up sh 的傳統工具 這是一個用來建立 cluster 的簡易工具，但現在已經停止維護，它不能用來建立一個產品化準備的環境 Kops 只能運行在 Mac/Linux 如果你使用 windows，你必須要先啟動虛擬機 可以使用 Vagrant 來快速建立一個 Linux box 下載 Virtualbox 和 Vagrant，兩個都需要 下載完之後，建立一個新的虛擬機，然後直接在 cmd/powershell 新增以下指令 1234mkdir ubuntucd ubuntuvagrant init ubuntu/xenial64vagrant up 準備 Kops 安裝 完成上面的步驟 vagrant ssh-config 檢視 ssh 狀態 vagrant ssh 即可登入虛擬機 puttygen putty 在 windows 上可以使用 putty 來登入 為 Kops 安裝準備 AWS Kops Github brew update &amp;&amp; brew install kops wget https://github.com/kubernetes/kops/releases/download/1.7.0/kops-linux-amd64 chmod +x kops-linux-amd64 新增執行權限 mv kops-linux-amd64 /usr/local/bin/kops 移動 kops apt-get update &amp;&amp; apt-get install python-pip -y pip install awscli MacOS 上的 bug 處理 sudo -H pip install awscli --upgrade --ignore-installed six 進入 AWS，選擇服務 IAM (Identity and Access Management)，選擇左列選單 Users，選擇 Add User，命名為 kops，下面選項 Programmatic access 要打勾，下個步驟選擇 AdministratorAccess，完成設定。 aws configure ls -ahl ~/.aws/ 檢視 aws credentials 設定完 IAM 之後，回到服務，選擇 S3，新增 bucket，名稱設定為 kops-state-b429b，最後一個是亂數，因為名稱要是唯一的，地區的選擇要去 cloudping 看哪個最快，選擇最快的就可以了，接下來直接按到完成。 接下來要設定 DNS，選擇服務 Route53，選擇 DNS management 的 Get Started Now，選擇 Create Hosted Zone，打入自己所擁有的網域，名稱設為 kubernetes，最後到自己的 Domain 主機商那邊設定 DNS。 使用 kops 進行 AWS Cluster 設定 安裝 kubectl curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl 下載最新版的 kubectl chmod +x ./kubectl sudo mv ./kubectl /usr/local/bin/kubectl ssh-keygen -f .ssh/id_rsa 新增 ssh-key kops create cluster --name=kubernetes.appsoliloquy.com --state=s3://kops-state-b429d --zones=ap-northeast-1a --node-count=2 --node-size=t2.micro --master-size=t2.micro --dns-zone=kubernetes.appsoliloquy.com kops update cluster kubernetes.appsoliloquy.com --yes --state=s3://kops-state-b429d cat .kube/config kubectl get node kubectl run hello-minikube --image=gcr.io/google_containers/echoserver:1.4 --port=8080 kubectl expose deployment hello-minikube --type=NodePort kubectl get service，檢查 port 開啟 Services 的 VPC，點選 Security Groups，點選 master.&lt;自己的 domain&gt;，點選 Inbound Rules，新增 Custom TCP rule，將剛剛取得的 port 貼上、source 設定為 0.0.0.0/0。 進去 api.kubernetes.&lt;自己的 domain&gt;：剛剛的 port，就可以看到內容了 如果要刪除 instance kops delete cluster --name kubernetes.appsoliloquy.com --state=s3://kops-state-b429d","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Kubernetes","slug":"Kubernetes","permalink":"https://tingsyuanwang.github.io/tags/Kubernetes/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"React Native 快速學習自我挑戰 Day3","slug":"React-Native-快速學習自我挑戰-Day3","date":"2017-08-08T09:41:08.000Z","updated":"2017-08-08T21:39:55.000Z","comments":true,"path":"2017/08/08/React-Native-快速學習自我挑戰-Day3/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/08/08/React-Native-快速學習自我挑戰-Day3/","excerpt":"","text":"處理 Component 的排版 Flexbox 排版 justifyContent: ‘space-between’：上下頂到邊，平均分配空間排列 justifyContent: ‘space-around’：上下不頂到邊，平均分配空間排列 flexDirection：‘row’, ‘column’：決定方向 修改版面 修改 AlbumDetail.js，在 react-native 多引用 View import { Text, View } from 'react-native'; 修改 AlbumDetail，將 artist 放進去 12345678910111213const AlbumDetail = (props) =&gt; &#123; return ( &lt;Card&gt; &lt;CardSection&gt; &lt;View&gt;&lt;/View&gt; &lt;View style=&#123;styles.headerContentStyle&#125;&gt; &lt;Text&gt;&#123;props.album.title&#125;&lt;/Text&gt; &lt;Text&gt;&#123;props.album.artist&#125;&lt;/Text&gt; &lt;/View&gt; &lt;/CardSection&gt; &lt;/Card&gt; );&#125;; 新增 styles 123456const styles = &#123; headerContentStyle: &#123; flexDirection: &apos;column&apos;, justifyContent: &apos;space-around&apos; &#125;&#125;; 在 react-native 多引用 Image import { Text, View, Image } from 'react-native'; 新增 image 123&lt;View&gt; &lt;Image source=&#123;&#123; uri: props.album.thumbnail_image &#125;&#125; /&gt;&lt;/View&gt; 簡化傳遞的參數 1234567891011121314151617const AlbumDetail = (&#123; album &#125;) =&gt; &#123; const &#123; title, artist, thumbnail_image &#125; = album; return ( &lt;Card&gt; &lt;CardSection&gt; &lt;View&gt; &lt;Image source=&#123;&#123; uri: thumbnail_image &#125;&#125; /&gt; &lt;/View&gt; &lt;View style=&#123;styles.headerContentStyle&#125;&gt; &lt;Text&gt;&#123;title&#125;&lt;/Text&gt; &lt;Text&gt;&#123;artist&#125;&lt;/Text&gt; &lt;/View&gt; &lt;/CardSection&gt; &lt;/Card&gt; );&#125;; 新增圖片的 style 1234thumbnailStyle: &#123; height:50, width: 50&#125; 將 sytle 加到圖片的 tag &lt;Image style={styles.thumbnailStyle} source={{uri: thumbnail_image}} /&gt; 簡化 style 的參數 123456789101112131415161718192021const AlbumDetail = (&#123; album &#125;) =&gt; &#123; const &#123; title, artist, thumbnail_image &#125; = album; const &#123; thumbnailStyle, headerContentStyle&#125; = styles; return ( &lt;Card&gt; &lt;CardSection&gt; &lt;View&gt; &lt;Image style=&#123;thumbnailStyle&#125; source=&#123;&#123; uri: thumbnail_image &#125;&#125; /&gt; &lt;/View&gt; &lt;View style=&#123;headerContentStyle&#125;&gt; &lt;Text&gt;&#123;title&#125;&lt;/Text&gt; &lt;Text&gt;&#123;artist&#125;&lt;/Text&gt; &lt;/View&gt; &lt;/CardSection&gt; &lt;/Card&gt; );&#125;; 新增兩個 styles: headerTextStyle、thumbnailContainerStyle 12345678910111213141516171819const styles = &#123; headerContentStyle: &#123; flexDirection: &apos;column&apos;, justifyContent: &apos;space-around&apos; &#125;, headerTextStyle: &#123; fontSize: 18 &#125;, thumbnailStyle: &#123; height:50, width: 50 &#125;, thumbnailContainerStyle: &#123; justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;, marginLeft: 10, marginRight: 10 &#125;&#125;; 加入簡化的常數 123456const &#123; thumbnailStyle, headerTextStyle, headerContentStyle, thumbnailContainerStyle&#125; = styles; 加入 style 123456789101112&lt;CardSection&gt; &lt;View style=&#123;thumbnailContainerStyle&#125;&gt; &lt;Image style=&#123;thumbnailStyle&#125; source=&#123;&#123; uri: thumbnail_image &#125;&#125; /&gt; &lt;/View&gt; &lt;View style=&#123;headerContentStyle&#125;&gt; &lt;Text style=&#123;headerTextStyle&#125;&gt;&#123;title&#125;&lt;/Text&gt; &lt;Text&gt;&#123;artist&#125;&lt;/Text&gt; &lt;/View&gt;&lt;/CardSection&gt; 新增專輯封面 style 12345imageStyle: &#123; height: 300, flex: 1, width: null&#125; 1234567const &#123; thumbnailStyle, headerTextStyle, headerContentStyle, thumbnailContainerStyle, imageStyle&#125; = styles; 123&lt;CardSection&gt; &lt;Image style=&#123;imageStyle&#125; source=&#123;&#123; uri: image &#125;&#125; /&gt;&lt;/CardSection&gt; 讓畫面可以滾動，修改 albumList.js import { ScrollView } from 'react-native'; 123456789render () &#123; console.log(this.state); return ( &lt;ScrollView&gt; &#123;this.renderAlbums()&#125; &lt;/ScrollView&gt; );&#125; 畫面卡住的問題，要修改 index.ios.js 123456const App = () =&gt; ( &lt;View style=&#123;&#123; flex: 1 &#125;&#125;&gt; &lt;Header headerText=&#123;&apos;Albums&apos;&#125; /&gt; &lt;AlbumList /&gt; &lt;/View&gt;); 新增 src/components/Button.js 12345678910import React from &apos;react&apos;;import &#123; Text &#125; from &apos;react-native&apos;;const Button = () =&gt; &#123; return ( &lt;Text&gt;Click me!!!&lt;/Text&gt; );&#125;;export default Button; 在 albumDetail.js 引用 Button import Button from './Button'; 再新增一個 CardSection 123&lt;CardSection&gt; &lt;Button/&gt;&lt;/CardSection&gt; 在 Button.js 新增 TouchableOpacity，讓使用者點擊 button 會有反饋 import { Text, TouchableOpacity } from 'react-native'; 123&lt;TouchableOpacity&gt; &lt;Text&gt;Click me!!!&lt;/Text&gt;&lt;/TouchableOpacity&gt; 新增 Button style 123456789101112const styles = &#123; buttonStyle: &#123; flex: 1, alignSelf: &apos;stretch&apos;, backgroundColor: &apos;#fff&apos;, borderRadius: 5, borderWidth: 1, borderColor: &apos;#007aff&apos;, marginLeft: 5, marginRight: 5 &#125;&#125;; 123456789const Button = () =&gt; &#123; const &#123; buttonStyle &#125; = styles; return ( &lt;TouchableOpacity style=&#123;buttonStyle&#125;&gt; &lt;Text&gt;Click me!!!&lt;/Text&gt; &lt;/TouchableOpacity&gt; );&#125;; 新增 Text style 12345678textStyle: &#123; alignSelf: &apos;center&apos;, color: &apos;#007aff&apos;, fontSize: 16, fontWeight: &apos;600&apos;, paddingTop: 10, paddingBottom: 10&#125;, 1234567891011const Button = () =&gt; &#123; const &#123; buttonStyle, textStyle &#125; = styles; return ( &lt;TouchableOpacity style=&#123;buttonStyle&#125;&gt; &lt;Text style=&#123;textStyle&#125;&gt; Click me!!! &lt;/Text&gt; &lt;/TouchableOpacity&gt; );&#125;; 在 albumDetail.js 加上 onPress function，然後把値傳送到 Button.js 123&lt;CardSection&gt; &lt;Button onPress=&#123;() =&gt; console.log(title)&#125; /&gt;&lt;/CardSection&gt; 1234567891011const Button = (&#123; onPress &#125;) =&gt; &#123; const &#123; buttonStyle, textStyle &#125; = styles; return ( &lt;TouchableOpacity onPress=&#123;onPress&#125; style=&#123;buttonStyle&#125;&gt; &lt;Text style=&#123;textStyle&#125;&gt; Click me!!! &lt;/Text&gt; &lt;/TouchableOpacity&gt; );&#125;; 在 albumDetail.js 新增 button 的超連結 import { Text, View, Image, Linking } from 'react-native'; const { title, artist, thumbnail_image, image, url } = album; 123&lt;CardSection&gt; &lt;Button onPress=&#123;() =&gt; Linking.openURL(url)&#125; /&gt;&lt;/CardSection&gt; 讓 Button 文字元件化 修改 albumDetail.js 12345&lt;CardSection&gt; &lt;Button onPress=&#123;() =&gt; Linking.openURL(url)&#125;&gt; Buy Now &lt;/Button&gt;&lt;/CardSection&gt; 修改 Button.js 1234567891011const Button = (&#123; onPress, children &#125;) =&gt; &#123; const &#123; buttonStyle, textStyle &#125; = styles; return ( &lt;TouchableOpacity onPress=&#123;onPress&#125; style=&#123;buttonStyle&#125;&gt; &lt;Text style=&#123;textStyle&#125;&gt; &#123;children&#125; &lt;/Text&gt; &lt;/TouchableOpacity&gt; );&#125;;","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React-Native","slug":"React-Native","permalink":"https://tingsyuanwang.github.io/tags/React-Native/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"React Native 快速學習自我挑戰 Day2","slug":"React-Native-快速學習自我挑戰-Day2","date":"2017-08-04T16:43:27.000Z","updated":"2017-08-04T22:21:50.000Z","comments":true,"path":"2017/08/05/React-Native-快速學習自我挑戰-Day2/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/08/05/React-Native-快速學習自我挑戰-Day2/","excerpt":"","text":"React Native 上的 HTTP 請求 新增檔案 /src/components/AlbumList.js 123456789101112import React from &apos;react&apos;;import &#123; View, Text &#125; from &apos;react-native&apos;;const AlbumList = () =&gt; &#123; return ( &lt;View&gt; &lt;Text&gt;Album List!!!&lt;/Text&gt; &lt;/View&gt; );&#125;;export default AlbumList; 在 index.js 引入函式庫 import AlbumList from './src/components/AlbumList'; 用 View 把物件包起來 123456const App = () =&gt; ( &lt;View&gt; &lt;Header headerText=&#123;&apos;Albums&apos;&#125; /&gt; &lt;AlbumList /&gt; &lt;/View&gt;); Functional Component vs Class Component Functional Component 用來呈現固定資料 不能處理讀取檔案 很容易寫入 Class Component 用來取得動態資料來源 處理可能會改變的資料 (讀取資料、使用者事件…等等) 知道它什麼時候要渲染到裝置上 (對資料讀取非常有幫助) 要寫更多城市 Functional Component 範例 123const Header = () =&gt; &#123; return &lt;Text&gt;Hi there!&lt;/Text&gt;&#125; Class Component 範例 12345class Header extends Component &#123; render () &#123; return &lt;Text&gt;Hi There!&lt;/Text&gt; &#125;&#125; 接下來要把本來的 Functional Component 換成 Class Component，要先修改引用的函式庫 import React, { Component } from 'react'; 將 AlbumList 換成 Class Component 123456789class AlbumList extends Component &#123; render () &#123; return ( &lt;View&gt; &lt;Text&gt;Album List!!!&lt;/Text&gt; &lt;/View&gt; ); &#125;&#125; 在 Component 裡面加上 componentWillMount 12345678910111213class AlbumList extends Component &#123; componentWillMount () &#123; console.log(&apos;componentWillMount in AlbumList&apos;); &#125; render () &#123; return ( &lt;View&gt; &lt;Text&gt;Album List!!!&lt;/Text&gt; &lt;/View&gt; ); &#125;&#125; 安裝 axios npm install --save axios 在 componentWillMount 引入 API 1234componentWillMount () &#123; axios.get(&apos;https://rallycoding.herokuapp.com/api/music_albums&apos;) .then(response =&gt; console.log(response)); &#125; App 的時間軸 啟動 React Native RN 決定要渲染 “App” 到螢幕上 “App” 決定要渲染它自己、“Header” 和 “AlbumList” “AlbumList” 發覺到有東西要被渲染，呼叫 componentWillMount “AlbumList” 開啟 HTTP 請求 “App”、“AlbumList” 和 “Header” 出現在螢幕上 過很幾毫秒之後，HTTP 請求傳回 JSON data 要處理資料比畫面顯示還晚的問題，要用 state 的方式處理，state 由以下三步驟來完成 設定預設值或是初始值 讀取資料，且要告訴 Component 資料已經更新 最後，要確定 Component 有使用這些資料 設定初始值 state = { albums: [] }; 讀取資料，而且拿那個值來更新 component，修改 componentWillMount 底下的 .then，這邊要用 setState，而不是 state = [{}]，因為這樣跟起始值一樣 .then(response =&gt; this.setState({albums: response.data })); 在 render 裡面 console.log 結果 console.log(this.state); 加入 state 後的時間軸 啟動 React Native RN 決定要渲染 “App” 到螢幕上 “App” 決定要渲染它自己、“Header” 和 “AlbumList” “AlbumList” 取得起始值 { albums: [] } “AlbumList” 發覺到有東西要被渲染，呼叫 componentWillMount “AlbumList” 開啟 HTTP 請求 “AlbumList” 的渲染方法被呼叫 “App”、“AlbumList” 和 “Header” 出現在螢幕上 過很幾毫秒之後，HTTP 請求傳回 JSON data 叫做 “setState” 的 request handler 會更新 albums “AlbumList” 的渲染方法被呼叫 State 的規則 State 的定義：一個純 JavaScript 物件，被用來記錄和回應被用戶觸發的事件 當我們需要更新 component 顯示的東西，叫做 “this.setState” 只能用 “setState” 來改變 state，不要用 “this.state = 123” 用 renderAlbums 取得值，map 在這邊是 foreach 的功能 123renderAlbums () &#123; return this.state.albums.map(album =&gt; &lt;Text&gt;&#123;album.title&#125;&lt;/Text&gt;);&#125; 把 renderAlbums 放在 &lt;View&gt;&lt;/View&gt; 裡面 {this.renderAlbums()} 新增 key 12345renderAlbums () &#123; return this.state.albums.map(album =&gt; &lt;Text key=&#123;album.title&#125;&gt;&#123;album.title&#125;&lt;/Text&gt; ); &#125; 新增 AlbumDetail.js 123456789101112import React from &apos;react&apos;;import &#123; View, Text &#125; from &apos;react-native&apos;;const AlbumDetail = (props) =&gt; &#123; return ( &lt;View&gt; &lt;Text&gt;&#123;props.album.title&#125;&lt;/Text&gt; &lt;/View&gt; );&#125;;export default AlbumDetail; 在 AlbumList 引入 AlbumDetail import AlbumDetail from './AlbumDetail'; 修改 renderAlbums，album={album} 是將 props 命名為 album，並傳給 AlbumList 12345renderAlbums () &#123; return this.state.albums.map(album =&gt; &lt;AlbumDetail key=&#123;album.title&#125; album=&#123;album&#125; /&gt; );&#125; 新增 /src/components/Card.js 12345678910import React from &apos;react&apos;;import &#123; View &#125; from &apos;react-native&apos;;const Card = () =&gt; &#123; return ( &lt;View&gt;&lt;/View&gt; );&#125;;export default Card; 幫 Card 新增 styles 12345678910111213141516const styles = &#123; containerStyle: &#123; borderWidth: 1, borderRadius: 2, borderColor: &apos;#ddd&apos;, borderBottomWidth: 0, shadowColor: &apos;#000&apos;, shadowOffset: &#123; width: 0, height: 2 &#125;, shadowOpacity: 0.1, shadowRadius: 2, elevation: 1, marginLeft: 5, marginRight: 5, marginTop: 10 &#125;&#125;; 在 Card 的 View 裡面新增 style &lt;View style={styles.containerStyle}&gt;&lt;/View&gt; 在 AlbumDetails 引用 Card import Card from './Card'; 把 View 改成 Card 123&lt;Card&gt; &lt;Text&gt;&#123;props.album.title&#125;&lt;/Text&gt;&lt;/Card&gt; 把上層的值傳到這邊使用，用 props.children 就可以直接取得值 1234567const Card = (props) =&gt; &#123; return ( &lt;View style=&#123;styles.containerStyle&#125;&gt; &#123;props.children&#125; &lt;/View&gt; );&#125;; 新增 /src/components/CardSection.js 123456789101112131415161718192021222324import React from &apos;react&apos;;import &#123; View &#125; from &apos;react-native&apos;;const CardSection = (props) =&gt; &#123; return ( &lt;View style=&#123;styles.containerStyle&#125;&gt; &#123;props.children&#125; &lt;/View&gt; );&#125;;const styles = &#123; containerStyle: &#123; borderBottomWidth: 1, padding: 5, backgroundColor: &apos;#fff&apos;, justifyContent: &apos;flex-start&apos;, flexDirection: &apos;row&apos;, borderColor: &apos;#ddd&apos;, position: &apos;relative&apos; &#125;&#125;;export default CardSection; 在 AlbumDetail 加入 CardSection 12345&lt;Card&gt; &lt;CardSection&gt; &lt;Text&gt;&#123;props.album.title&#125;&lt;/Text&gt; &lt;/CardSection&gt;&lt;/Card&gt;","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React-Native","slug":"React-Native","permalink":"https://tingsyuanwang.github.io/tags/React-Native/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"React Native 快速學習自我挑戰 Day1","slug":"React-Native-快速學習自我挑戰-Day1","date":"2017-08-03T10:50:32.000Z","updated":"2017-08-04T10:39:14.000Z","comments":true,"path":"2017/08/03/React-Native-快速學習自我挑戰-Day1/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/08/03/React-Native-快速學習自我挑戰-Day1/","excerpt":"","text":"開始課程 第一支程式的 Roadmap 在每個作業系統安裝 dependencires 針對不同編輯器安裝不同的 ESLint 生成 React Native 專案 課程 Repo 在不同的系統部署環境 OSX 安裝流程 了解 Dependency 的用途 XCode：打包程式和 React Natvie Library 到可安裝的 app，然後用 iOS 模擬器運行 HomeBrew：被用來安裝 node Node/NPM：Node 在瀏覽器之外運行 JavaScript，NPM 被用來安裝和管理 dependencies，Node 和 NPM 會在一起 watchman：在硬碟上監控檔案，等待它們被改變 RN CLI：React Native Command Line 界面，用來產生新的 React Native 專案 依序安裝 開啟專案 react-native run-ios Windows 安裝流程 必須安裝的軟體 python 2.7 node JAVA SDK Android Studio npm install -g react-native-cli --no-optional 開啟 Android Studio，修正所有錯誤，開啟 AVD，啟動一個模擬器 設定環境變數，JAVA_HOME，值為 C:\\Program Files\\Java\\jdk_版本號，另外將 C:\\Users\\使用者名稱\\AppData\\Local\\Android\\sdk\\platform-tools 加入 path 環境變數 開啟專案 react-native run-android ESLint 設定 (VS code) npm install eslint -g 全域安裝 ESLint npm install --save-dev eslint-config-standard 在專案根目錄新增檔案 .eslintrc 在 .eslintrc 新增以下內容 123&#123; &quot;extends&quot;: &quot;standard&quot;&#125; 向前進！ React Native 安裝疑難排解 從 ios.index.js 開始，先刪除所有檔案，首先引入函式庫 12import React from &apos;react&apos;;import ReactNative from &apos;react-native&apos;; React vs React Native React 知道 compoent 該怎麼表現 React 知道如何拿一堆 components 且讓他們一起運作 React Native 知道如何從 component 取得 output 且將它呈現在螢幕上 React Native 提供核心套件 (image, text) 創建一個 Component 12345const App = () =&gt; &#123; return ( &lt;Text&gt;Some Text&lt;/Text&gt; );&#125;; 將套件內容讀取出來 ReactNative.AppRegistry.registerComponent('albums', () =&gt; App); 將 ReactNative 取代為 { Text, AppRegistry }，這樣的做法就是只使用 ReactNative 裡面的 Text 元件 import { Text, AppRegistry } from 'react-native'; AppRegistry.registerComponent('albums', () =&gt; App); 創建 Component 的部分可以簡化 123const App = () =&gt; ( &lt;Text&gt;Some Text&lt;/Text&gt;); 新增一個檔案 src/components/header.js 在 header.js 引入函式庫 12import React from &apos;react&apos;;import &#123; Text &#125; from &apos;react-native&apos;; 製作 Component 123const Header = () =&gt; &#123; return &lt;Text&gt;Albums!&lt;/Text&gt;;&#125;; 接下來要讓 Component 可以在 app 的其它部分使用，但是只有 root Component 才用 “AppRegistry”，在這邊我們使用export default Header; 在 root 呼叫 Component import Header from './src/components/header'; 再來直接將 Header 放在 Component 裡面 123const App = () =&gt; ( &lt;Header /&gt;); 處理樣式問題 在 header.js 新增樣式 12345const styles = &#123; textStyle: &#123; fontSize: 20 &#125;&#125;; 將樣式加入 component 12345const Header = () =&gt; &#123; const &#123; textStyle &#125; = styles; return &lt;Text style=&#123;textStyle&#125;&gt;Albums!&lt;/Text&gt;;&#125;; 引入 view import { Text, View } from 'react-native'; 新增 viewStyle 12345678const styles = &#123; viewStyle: &#123; backgroundColor: &apos;#F8F8F8&apos; &#125;, textStyle: &#123; fontSize: 20 &#125;&#125;; 使用 viewStyle 123456789const Header = () =&gt; &#123; const &#123; textStyle, viewStyle &#125; = styles; return ( &lt;View style=&#123;viewStyle&#125;&gt; &lt;Text style=&#123;textStyle&#125;&gt;Albums!&lt;/Text&gt; &lt;/View&gt; );&#125;; 使用 flexbox justifyContent: ‘flex-end’ 將物件移至垂直最下方 justifyContent: ‘center’ 將物件移至垂直中間 justifyContent: ‘flex-start’ 將物件置於垂直上方，其實就是預設 alignItems: ‘flex-start’ 將物件置於水平上方，其實就是預設 alignItems: ‘center’ 將物件移至水平中間 alignItems: ‘flex-end’ 將物件移至水平最右方 修改 viewStyle 123456789101112viewStyle: &#123; backgroundColor: &apos;#F8F8F8&apos;, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;, height: 60, paddingTop: 15, shadowColor: &apos;#000&apos;, shadowOffset: &#123; width: 0, height: 2 &#125;, shadowOpacity: 0.2, elevation: 2, position: &apos;relative&apos; &#125;, 讓 Header 可以再使用 將本來文字的地方用 props 取代 {props.headerText} 另外要將 props 的變數放入 function const Header = (props) =&gt; { 在 index 的 component 裡面放入 props &lt;Header headerText={'Albums'} /&gt;","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React-Native","slug":"React-Native","permalink":"https://tingsyuanwang.github.io/tags/React-Native/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"docker 快速學習自我挑戰 Day8","slug":"docker-快速學習自我挑戰-Day8","date":"2017-08-02T05:54:52.000Z","updated":"2017-08-03T10:49:00.000Z","comments":true,"path":"2017/08/02/docker-快速學習自我挑戰-Day8/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/08/02/docker-快速學習自我挑戰-Day8/","excerpt":"","text":"Container Registry：Image Storage and Distribution Docker Hub：探尋的更深入 Container Registries 你的 Container plan 需要有 Image Registry 成為 plan 的一部分 更多 Docker Hub 的細節，包含 auto-build Docker Store 是怎麼樣跟 Hub 不一樣 Docker Cloud 是怎麼樣跟 Hub 不一樣 使用 Cloud 的新 Swarm 功能來讓 Mac/Win 跟 Swarm 連線 安裝和使用 Docker Registry，且當作 private image store 第三方 registry 套件選項 Docker Hub：探尋的更深入 最有名的 public image registry 它是真的 Docker Registry 而且最輕量的 image building 讓我們探索更多 Docker Hub 的功能 連結 GitHub/BitBucket 到 Hub 而且自動建立 images commit 將 image building 串連在一起 Docker Store：它可以做什麼？ 下載 Docker “Editions” 找到認證過的 Docker/Swarm 外掛和商業認證的 images Docker Cloud：CI/CD 和 Server Ops Web based Docker Swarm 創建/管理 使用有名的雲端主機商和自建式伺服器 自動化的 image building、測試和部署 跟 Docker Hub 免費的東西相比更進階 包含 image 安全掃描服務 使用 Docker Cloud 來做簡單的遠端 Swarm 管理 觀看此影片 了解 Docker Registry 一個提供給你的網路的私有 image registry Docker/Distribution Github Repo 的一部分 事實上在私有的 container registry 不像完整功能的 Hub 或其它東西，它沒有完整的網頁介面，只有基本的認證 在核心的部分：一個網頁的 API 和儲存系統，用 Go 語言撰寫 儲存系統支援 local、S3/Azure/Alibaba/Google 雲，還有 OpenStack Swift 查看以下資源： 使用 TLS 加密你的 Registry 透過 Garbage Collection 來進行儲存清理 透過 “–registry-mirror” 開啟 Hub caching 運行一個私有的 Docker Registry 運行 registry image 在預設 port 5000 Re-tag 已存在的 image，且推送它到你的新 registry 從本地端 cache 移除 image，且從新的 registry pull 下來 使用 bind mount 來 Re-create registry，且觀察它如何儲存資料 Registry 和適合的 TLS 「預設加密」：Docker 不會用沒有 HTTPS 的方式跟 registry 溝通，除了 localhost (127.0.0.0/8) 對於遠端自行登入的 TLS，要再引擎啟動 「insecure-registry」 運行私有 registry image docker container run -d -p 5000:5000 --name registry registry docker pull hello-world 下載很輕量的 image 來測試 Re-tag 已存在的 image，且推送它到你的新 registry docker tag hello-world 127.0.0.1:5000/hello-world docker push 127.0.0.1:5000/hello-world 從本地端 cache 移除 image，且從新的 registry pull 下來 docker image remove hello-world docker image remove 127.0.0.1:5000/hello-world docker pull 127.0.0.1:5000/hello-world docker container kill registry docker container rm registry 使用 bind mount 來 Re-create registry，且觀察它如何儲存資料 docker container run -d -p 5000:5000 --name registry -v $(pwd)/registry-data:/var/lib/registry registry docker push 127.0.0.1:5000/hello-world tree registry-data 安裝 Docker 自動完成 Oh-my-zsh docker-zsh-completion 作業：使用 TLS 和認證加密 Docker Registry 透過創建給 HTTPS 的 self-signed 認證和啟動 htpasswd 認證可以學習到基礎 會使用 Play With Docker 來完成這個作業 建議使用 Part 2 and 3 of &quot;Docker Registry for Linux 來完成作業，或是跳回 Part 1 且在他們的 infrastructure 上運行 container，使用他們的實際 Docker Engine 的 web-based 介面學習 PWD 怎麼運作的 更多實驗請參考：點此 跟 Swarm 一起使用 Registry 跟 localhost 用一樣的方式 由於 Routing Mesh，所有的節點可以在 127.0.0.1:5000 被看到 記得決定如何儲存 image (volume driver) 筆記：所有的 nodes 都要可以存取 images 專業的技巧：如果可以的話，使用 hosted SaaS registry 使用 play-with-docker.com docker service create --name registry --publish 5000:5000 registry 在 5000 port 的 console 後面加上 v2/_catalog 可以看到 json 格式的紀錄 docker pull hello-world docker tag hello-world 127.0.0.1:5000/hello-world docker push 127.0.0.1:5000/hello-world 在 5000 port 的 console 後面加上 v2/_catalog 可以看到 {&quot;repositories&quot;:[&quot;hello-world&quot;]} docker pull nginx docker tag nginx 127.0.0.1:5000/nginx docker push 127.0.0.1:5000/nginx docker service create --name nginx -p 80:80 --replicas 5 --detach=false 127.0.0.1:5000/nginx docker service ps nginx 就可以看到它使用的是本機端的 image (127.0.0.1:5000/nginx:latest) Docker 的第三方套件 最流行的是：Quay.io 如果使用 AWS、Azure、Google Cloud，他們都有自己專屬的 registry 如果是自建式主機，Docker EE、Quay Enterprise、GitLab 更多詳細的 registry 清單 額外的課程 Journey to Docker Production: Evolving Your Infrastructure and Processes What host OS should I use? What base FROM images should I use? How should my Swarm node design look? What common issues do people have when starting a production docker project? How to limit the project from trying to change too much at once. How to speed up the project by outsourcing small pieces of solution to existing products. How Docker’s Enterprise/Cloud products can help. Everything You Thought You Already Knew About Orchestration Docker tip: docker system prune and df Docker 17.06 Community Edition 更詳細的 changelog 完成課程","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://tingsyuanwang.github.io/tags/Docker/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"docker 快速學習自我挑戰 Day7","slug":"docker-快速學習自我挑戰-Day7","date":"2017-08-01T10:38:10.000Z","updated":"2017-08-01T15:42:29.000Z","comments":true,"path":"2017/08/01/docker-快速學習自我挑戰-Day7/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/08/01/docker-快速學習自我挑戰-Day7/","excerpt":"","text":"Docker 服務和 Swarm 的威力： Build-In Orchestration Swarms Stacks 和產品化等級的 Compose 在 1.13 版本，Docker 增加了一個新的抽象層到 Swarm，且命名為 Stacks Stacks 接受的 Compose files 如同他們對 Services、Networks 和 Volumes 的聲明性定義 我們使用 docker stack deploy 而不是 docker service create Stacks 為我們掌管這些 objects，包括每一個 stack 的 overlay network，新增 stack 名稱來開始他們的名稱 新的 deploy：Compose file 裡面的 key，不能用 build Compose 現在省略 deploy，Swarm 省略 build docker-compose cli 在 Swarm server 上面不被需要 docker stack deploy -c example-voting-app-stack.yml voteapp 使用 YAML 檔案開始部署專案 docker stack ps voteapp 檢查運行狀態 docker stack services voteapp 顯示 server 狀態，有點像是 docker service ls 如果檔案有修改，再執行一次 docker stack deploy -c example-voting-app-stack.yml voteapp 就會自動更新了 給 Swarm 使用的 Secrets Storage：保護你的環境變數 給 Swarm 儲存 Secrets 的最簡單的「安全」解決方案 什麼是 Secret？ Usernames and passwords TLS 認證和 keys SSH keys 任何你將不會放在「前端頁面的新聞」的資料 支援 generic strings 或二進位內容，最多不可大於 500kb 不需要要求 apps 可以被覆寫 在 1.13.0 版本後的 Docker，Swarm Raft DB 在硬碟上是被加密的 只儲存在 Manager nodes 的硬碟上 預設 Managers 和 Workers 「控制面板」是 TLS ＋ 雙向認證 Secrets 首先儲存在 Swarm，然後再分派給 Service(s) 只有在被分派的 Service(s) 的 containers 可以看見它們 它們看起來是 container 裡面的檔案，但事實上它們在記憶體上的 fs /run/secrets/&lt;secret_name&gt; 或/run/secrets/&lt;secret_alias&gt; 本地端的 docker-compose 可以使用基於檔案的 secrets，但是不安全 在 Swarm Services 使用 Secrets docker secret create psql_user psql_user.txt echo &quot;myDBpassWORD&quot; | docker secret create psql_pass - docker service create --name psql --secret psql_user --secret psql_pass -e POSTGRES_PASSWORD_FILE=/run/secrets/psql_pass -e POSTGRES_USER_FILE=/run/secrets/psql_user postgres docker service ps psql 觀察在第幾個 node，跳到那個 node docker exec -it &lt;container&gt; bash cat /run/secrets/psql_user 可以直接看到 psql_user 內容 docker service update --secret-rm 可以使用這個語法移除 secrets 與 Swarm Stacks 一起使用 Secrets docker stack deploy -c docker-compose.yml mydb docker stack rm mydb 與本地端 Docker Compose 一起使用 Secrets docker-compose up -d docker-compose exec psql cat /run/secrets/psql_user 作業：創建一個帶有 Secrets 的 Stack 並且 Deploy 使用上一個作業(compose-assignment-2)的 Drupal compose 檔案 重新命名 image 回到官方版本 drupal:8.2 移除 build: 透過 external: 新增 secret 使用環境變數 POSTGRES_PASSWORD_FILE 透過 cli echo “&lt;pw&gt;” | docker secret create psql-pw - 新增 secret 複製 compose 到 Swarm node1 的 新 yml 檔案 答案：創建一個帶有 Secrets 的 Stack 並且 Deploy 新增 docker-compose.yml 123456789101112131415161718192021222324252627282930313233version: &apos;3.1&apos;services: drupal: image: drupal:8.3.5 ports: - &quot;80:80&quot; volumes: - drupal-modules:/var/www/html/modules - drupal-profiles:/var/www/html/profiles - drupal-sites:/var/www/html/sites - drupal-themes:/var/www/html/themes postgres: image: postgres:9.6 environment: - POSTGRES_PASSWORD=/run/secrets/psql-pw secrets: - psql-pw volumes: - drupal-data:/var/lib/postgresql/datavolumes: drupal-data: drupal-modules: drupal-profiles: drupal-sites: drupal-themes:secrets: psql-pw: external: true echo &quot;123456&quot; | docker secret create psql-pw - docker stack deploy -c docker-compose.yml drupal docker stack ps drupal 完整的 App 生命週期：與單一 Compose 設計的 Dev、Build 和 Deploy 保持夢想 一組 Compose files 給： 本機端 docker-compose up 開發環境 docker-compose up -d docker-compose down 遠端 docker-compose up CI 環境 docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d 遠端 docker stack deploy 產品化環境 docker-compose -f docker-compose.yml -f docker-compose.prod.yml config &gt; output.yml 筆記：docker-compose -f a.yml -f b.yml config 大部分可以運作 筆記：Compose extends：尚無法再 Stacks 裡運作","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://tingsyuanwang.github.io/tags/Docker/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"docker 快速學習自我挑戰 Day6","slug":"docker-快速學習自我挑戰-Day6","date":"2017-07-29T20:50:58.000Z","updated":"2017-07-30T10:36:41.000Z","comments":true,"path":"2017/07/30/docker-快速學習自我挑戰-Day6/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/07/30/docker-快速學習自我挑戰-Day6/","excerpt":"","text":"Docker 服務和 Swarm 的威力： Build-In Orchestration Swarm 模式：Build-In Orchestration 到處都有 container = 新問題 我們如何自動化 container 生命週期？ 我們如何簡單的 scale out/in/up/down？ 我們如何確保我們的 container 在失敗的情況下會自動重建？ 我們如何取代 container 且沒有任何停機時間(藍色/綠色部署)？ 我們如何控制/追蹤哪裡的 container 啟動了？ 我們如何創建 cross-node 虛擬網路？ 我們如何確保只有受信任的伺服器可以運行我們的 container？ 我們如何儲存 secrets、keys、passwords 且將它們放到正確的 container (或是只有那個 container)？ Swarm 模式：Build-In Orchestration Swarm 模式是建立在 Docker 裡面的叢集解決方案 跟早於 1.12 版本的 Swarm “classic” 沒有關係 被 SwarmKit toolkit 新增到 1.12 (2016 年夏天) 被 Stacks and Secrets 做改善後新增到 1.13 (2017 年 1 月) 預設並沒有被啟動，一旦啟動會有以下新指令 docker swarm docker node docker service docker stack docker secret Manager Node API：從客戶端接受指令並創建服務 object Orchestrator：協調服務 object 和創建任務間的 loop Allocator：分配 IP 給任務 Scheduler：分配 node 給任務 Dispatcher：在 Worker Node 報到 Worker Node Worker：連接 dispatcher 來檢查被分配的任務 Executor：執行被分派到 Worker Node 的任務 創建第一個服務且在本地端擴展它 docker info 可以檢查 swarm 是否開啟 docker swarm init --advertise-addr &lt;ip&gt; 啟用 swarm docker swarm init：剛剛發生什麼事情了？ 眾多 PKI 和安全自動化 用於 swarm 的 Root 登入認證被建立 用於第一次的 Manager Node 認證被發佈 Join tokens 被創建 Raft 資料庫被建立，並被用來儲存 root CA、config 和 secrets 在硬碟上預設被加密 (1.13+) 不需要為了額外的 key/value 系統來保有 orchestration/secrets 使用 mutual TLS 的 Managers 中的 Replicates logs 在「控制面板」中 docker service create alpine ping 8.8.8.8 docker service update eloquent_ride --replicas 3 升級 replicas docker container rm -f &lt;container name&gt; 刪除其中一個 container，他也會自動再產生，可以用 docker service ps &lt;service name&gt; 檢查紀錄 創建一個 3-Node Swarm 叢集 創建一個 3-Node Swarm：Host 選項 play-with-docker.com 只需要瀏覽器，但是在四小時後會重置 Docker-machine + VirtualBox 本地端可以免費執行和運作，但是需要一台大於 8GB 記憶體的機器 Digital Ocean + Docker install 大部分很像產品化的設置，但是在學習時要花費 $5-10/node/mouth 註冊自己的 docker-machine 可以用在 Amazon、Azure、DO、Google…等等的配置機器 使用 get.docker.com 到處安裝 docker 開始建立 安裝 Docker-machine 下載指令稿 docker swarm init --advertise-addr &lt;ip&gt; 啟動 swarm 啟動後會產生 join 的指令，把指令貼在其他兩台上面 docker swarm join-token manager 取得 manager 的 token 使用 Overlay Network 進行擴展 當創建網路的時候就選擇 --driver overlay 為了在單一 Swarm 裡面的 container-to-container traffic 在網路建立的時候，選擇性使用的 IPSec (AES) 加密法 docker network create --driver overlay mydrupal 建立一個新網路 docker service create --name psql --network mydrupal -e POSTGRES_PASSWORD=mypass postgres docker service create --name drupal --network mydrupal -p 80:80 drupal 在瀏覽器隨便輸入其中一個 node 的 ip 都可以執行 使用 Routing Mesh 進行擴展 為了將服務分配到適當的任務的 Routes ingress(incoming) 封包 在 Swarm 裡面 span 所有 nodes 使用 Linux 核心裡面的 IPVS 在任務間做 Swarm Services 的負載平衡 兩個方法讓這樣的模式可以執行： 在 Overlay network 裡面運行 container-to-container (使用 VIP) 外部 traffic 進入到 published ports (所有的 nodes listen) docker service create --name search --replicas 3 -p 9200:9200 elasticsearch:2 curl localhost:9200 檢查狀態 這是無狀態的負載平衡 這個負載平衡(LB)位在 OSI 第三層 (TCP)，不是第四層 (DNS) 以上兩種限制都可以透過以下來克服： Nginx 或 HAProxy LB proxy Docker Enterprise Edition，它內建 L4 web proxy 作業：建立一個 Multi-Service Multi-Node Web App 使用 Docker 分散式投票 App 使用課程倉庫裡面的 swarm-app-1 目錄來完成需求 需要 1 volumes, 2 networks, 5 services 建立需要的 commands，讓服務跑起來並測試 App 所有的東西都使用 Docker Hub images，所以在 Swarm 上面不需要任何 data 像很多電腦的東西，這是一半藝術一半科學 答案：建立一個 Multi-Service Multi-Node Web App docker network create -d overlay backend docker network create -d overlay frontend Vote App：docker service create --name vote -p 80:80 --network frontend --replicas 2 dockersamples/examplevotingapp_vote:before Redis：docker service create --name redis --network frontend redis:3.2 Worker：docker service create --name worker --network frontend --network backend dockersamples/examplevotingapp_worker Postgres：docker service create --name db --network backend --mount type=volume,source=db-data,target=/var/lib/postgresql/data postgres:9.4 Result：docker service create --name result --network backend -p 5001:80 dockersamples/examplevotingapp_result:before","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://tingsyuanwang.github.io/tags/Docker/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"docker 快速學習自我挑戰 Day5","slug":"docker-快速學習自我挑戰-Day5","date":"2017-07-29T04:37:49.000Z","updated":"2017-07-29T20:30:06.000Z","comments":true,"path":"2017/07/29/docker-快速學習自我挑戰-Day5/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/07/29/docker-快速學習自我挑戰-Day5/","excerpt":"","text":"讓 Docker Compose 更簡單：Multi-Container 工具 Docker Compose 和 The docker-compose.yml Docker Compose 為什麼：搞清楚 container 之間的關係 為什麼：將 Docker container 的運行設定存成易讀取的檔案 為什麼：一線開發者環境啟動 可以分成兩個相關的事情 YAML 格式描述我們的解決方案選項：containers、networks、volumes CLI 工具 docker-compose 被用在開發/測試自動化且使用 YAML 檔案 docker-compose.yml Compose YAML 格式有自己的版本：1、2、2.1、3、3.1 YAML 檔案可以被用於本地 docker 自動化或…的 docker-compose 命令 docker 已經直接被產品化，叫做 Swarm (從 v.1.13 開始) docker-compose --help docker-compose.yml 是預設名稱，但是docker-compose -f可以任何使用喜歡的名稱 測試基本 Compose 命令 Docker 的 CLI 工具有 Windows/Mac 版本，但是 Linux 需要分開下載 不是一個產品化等級的工具，但是對在本地端開發和測試是理想的 最常使用的兩個命令是 docker-compose up # 設定 volumes/networks 和開啟所有的 containers docker-compose down # 停止所有的 containers 和移除 cont/vol/net 如果你的所有專案都有 Dockerfile 和 docker-compose.yml，那「新的開發者」應該要 git clone github.com/some/software docker-compose up 進入超級管理員模式 sudo -i 安裝 docker-compose 最新版本 curl -L https://github.com/docker/compose/releases/download/1.15.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose 作業：為 Multi-Container 服務建立一個 Compose File 建立一個基本的 compose file 用於 Drupal CMS 網站，Docker Hub 是你的好朋友 使用 Drupal image 並與 postgres imgae 一起使用 使用 ports 使 Drupal 運行在 8080，如此一來可以透過 localhost:8080 來存取網頁 確定有設定 postgres 的 POSTGRES_PASSWORD 用瀏覽器來設定 Drupal 秘訣：Drupal 假定 DB 是 localhost，但是資料庫在另外一個 container，要在 Drupal 設定讓它跟 Docker network 溝通 額外加分：使用 volumes 來儲存 Drupal 的 unique data 答案：為 Multi-Container 服務建立一個 Compose File 建立一個 docker-compose.yml 12345678910111213141516version: &apos;2&apos;services: drupal: image: drupal ports: - &quot;8080:80&quot; volumes: - drupal-modules:/var/www/html/modules \\ - drupal-profiles:/var/www/html/profiles \\ - drupal-sites:/var/www/html/sites \\ - drupal-themes:/var/www/html/themes postgres: image: postgres environment: - POSTGRES_PASSWORD=mypassword docker-compose up 啟動專案 docker-compose down -v 刪除專案 新增 Image Building 到 Compose Files 使用 Compose 來 Build Compose 也可以建立你自己的客製化 images 如果在 cache 沒有找到，會在 docker-compose up 的時候建立起來 也可以透過 docker-compose build 或 docker-compose up --build 重建 對複雜的 builds 非常好，因為它會有很多 vars 或 build args 實作 建立一個 docker-compose.yml，如果找不到 nginx-custom 的 image，則會執行 build 裡的 Dockerfile 1234567891011121314151617version: &apos;2&apos;# based off compose-sample-2, only we build nginx.conf into image# uses sample site from https://startbootstrap.com/template-overviews/agency/services: proxy: build: context: . dockerfile: nginx.Dockerfile image: nginx-custom ports: - &apos;80:80&apos; web: image: httpd volumes: - ./html:/usr/local/apache2/htdocs/ docker-compose up docker-compose down docker-compose down --rmi local 在關閉的時候同時刪除 image 作業：Run-Time Image Building 和 Multi-Container 開發的 Compose 為本地端測試建立一個客製化的 drupal image Compose 並不是只有給開發者使用，測試 apps 是很簡單/有趣的 或許你在學習成為 Drupal 的管理者，或者是軟體測試者 從上一次的作業開始 Compose file 在目錄 compose-assignment-2 建立你自己的 Dockerfile 和 docker-compose.yml 使用 drupal image 並與 postgres image 一起使用，就像之前一樣 使用目錄裡的 README.md 取得更多細節 答案：Run-Time Image Building 和 Multi-Container 開發的 Compose 建立 Dockerfile 1234567891011FROM drupal:8.2RUN apt-get update &amp;&amp; apt-get install -y git \\ &amp;&amp; rm -rf /var/lib/apt/lists/*WORKDIR /var/www/html/themesRUN git clone --branch 8.x-3.x --single-branch --depth 1 https://git.drupal.org/project/bootstrap.git \\ &amp;&amp; chown -R www-data:www-data bootstrapWORKDIR /var/www/html 建立 docker-compose.yml 1234567891011121314151617181920212223242526version: &apos;2&apos;services: drupal: image: custom-drupal build: . ports: - &quot;8080:80&quot; volumes: - drupal-modules:/var/www/html/modules \\ - drupal-profiles:/var/www/html/profiles \\ - drupal-sites:/var/www/html/sites \\ - drupal-themes:/var/www/html/themes postgres: image: postgres:9.6 environment: - POSTGRES_PASSWORD=mypassword volumes: - drupal-data:/var/lib/postgresql/datavolumes: drupal-data: drupal-modules: drupal-profiles: drupal-sites: drupal-themes:","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://tingsyuanwang.github.io/tags/Docker/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"docker 快速學習自我挑戰 Day4","slug":"docker-快速學習自我挑戰-Day4","date":"2017-07-28T07:32:17.000Z","updated":"2017-07-28T12:02:05.000Z","comments":true,"path":"2017/07/28/docker-快速學習自我挑戰-Day4/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/07/28/docker-快速學習自我挑戰-Day4/","excerpt":"","text":"Container 生命週期和持久性數據：Volumes, Volumes, Volumes Container 生命週期和持久性數據 學習重點 定義持久性數據的問題 Container 的關鍵觀念：immutable，ephemeral 學習使用 Data Volumes 學習使用 Bind Mounts 作業 觀念 Container 通常是 immutable 而且 ephemeral 「immutable infrastructure」：只重新部署 container，從來都不改變 這些都是理想的情境，但是 databases 或 unique data 呢？ Docker 給我們一些特色來確保這些「separation of concerns」 這些被稱為「persistent data」 兩種方法：Volumes 和 Bind Mounts Volumes：製作一個特別的地點在 container UFS(Unit File System) 之外 Bind Mounts：連結 container 路徑到 host 路徑 持久性數據：Data Volumes Dockerfile 裡面的 VOLUME 命令 docker volume prune 可以清除未使用的 volume docker container run -d --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=True mysql 使用 mysql 的 image 開啟一個 container docker container inspect mysql 查看 mysql 狀態，Mounts 可以看到路徑 docker volume inspect {Volume Name} 可以看到 Mountpoint 路徑 docker container rm {container name} 將 container 都刪除之後，使用 docker volume ls 觀察，會發現 Volume 都還會在 docker container run -d --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=True -v mysql-db:/var/lib/mysql mysql -v 的指令在這邊表示外接 volume，volume 的名稱為 mysql-db docker volume create 必須要在 docker container run 之前執行，這樣才能選擇自訂的 drives 和 labels 持久性數據：Bind Mounting Map host 檔案或目錄到 container 的檔案或目錄 基本上只有兩個位址會指定到相同的檔案 省略 UFS 和 host 檔案覆寫任何 container 裡的東西 不能在 Dockerfile 使用，必須在 container run 的時候使用 ... run -v /Users/vincent/stuff:/path/container (Mac/Linux) ... run -v //c/Users/vincent/stuff:/path/container (Windows) docker container run -d --name nginx -p 80:80 -v $(pwd):/usr/share/nginx/html nginx 新增一個 container 並指定 volume 到現在的路徑 $(pwd) docker container run -d --name nginx2 -p 8080:80 nginx 再新增一個 container 做比較 docker container exec -it nginx bash 用 bash 連進去 nginx touch testme.txt 在本來的目錄新增檔案，最後檔案會出現在 container 裡面，因為目錄是共用的 作業：Database 與命名好的 Volume 一起升級 讓 database 跟 container 一起升級 創建一個 postgres container 並將 volume 命名為 psql-data，且使用版本 9.6.1 使用 Docker Hub 學習 VOLUME 必要路徑和版本，然後運行它 檢查 logs 並停止 container 再創建一個 postgres container 並使用同個 volume 名稱，且使用版本 9.6.2 透過檢查 logs 來驗證 (這些只在 patch 版本能運作，大部分 SQL 資料庫需要手動設定指令來升級資料庫到主要/次要版本，換言之，這是資料庫的限制，而非 container 的限制) 答案：Database 與命名好的 Volume 一起升級 docker container run -d --name psql -v psql:/var/lib/postgresql/data postgres:9.6.1 docker container logs -f psql -f 代表持續 follow docker container stop psql docker container run -d --name psql2 -v psql:/var/lib/postgresql/data postgres:9.6.2 docker container logs psql2 作業：編輯與 Bind Mounts 一起運行的 container 的程式碼 使用 Jekyll 「靜態網頁生成器」來啟動本地端的 web server 不一定要成為 web 開發者：這是一個橋接在本地檔案存取和運行在 container 的 apps 間的 gap 的範例 來源程式碼在 bindmount-sample-1 的課程 repo 裡面 我們會用 host 上的原生工具當作編輯器來編輯檔案 Container 偵測到 host 端檔案改變，會到 web server 更新 使用 docker run -p 80:4000 -v $(pwd):/site bretfisher/jekyll-serve 開啟 container 重整瀏覽器來觀察變化 修改 _posts\\ 且重整瀏覽器來觀察變化 答案：編輯與 Bind Mounts 一起運行的 container 的程式碼 使用 docker run -p 80:4000 -v $(pwd):/site bretfisher/jekyll-serve 開啟 container 直接編輯目錄底下的 _posts\\ 並重整瀏覽器，網站就會直接修改 Jekyll 靜態網頁生成器","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://tingsyuanwang.github.io/tags/Docker/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"docker 快速學習自我挑戰 Day3","slug":"docker-快速學習自我挑戰-Day3","date":"2017-07-26T13:34:35.000Z","updated":"2017-07-29T05:05:00.000Z","comments":true,"path":"2017/07/26/docker-快速學習自我挑戰-Day3/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/07/26/docker-快速學習自我挑戰-Day3/","excerpt":"","text":"如何找到且使用 container images 什麼是 image (什麼不是)？ 章節簡介 關於 images，container 的基礎要件 什麼是 image (什麼不是) 使用 Docker Hub 註冊 管理本地 image cache 建立自己的 image 什麼是 image (什麼不是) App binaries and dependencies image data 的元數據和如何使用 image 官方定義：「image 是根目錄系統變化的有序集合，而且對 container runtime 的使用有相應的執行參數」 不是完整的操作系統，沒有核心、核心模組(例如：drivers) 小的跟一個檔案(app binary)一樣，就像 Go 語言的 static binary 大的跟帶有 apt、Apache、PHP和更多被安裝軟體的 Ubuntu 一樣 強大的 hub：使用 Docker Hub Registry images Docker Hub 的基礎 找到官方和其它很棒的公開 image 下載 images 和 image tags 的基礎 Docker Hub：container 版的 apt 套件系統 官方 image 和如何使用它 如何辨別好的公開 image 使用不同 base 的 image，像是 Debian 或 Alpine Images 和他們的 Layers：找出 Image Cache Image layers Union file system：顯示出一系列 file system 的改變，跟實際的系統一樣 history 和 inspect：了解 image 如何構成 copy on write：container 如何在 image 上執行 Image 是由 file system changes 和 metadata 組成的 每一層都被獨一無二的被辨識而且只存在 host 一次 這樣的模式可以省下 host 的空間和 push/pull 的傳送時間 Container 只是在 image 上層的一個單一 read/write 層 docker image history 和 inspect 可以幫助我們了解這些資訊 Image Tagging 和推送到 Docker Hub 學習前必須要會的： 了解 container 和 image 了解 image layer 的基礎 了解 Docker Hub 的基礎 這個章節要學的 都在講 image tags 如何上傳到 Docker Hub Image ID vs. Tag cat .docker/config.json 確認已認證登入 docker image tag nginx tingsyuanwang/nginx 給 image tag 到 Docker Hub 的帳戶 docker image push tingsyuanwang/nginx 推送到自己的 Docker Hub docker image tag tingsyuanwang/nginx tingsyuanwang/nginx:testing 給定名為 testing 的 tag docker image push tingsyuanwang/nginx:testing 上傳 image，實際上不會全部上傳，只上傳 tag 回顧 適時的 tagging images 給 image tag 是為了要上傳到 Docker Hub Tagging 是如何和 image ID 做關聯的 Latest Tag 只是預設標籤，並不代表最新 從 Docker cli 登入 Docker Hub 如何創建私有的 Docker Hub images 建立 images：Dockerfile 的基礎 docker build -f some-dockerfile 創建 Dockerfile ENV NGINX_VERSION 1.13.1-1~stretch 這邊的 ENV 是用來設定環境變數，這是對建立或運行 container 去設定 key 和 value 的主要方法 &amp;&amp; 是為了確保這些指令可以符合進一個單一 layer RUN ln -sf /dev/stdout /var/log/nginx/access.log \\ 這行是關於 log 記錄檔，container 只要確保所有我們想要抓的資訊都有在 stdout 的 log 記錄檔案裡面，docker engine 本身就有 logging drivers 可以去控制 host 上所有 containers 的 logs EXPOSE 80 443 預設來說，container 裡面沒有 TCP 或 UDP port 是開啟的，除非在這邊定義，EXPOSE 指令並不會讓 host 上的 port 開啟，要在執行 docker run -p 的時候設定 host 的 port CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;] CMD是必填參數，這是最後的指令，且在每次開啟、重啟或暫停新的 container 都會執行的命令 建立 images：運行 Docker Builds 新增一個 Dockerfile 到根目錄 docker image build -t customnginx . 用 dockerfile 新建一個 image 建立 images：擴展官方 image WORKDIR /usr/share/nginx/html 這個就是在跑 cd 的語法 COPY index.html index.html 複製本地檔案到 docker container 裡面 docker image build -t nginx-with-html . 執行檔案 docker container run -p 80:80 --rm nginx-with-html 用剛剛建立出來的 image 來執行 作業：建立自己的 Dockerfile 且使用它運行 container Dockerfiles 是 process workflow 和藝術組合而成的 使用已存在的 Node.js app 並把它 docker 化 製作 Dockerfile，建立它，測試它，上傳它，(刪除它)，並運行它 預期這樣的過程是反覆的，很少能夠一次就完成它的 細節都在 dockerfile-assignment-1/Dockerfile 使用官方 node 6.x image 的 alpine 版本 預期結果會呈現在 http://localhost 的網頁 標籤並推送到自己的 Docker Hub 從本機的 cache 移除 image，並從 Hub 重新運行一次 解答：建立自己的 Dockerfile 且使用它運行 container Dockerfile 1234567891011121314151617181920# Instructions from the app developer# - you should use the &apos;node&apos; official image, with the alpine 6.x branchFROM node:6-alpine# - this app listens on port 3000, but the container should launch on port 80# so it will respond to http://localhost:80 on your computerEXPOSE 3000# - then it should use alpine package manager to install tini: &apos;apk add --update tini&apos;RUN apk add --update tini# - then it should create directory /usr/src/app for app files with &apos;mkdir -p /usr/src/app&apos;RUN mkdir -p /usr/src/app# - Node uses a &quot;package manager&quot;, so it needs to copy in package.json fileCOPY package.json package.json# - then it needs to run &apos;npm install&apos; to install dependencies from that fileRUN npm install &amp;&amp; npm cache clean# - to keep it clean and small, run &apos;npm cache clean --force&apos; after above# - then it needs to copy in all files from current directorCOPY . .# - then it needs to start container with command &apos;tini -- node ./bin/www&apos;CMD [ &quot;tini&quot;, &quot;--&quot;, &quot;node&quot;, &quot;./bin/www&quot;]# - in the end you should be using FROM, RUN, WORKDIR, COPY, EXPOSE, and CMD commands docker build -t testnode . 使用 Dockerfile 建立 image docker container run --rm -p 80:3000 testnode 使用 image 建立 container docker tag testnode tingsyuanwang/testing-node 修改 tag docker push tingsyuanwang/testing-node 將檔案推送到 Docker Hub docker image rm tingsyuanwang/testing-node 將本地端的 node image 移除 docker container run --rm -p 80:3000 tingsyuanwang/testing-node 運行 container 讓 docker 自動從遠端抓回來","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://tingsyuanwang.github.io/tags/Docker/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"docker 快速學習自我挑戰 Day2","slug":"docker-快速學習自我挑戰-Day2","date":"2017-07-24T07:09:19.000Z","updated":"2017-07-29T05:06:25.000Z","comments":true,"path":"2017/07/24/docker-快速學習自我挑戰-Day2/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/07/24/docker-快速學習自我挑戰-Day2/","excerpt":"","text":"安裝與版本 Windows Container：Docker 不再只能在 Linux 上面執行 目前 17 版已經可以在 windows 上執行 docker，但有些功能不能使用，包括 Swarm Overlay、Secret…等等 可以參考以下影片 Windows Containers and Docker: 101 Beyond \\ - the path to Windows and Linux parity in Docker Docker + Microsoft - Investing in the Future of your Applications 作業 - 管理多個 container Docker 小幫手 (1) 官方文件 (2) --help 運行 nginx、MySQL、httpd(apache) server 運行以上軟體，並使用 --detached (或 -d)，並用 --name 命名 nginx 要使用 80:80，httpd 用 8080:80，MySQL 用 3306:3306 當執行 MySQL，使用 --environment (或 -e) 將 MYSQL_RANDOM_ROOT_PASSWORD=yes 參數傳進去 container 在 MySQL 使用 docker container logs 來找到創建時所產生的隨機密碼 使用 docker container stop 和 docker container rm 將全部的資料清除 在清除之前，使用 docker container ls 確定資料的狀態是否正確 可以使用 curl localhost 會出現網頁 index 的檔案 Container 裡面發生了什麼事情呢？CLI 進程監控 docker container top 某一個 container 的進程清單 docker container inspect 某一個 container 的設定細節 docker container stats 所有 container 的效能統計 在 Container 裡面取得 Shell：不需要使用 SSH docker container run -it 以交互方式開啟新的 container docker container exec -it 在已存在的 container 執行額外的 command 在眾多 container 裡面有不同的 Linux 發行版本 docker container run -it --name proxy nginx bash 進去 container 裡面 docker container run -it --name ubuntu ubuntu 直接執行，不需加 bash 結果會一樣，因為預設就是 bash docker container start -ai ubuntu 如果要重新開機，可以使用這個指令 Alpine Linux：一個小型且以安全為目的的 Linux 分支 docker pull alpine 下載最新的 alpine docker container run -it alpine sh 因為沒有 bash，所以用 sh 套件管理基本 Docker 網路：眾多 Container 裡面的私有和公有網路的溝通觀念 觀念 docker container run -p p 就是你機器上的 port 對於本地端的開發/測試，網路通常『只是堪用』 docker container port &lt;container&gt; 這個指令可以快速輸出哪一個 port 為這個 container 開啟 學習 Docker 網路、虛擬網路和封包如何傳遞 了解網路封包如何在 Docker 之間移動 預設 Docker 網路 每一個 container 都會連接到虛擬網路 「橋(bridge)」 每一個虛擬網路路由都會透過 NAT 防火牆轉址到 host IP 在虛擬網路上所有的 container 都可以互相溝通，而不需要 -p 最好的練習就是對個別的 app 新增虛擬網路 MySQL 和 php/apache 用「my_web_app」網路 Mongo 和 nodejs 用 「my_api」網路 「含電池，但可拆卸 (battery included, But Removable)」 在多數情況下，預設會運行的很好，但很容易換掉客製化的 ports 新建虛擬網路 連結 container 們到大於1(或者沒有)的虛擬網路 省略虛擬網路且使用 host IP (–net=host) 使用不同的 Docker 網路驅動來取得新的能力 錯誤修改：Nginx 官方 image 移除 Ping 功能 因為最新 2017 官方修改 ping 功能，所以把 docker container run &lt;stuff&gt; nginx，要把 nginx 取代為 nginx:alpine，這樣就可以繼續使用 ping 的 command Docker 網路：虛擬網路的 CLI 管理 docker network ls 顯示所有網路 docker network inspect 檢查特定網路 docker network create --driver 創建一個網路 docker network connect 連結一個網路到 container docker network disconnect 從 container 移除一個網路 在同個 Docker 網路創建前端/後端應用，這樣他們之間的溝通就不會留給 host 所有的在外部暴露的 port 預設會關閉，需要手動使用 -p 打開，這樣才有更好的預設安全 接下來後面要提到的 Swarm 和 Overlay 網路更好 Docker 網路：DNS 和 container 如何找到彼此 了解 DNS 是如何成為容易交互溝通的關鍵 觀察客製化的網路預設是如何運作的 學習如何使用 --link 來讓 DNS 在預設橋接網路生效 請遺忘 IP：固定 ip 和使用 ip 來讓 container 之間溝通是一種反面模式，盡可能地避免這樣的事情發生 Docker DNS：Docker daemon 有內建的 DNS server，而Container 會預設使用它 DNS 預設名稱：Docker 預設 hostname 到 container 的名字，但是還是可以設定 aliases 如果使用客製網路，友善的 DNS 名稱是內建的 這些使用 Docker Compose 都會更簡單 作業：使用 container 做 CLI testing 知道如何使用 -it 在 container 裡面使用 shell 了解基本的 linux distribution，像是 Ubuntu 和 CentOS 了解如何執行 container 作業 使用不同的 distro container 來檢查 curl cli 工具版本 使用兩個不同的終端視窗來開啟 bash，使用 -it 來啟動 centos:7 和 ubuntu:14.04 學習 docker container --rm 選項，這樣可以 save cleanup 確定最新版本的 curl 有安裝在相對應的 distro ubuntu: apt-get update &amp;&amp; apt-get install curl centos: yum update curl 檢查 curl --version 作業：DNS Round Robin 測試 了解如何使用 -it 在 container 裡面使用 shell 了解基本的 linux distribution，像是 Ubuntu 和 CentOS 了解如何執行 container 了解 DNS 紀錄的基礎 從 Docker Engine 1.11 之後，我們可以創建很多 container 到一個網路且傳遞到相關的 DNS 位址 創建一個新的虛擬網路(預設 bridge driver) 從 elasticsearch:2 的 image 創建兩個 container 搜尋和使用 --net-alias search，當我們創建 container 的時候，同時給他們額外的 DNS name 去響應 執行 alpine nslookup search 並加上 --net 來觀察兩個使用相同 DNS 名稱的 container 列表 多次執行 centos curl -s search:9200 並加上 --net，直到觀察到名稱欄位出現 完成作業 執行兩次 docker container run -d --net dude --net-alias search elasticsearch:2，開啟兩個 container docker container run --rm --net dude alpine nslookup search 觀察兩個使用相同 DNS 名稱的 container 列表 docker container run --rm --net dude centos curl -s search:9200","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://tingsyuanwang.github.io/tags/Docker/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"docker 快速學習自我挑戰 Day1","slug":"docker-快速學習自我挑戰-Day1","date":"2017-07-22T18:55:38.000Z","updated":"2017-07-29T05:07:39.000Z","comments":true,"path":"2017/07/23/docker-快速學習自我挑戰-Day1/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/07/23/docker-快速學習自我挑戰-Day1/","excerpt":"","text":"課程 Roadmap Part I Install Docker Terminal/CLI Tools Download the Repo (github) Part II CURD of Containers Just A Process Shell into Container Docker Networking Part III Use Docker Hub Make Dockerfiles Push Custom Images Build Images Part IV Container Lifetime Docker Volumes Build Mounts Part V Do’s and Don’ts docker-compose.yml docker-compose up Part VI (BIG ONE) Build A Cluster Overlay Networks Routing Mesh Swarm Services Stacks Secrets App Deploy Lifecycle 安裝與版本 安裝 Win10 Win8.1 以前的版本 注意：範例所使用的 http://localhost，必須要改為 http://192.168.99.100 Mac，如果使用低於版本 OSX Yosemite 10.10.3，改用 Toolbox 千萬不要使用 apt/yum install docker，請使用自動化安裝 curl -sSL https://get.docker.com/ | sh 版本 Docker Engine 現在改為 Docker CE (Community Edition) Docker Data Center 現在改為 Docker EE (Enterprise Edition) Docker 的版本改為 YY.MM 的命名方式 創建和使用 Container 檢查 Docker 的安裝和設定 docker version 檢查版本 Client 的版本是 Command Line 的版本，Server 則被稱為 docker engine，docker engine 是在背景執行的 daemon，而我們執行的 Command Line 就跟伺服器的 API 來進行溝通， docker info 取得更詳細的資訊 docker 指令格式 docker &lt;command&gt; &lt;sub-command&gt; (options) 開始使用 Nginx Server Image 是我們想要跑的應用程式 Container 是 image 所產生的 instance，並用進程的方式執行 可以使用同個 image 來產生很多 Container docker container run --publish 80:80 nginx 新建 ngix server，執行完成之後可以直接用瀏覽器看到 nginx，語法背後執行的邏輯如下： 從 Docker Hub 下載「nginx」的 image 從這個 image 開始一個新的 container 開啟本機端的 80 port 將 80 port 路由到 container 的 80 port docker container run --publish 80:80 --detach nginx 加上 detach 可以讓 docker 在背景執行，這個指令會 echo 出 container ID docker container ls 列出所有的 container docker container stop 889 停止某個 container，stop 後面加上 id 前三碼 (只要是唯一即可，若三碼非唯一，則用四碼，後面以此類推) docker container ls -a 列出所有(包含關閉的) container 當使用 run 的時候，一定會新增新的 container，但是當使用 start 的時候，則會開啟一個存在但關閉的 container docker container run --publish 80:80 --detach --name webhost nginx 新增客製化名稱的 container docker container logs webhost 檢查 container 名稱為「webhost」的 log 檔 docker container top webhost 檢查 container 名稱為「webhost」的 process docker container rm 2e5 889 dc1 刪除所選的 container 如果有在執行中的 container，則要強制刪除 docker container rm -f 2e5 “docker container run” 做了什麼事情？ 在本地 image cache 搜尋 image 如果找不到，則搜尋遠端的 image repository (預設為 Docker Hub) 下載最新版本 (nginx：預設為最新版，可以使用 nginx:版本號來取得所需版本) 根據拿到的 image 來創建新的 container，並準備開始 在 docker engine 裡面給 container 私有網路上的虛擬 ip 開啟 host 端的 80 port 並轉址到 container 的 80 port，如果沒有使用 --publish 則不會打開任何 port 藉由使用 image Dockerfile 裡的 CMD 開啟 container docker container run --publish 8080:80 --name webhost -d nginx:1.11 nginx -T host port 可以改為 8080 可修改 nginx 的版本為 1.11 nginx -T 修改開啟時的 CMD Container VS. VM Container 不是縮小版的 VM Container 只是 Process Container 能夠存取的資源有限 當 Process 暫停的時候離開 用命令提示字元了解更多 docker run --name mongo -d mongo 新建一個 mongo DB 的 container 並在背景執行 ps aux 檢視所有正在執行的程式，docker top mongo 檢視服務的狀態 ps aux | grep mongo 搜尋 mongo 的服務 docker stop mongo 關閉 mongo，檢視和搜尋都會找不到該服務 docker start mongo 再次打開 mongo，檢視和搜尋都又會再找到該服務","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://tingsyuanwang.github.io/tags/Docker/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Nodejs 快速學習自我挑戰 Day4","slug":"Nodejs-快速學習自我挑戰-Day4","date":"2017-06-13T12:46:04.000Z","updated":"2017-06-14T03:21:58.000Z","comments":true,"path":"2017/06/13/Nodejs-快速學習自我挑戰-Day4/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/06/13/Nodejs-快速學習自我挑戰-Day4/","excerpt":"","text":"Weather App 進階 Promise 新增 asyncAdd function，用 new Promise 新增 promise，然後再用 .then 輸出結果，最後用 .catch 把錯誤一次輸出(避免第二次 errorMessage 跑的是 success function) 1234567891011121314151617181920var asyncAdd = (a, b) =&gt; &#123; return new Promise((resolve, reject) =&gt; &#123; setTimeout(() =&gt; &#123; if (typeof a === &apos;number&apos; &amp;&amp; typeof b === &apos;number&apos;) &#123; resolve(a + b); &#125; else &#123; reject(&apos;Arguments must be numbers&apos;); &#125; &#125;, 1500); &#125;);&#125;;asyncAdd(5, &apos;7&apos;).then((res) =&gt; &#123; console.log(&apos;Results: &apos;, res); return asyncAdd(res, 33);&#125;).then((res) =&gt; &#123; console.log(&apos;Should be 45&apos;, res);&#125;).catch((errorMessage) =&gt; &#123; console.log(errorMessage);&#125;); 使用 Promise 取代 callback 整合 geocode 123456789101112131415161718192021222324252627282930const request = require(&apos;request&apos;);var geocodeAddress = (address) =&gt; &#123; return new Promise((resolve, reject) =&gt; &#123; var encodedAddress = encodeURIComponent(address); request (&#123; url: `https://maps.googleapis.com/maps/api/geocode/json?address=$&#123;encodedAddress&#125;`, json: true &#125;, (error, response, body) =&gt; &#123; if (error) &#123; reject(&apos;Unable to connect to Google servers&apos;); &#125; else if (body.status === &apos;ZERO_RESULTS&apos;) &#123; reject(&apos;Unable to find that address&apos;); &#125; else if (body.status === &apos;OK&apos;) &#123; resolve(&#123; address: body.results[0].formatted_address, latitude: body.results[0].geometry.location.lat, longitude: body.results[0].geometry.location.lng, &#125;); &#125; &#125;); &#125;);&#125;;geocodeAddress(&apos;19146&apos;).then((location) =&gt; &#123; console.log(JSON.stringify(location, undefined, 2));&#125;, (errorMessage) =&gt; &#123; console.log(errorMessage);&#125;); 讓 Weather App 使用 Promise axios 套件 安裝 axios npm install axios@0.13.1 --save 使用 axios，先使用 .then 取得地址，然後再用一次 .then 取得溫度，最後用 .catch 處理錯誤的出現 1234567891011121314151617181920212223var encodedAddress = encodeURIComponent(argv.address);var geocodeUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=$&#123;encodedAddress&#125;`;axios.get(geocodeUrl).then((response) =&gt; &#123; if (response.data.status === &apos;ZERO_RESULTS&apos;) &#123; throw new Error(&apos;Unable to find that address.&apos;); &#125; var lat = response.data.results[0].geometry.location.lat; var lng = response.data.results[0].geometry.location.lng; var weatherUrl = `https://api.darksky.net/forecast/key/$&#123;lat&#125;, $&#123;lng&#125;`; console.log(response.data.results[0].formatted_address); return axios.get(weatherUrl);&#125;).then((response) =&gt; &#123; var temperature = response.data.currently.temperature; var apparentTemperature = response.data.currently.apparentTemperature; console.log(`It&apos;s currently $&#123;temperature&#125;, It feels like $&#123;apparentTemperature&#125;.`);&#125;).catch((e) =&gt; &#123; if (e.code === &apos;ENOTFOUND&apos;) &#123; console.log(&apos;Unable to connect to API servers.&apos;); &#125; else &#123; console.log(e.message); &#125;&#125;); Weather App 額外的功能 (思路) 除了 Current Temperature 之外，可以從 Weather API 讀取更多資訊 如果讀不到位置，可以使用預設的地點 搜尋完的結果用 filesystem 寫入檔案 網頁伺服器及應用程式部署 Hello Express Express 官方網站 安裝 express npm install express@4.14.0 --save 在根目錄新增 server.js 123456789101112131415161718192021222324252627const express = require(&apos;express&apos;);var app = express();app.get(&apos;/&apos;, (req, res) =&gt; &#123; // res.send(&apos;&lt;h1&gt;Hello Express!&lt;/h1&gt;&apos;); res.send(&#123; name: &apos;Andrew&apos;, likes: [ &apos;Biking&apos;, &apos;Cities&apos; ] &#125;);&#125;);app.get(&apos;/about&apos;, (req, res) =&gt; &#123; res.send(&apos;About Page&apos;);&#125;);// /bad - send back json with errorMessageapp.get(&apos;/bad&apos;, (req, res) =&gt; &#123; res.send(&#123; errorMessage: &apos;Unable to handle request&apos; &#125;);&#125;);app.listen(3000); 創建網頁伺服器 新增 public/help.html 1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;Help Page&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Help Page&lt;/h1&gt; &lt;p&gt;Some text here&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 使用 app.use 指定 public 目錄 app.use(express.static(__dirname + '/public')); 當伺服器啟動，傳送訊息 123app.listen(3000, () =&gt; &#123; console.log(&apos;Server is up on port 3000&apos;);&#125;); 呈現 template 和 data handlebars.js 安裝 handlebars.js npm install hbs@4.0.0 --save 設定 view engine app.set('view engine', 'hbs'); 新增 views/about.hbs 123456789101112131415&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;Help Page&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;About Page&lt;/h1&gt; &lt;p&gt;Some text here&lt;/p&gt; &lt;footer&gt; &lt;p&gt;Copyright 2017&lt;/p&gt; &lt;/footer&gt;&lt;/body&gt;&lt;/html&gt; 使用 render 取得頁面 123app.get(&apos;/about&apos;, (req, res) =&gt; &#123; res.render(&apos;about.hbs&apos;);&#125;); 動態存取資料，傳送值到 view 123456app.get(&apos;/about&apos;, (req, res) =&gt; &#123; res.render(&apos;about.hbs&apos;, &#123; pageTitle: &apos;About Page&apos;, currentYear: new Date().getFullYear() &#125;);&#125;); 在 view 取得值 123456&lt;h1&gt;&#123;&#123;pageTitle&#125;&#125;&lt;/h1&gt;&lt;p&gt;Some text here&lt;/p&gt;&lt;footer&gt; &lt;p&gt;Copyright &#123;&#123;currentYear&#125;&#125;&lt;/p&gt;&lt;/footer&gt;","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Nodejs","slug":"Nodejs","permalink":"https://tingsyuanwang.github.io/tags/Nodejs/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Nodejs 快速學習自我挑戰 Day3","slug":"Nodejs-快速學習自我挑戰-Day3","date":"2017-06-11T21:25:35.000Z","updated":"2017-06-13T12:43:44.000Z","comments":true,"path":"2017/06/12/Nodejs-快速學習自我挑戰-Day3/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/06/12/Nodejs-快速學習自我挑戰-Day3/","excerpt":"","text":"Weather App 美化 Printing Objects 將 Printing Object 用 stringify 處理 console.log(JSON.stringify(body, undefined, 2)); Http Request 觀看 response 資訊，成功的話 Http status 會是 200 console.log(JSON.stringify(response, undefined, 2)); 觀看是否有錯誤 console.log(JSON.stringify(error, undefined, 2)); User Input 編碼 安裝 Yargs npm install yargs@4.8.1 --save 使用 yargs 新增 command 以及其他設定 123456789101112const argv = yargs .options(&#123; a: &#123; demand: true, alias: &apos;address&apos;, describe: &apos;Address to fetch weather for&apos;, string: true &#125; &#125;) .help() .alias(&apos;help&apos;, &apos;h&apos;) .argv; 將輸入編碼 var encodedAddress = encodeURIComponent(argv.address); 將編碼好的地址傳進 request 1url: `https://maps.googleapis.com/maps/api/geocode/json?address=$&#123;encodedAddress&#125;` Callback Errors 處理 處理錯誤 1234567891011121314request (&#123; url: `https://maps.googleapis.com/maps/api/geocode/json?address=$&#123;encodedAddress&#125;`, json: true&#125;, (error, response, body) =&gt; &#123; if (error) &#123; console.log(&apos;Unable to connect to Google servers&apos;); &#125; else if (body.status === &apos;ZERO_RESULTS&apos;) &#123; console.log(&apos;Unable to find that address&apos;); &#125; else if (body.status === &apos;OK&apos;) &#123; console.log(`Address: $&#123;body.results[0].formatted_address&#125;`); console.log(`Latitude: $&#123;body.results[0].geometry.location.lat&#125;`); console.log(`Longitude: $&#123;body.results[0].geometry.location.lng&#125;`); &#125;&#125;); 將 Callback 放到其他地方 新增 geocode/geocode.js 12345678910111213141516171819202122const request = require(&apos;request&apos;);var geocodeAddress = (address) =&gt; &#123; var encodedAddress = encodeURIComponent(address); request (&#123; url: `https://maps.googleapis.com/maps/api/geocode/json?address=$&#123;encodedAddress&#125;`, json: true &#125;, (error, response, body) =&gt; &#123; if (error) &#123; console.log(&apos;Unable to connect to Google servers&apos;); &#125; else if (body.status === &apos;ZERO_RESULTS&apos;) &#123; console.log(&apos;Unable to find that address&apos;); &#125; else if (body.status === &apos;OK&apos;) &#123; console.log(`Address: $&#123;body.results[0].formatted_address&#125;`); console.log(`Latitude: $&#123;body.results[0].geometry.location.lat&#125;`); console.log(`Longitude: $&#123;body.results[0].geometry.location.lng&#125;`); &#125; &#125;);&#125;;module.exports.geocodeAddress = geocodeAddress; 在 app.js 引入 geocode const geocode = require('./geocode/geocode'); 在 app.js 使用 geocode geocode.geocodeAddress(argv.address); 使用 callback 來得到結果 1234567geocode.geocodeAddress(argv.address, (errorMessage, results) =&gt; &#123; if (errorMessage) &#123; console.log(errorMessage); &#125; else &#123; console.log(JSON.stringify(results, undefined, 2)) &#125;&#125;); 在 geocode 使用 callback 1234567891011121314151617181920var geocodeAddress = (address, callback) =&gt; &#123; var encodedAddress = encodeURIComponent(address); request (&#123; url: `https://maps.googleapis.com/maps/api/geocode/json?address=$&#123;encodedAddress&#125;`, json: true &#125;, (error, response, body) =&gt; &#123; if (error) &#123; callback(&apos;Unable to connect to Google servers&apos;); &#125; else if (body.status === &apos;ZERO_RESULTS&apos;) &#123; callback(&apos;Unable to find that address&apos;); &#125; else if (body.status === &apos;OK&apos;) &#123; callback(undefined, &#123; address: body.results[0].formatted_address, Latitude: body.results[0].geometry.location.lat, Longitude: body.results[0].geometry.location.lng, &#125;); &#125; &#125;);&#125;; 跟天氣搜索的 API 串接 forecast.io 開發者區 Forecast Request api 格式 https://api.darksky.net/forecast/[key]/[latitude],[longitude] request weather API 123456789101112const request = require(&apos;request&apos;);request(&#123; url: &apos;https://api.darksky.net/forecast/[key]/[latitude],[longitude]&apos;, json: true&#125;, (error, response, body) =&gt; &#123; if (!error) &#123; console.log(body.currently.temperature); &#125; else &#123; console.log(&apos;Unable to fetch weather.&apos;); &#125;&#125;); 把 callback 串連在一起 新增 weather/weather.js 12345678910111213141516171819const request = require(&apos;request&apos;);var getWeather = (lat, lng, callback) =&gt; &#123; request(&#123; url: `https://api.darksky.net/forecast/5c410165ac4d6fd40bb36232d16d7c8e/$&#123;lat&#125;, $&#123;lng&#125;`, json: true &#125;, (error, response, body) =&gt; &#123; if (!error) &#123; callback(undefined, &#123; temperature: body.currently.temperature, apparentTemperature: body.currently.apparentTemperature &#125;); &#125; else &#123; callback(&apos;Unable to fetch weather.&apos;); &#125; &#125;);&#125;;module.exports.getWeather = getWeather; 將兩個 function 合在一起 1234567891011121314geocode.geocodeAddress(argv.address, (errorMessage, results) =&gt; &#123; if (errorMessage) &#123; console.log(errorMessage); &#125; else &#123; console.log(results.address); weather.getWeather(results.latitude, results.longitude, (errorMessage, weatherResults) =&gt; &#123; if (errorMessage) &#123; console.log(errorMessage); &#125; else &#123; console.log(`It&apos;s currently $&#123;weatherResults.temperature&#125;. it feels like $&#123;weatherResults.apparentTemperature&#125;.`); &#125; &#125;); &#125;&#125;); ES6 Promises Promise 提供兩種 function 可以使用：resolve 和 reject 123var somePromise = new Promise((resolve, reject) =&gt; &#123; resolve(&apos;Hey. It worked!&apos;);&#125;); .then 對 成功或錯誤的 cases 提供 callback function 12345somePromise.then((message) =&gt; &#123; console.log(&apos;Success: &apos;, message);&#125;, (errorMessage) =&gt; &#123; console.log(&apos;Error: &apos;, errorMessage);&#125;); 在 Promise 的處理，不可以同時出現 reject 和 resolve，若兩項同時出現，會執行第一項 reject('Unable to fulfill promise');","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Nodejs","slug":"Nodejs","permalink":"https://tingsyuanwang.github.io/tags/Nodejs/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Nodejs 快速學習自我挑戰 Day2","slug":"Nodejs-快速學習自我挑戰-Day2","date":"2017-06-11T14:07:05.000Z","updated":"2017-06-12T21:22:59.000Z","comments":true,"path":"2017/06/11/Nodejs-快速學習自我挑戰-Day2/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/06/11/Nodejs-快速學習自我挑戰-Day2/","excerpt":"","text":"Note App 刪除 Note 修改 removeNote function，先取得所有 notes，然後把跟標題不一樣的 title 取出來，然後存起來，所以選定的 title 就被刪除了 12345var removeNote = (title) =&gt; &#123; var notes = fetchNotes(); var filteredNotes = notes.filter((note) =&gt; note.title !== title); saveNotes(filteredNotes);&#125;; 在 removeNote function 傳回 true 或 false，如果長度不一樣為 true，代表資料刪除，反之亦然。 return notes.length !== filteredNotes.length; 在 app.js 用 noteRemoved 這個變數取得剛剛傳回來的值，如果 true，就顯示「 Note was removed」，false 的話，顯示「 Note not found 」 12345else if (command === &apos;remove&apos;) &#123; var noteRemoved = notes.removeNote(argv.title); var message = noteRemoved ? &apos;Note was removed&apos; : &apos;Note not found&apos;; console.log(message);&#125; 閱讀 Note 修改 getNote function，先取得所有的 notes，然後把標題一樣的取出來，最後 return 陣列 0 (就是取出來的資料) 12345var getNote = (title) =&gt; &#123; var notes = fetchNotes(); var filteredNotes = notes.filter((note) =&gt; note.title === title); return filteredNotes[0];&#125;; 將傳來回的物件用 note 取得，如果存在，顯示資料 123456789var note = notes.getNote(argv.title); if (note) &#123; console.log(&apos;Note found&apos;); console.log(&apos;--&apos;); console.log(`Title: $&#123;note.title&#125;`); console.log(`Body: $&#123;note.body&#125;`); &#125; else &#123; console.log(&apos;Note not found&apos;); &#125; 為了簡化重複的部分，將重複的部分移到 notes.js，並用 function 包裝，還要記得把 logNote export 出去 12345678910var logNote = (note) =&gt; &#123; console.log(&apos;--&apos;); console.log(`Title: $&#123;note.title&#125;`); console.log(`Body: $&#123;note.body&#125;`);&#125;;module.exports = &#123; /* 其它 note function */ logNote&#125;; 剛剛重複的部分，用 function 取代 notes.logNote(note); Note.js 應用除錯 使用 node debug 除錯，n 跳到下一個錯誤，c 直接跳到結果或是 debugger 處，repl 可以輸入指令看相關變數 list Notes 直接 return 取得的所有資料 123var getAll = () =&gt; &#123; return fetchNotes();&#125;; 用 forEach 列出取得的所有 notes 12345else if (command === &apos;list&apos;) &#123; var allNotes = notes.getAll(); console.log(`Printing $&#123;allNotes.length&#125; note(s).`); allNotes.forEach((note) =&gt; notes.logNote(note));&#125; 進階 Yargs 用 yargs .command 來編寫 help 命令的內容 1234567891011121314151617181920212223242526const titleOptions = &#123; describe: &apos;Title of note&apos;, demand: true, alias: &apos;t&apos;&#125;;const bodyOptions = &#123; describe: &apos;Body of note&apos;, demand: true, alias: &apos;b&apos;&#125;const argv = yargs .command(&apos;add&apos;, &apos;Add a new note&apos;, &#123; title: titleOptions, body: bodyOptions &#125;) .command(&apos;list&apos;, &apos;List all notes&apos;) .command(&apos;read&apos;, &apos;Read a note&apos;, &#123; title: titleOptions &#125;) .command(&apos;remove&apos;, &apos;Remove a note&apos;, &#123; title: titleOptions &#125;) .help() .argv; Arrow function 如果只有一個變數，()可以省略，另外，var square = x =&gt; x * x; 等於 1234var square = (x) =&gt; &#123; var result = x * x; return result;&#125;; 使用 Arrow function 的時候，argument 和 this.name 不能使用 (所以這邊的 sayHi 是讀不出來的) 12345678910111213var user = &#123; name: &apos;Vincent&apos;, sayHi: () =&gt; &#123; console.log(arguments); console.log(`Hi. I&apos;m $&#123;this.name&#125;`); &#125;, sayHiAlt () &#123; console.log(arguments); console.log(`Hi. I&apos;m $&#123;this.name&#125;`); &#125;&#125;;user.sayHiAlt(1, 2, 3); Weather App Async 下列的程式，會依照下列順序執行 Starting app =&gt; Finishing up =&gt; Second setTimeout =&gt; Inside of callback 123456789101112console.log(&apos;Starting app&apos;);setTimeout(() =&gt; &#123; console.log(&apos;Inside of callback&apos;);&#125;, 2000);setTimeout(() =&gt; &#123; console.log(&apos;Second setTimeout&apos;);&#125;, 0);console.log(&apos;Finishing up&apos;); callback Function &amp; APIs Callback 範例，最後會輸出 { id: 31, name: 'Vikram' } 1234567891011121314var getUser = (id, callback) =&gt; &#123; var user = &#123; id: id, name: &apos;Vikram&apos; &#125;; setTimeout(() =&gt; &#123; callback(user); &#125;, 3000);&#125;;getUser(31, (userObject) =&gt; &#123; console.log(userObject);&#125;); 第三方 request 插件 啟動 npm 專案 npm init 安裝 request 套件 npm install request@2.73.0 --save 在根目錄新增 app.js 開始專案 先 require request 套件，然後從 google api 擷取 json 資訊 12345678const request = require(&apos;request&apos;);request (&#123; url: &apos;https://maps.googleapis.com/maps/api/geocode/json?address=1301%20lombard%20street%20philadelphia&apos;, json: true&#125;, (error, response, body) =&gt; &#123; console.log(body);&#125;);","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Nodejs","slug":"Nodejs","permalink":"https://tingsyuanwang.github.io/tags/Nodejs/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Nodejs 快速學習自我挑戰 Day1","slug":"Nodejs-快速學習自我挑戰-Day1","date":"2017-06-10T15:32:55.000Z","updated":"2017-06-11T20:39:43.000Z","comments":true,"path":"2017/06/10/Nodejs-快速學習自我挑戰-Day1/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/06/10/Nodejs-快速學習自我挑戰-Day1/","excerpt":"","text":"環境設定 安裝 安裝 node 什麼是 Node JavaScript 本來是用於瀏覽器的，現在可以用在 Server 端，node 是一套用 JavaScript Syntax 且可以用來建立程式、檔案系統，還可以直接跟資料庫溝通，甚至可以直接用 node 來建立伺服器。 Node 和 JavaScript 在瀏覽器裡執行都是使用同個引擎，叫做 JavaScript V8 runtime engine，這是一個開源軟體，將 JavaScript 的程式編譯成較快的機器語言，機器語言是低階語言，電腦可以直接執行不需經過轉譯，少了必須轉譯的動作，電腦只能執行特定程式碼，舉例來說，機器可以執行 JavaScript 程式碼、PHP 程式碼不需要轉譯成機器本來就知道的東西，因為 V8 引擎做得很好，Node 非常的快，使用 V8 引擎，我們可以將 JavaScript 程式碼編譯成較快速的機器語言，然後執行它，V8 引擎是用 C++ 寫的，所以如果想拓展 Node 語言，就要學用 C++。 Node 有檔案系統的功能，瀏覽器則控制什麼出現在視窗裡面。瀏覽器使用 window 呼叫指令，Node 用 global。 瀏覽器使用 document 顯示 DOM，Node 使用 process 顯示進程。process.exit(0); 離開執行狀態(或用兩次 ctrl+C 也可以)。 為什麼使用 Nodejs Nodejs 使用事件驅動、非阻塞式 I/O 模型讓它非常輕量而且高效。I/O 是電腦非常常做的事情，當資料讀取或是寫入資料庫，就是 I/O，也稱為輸入和輸出，這是一個用來溝通物聯網和應用程式的東西，包含資料庫讀取或寫入 request，或是改變檔案系統裡的檔案，或者是傳送 http request 到伺服器，例如：Google API 取得用戶的位置。至於非阻塞式 (non-blocking) 是當有用戶從Google request URL，另外一個用戶可以讀取資料庫的資料而不需等待其他用戶的 request 完成。 Nodejs 套件的生態系系統 npm ，是世界上最大的開源資料庫生態系統。 Note App Using Require Module 是單元功能，Require 是用來取用單元功能的 Node 函式。 Modules 新增根目錄檔案 app.js 先 console.log console.log('Starting app.'); 引入 filesystem const fs = require('fs'); 使用函式庫新增檔案 fs.appendFile('greeting.txt', 'Hello world!'); 如果使用函式庫新增檔案出現錯誤，有其他兩種解法 123456789Option1fs.appendFile(&apos;greeting.txt&apos;, &apos;Hello world!&apos;, function (err) &#123; if (err) &#123; console.log(&apos;Unable to write to file&apos;); &#125;&#125;);Option2fs.appendFileSync(&apos;greeting.txt&apos;, &apos;Hello world!&apos;); 引入 os const os = require('os'); 使用函式庫調出 user 資料 var user = os.userInfo(); ES5 輸出資料 fs.appendFile('greeting.txt', 'Hello ' + user.username + '!'); ES6 輸出資料 1fs.appendFile(&apos;greeting.txt&apos;, `Hello $&#123;user.username&#125;!`); Require 自己的檔案 新增根目錄檔案 notes.js 加入一行 console.log('Starting notes.js') 在 app.js require 檔案 const notes = require('./notes.js'); 在 notes.js 新增 addNote function 1234module.exports.addNote = () =&gt; &#123; console.log(&apos;addNote&apos;); return &apos;New note&apos;;&#125;; 在 app.js 使用 function 12var res = notes.addNote();console.log(res); 在 notes.js 新增 add function 123module.exports.add = (a, b) =&gt; &#123; return a + b;&#125;; 在 app.js 使用 function console.log('Result:', notes.add(9, -2)); 使用第三方套件 啟動 npm 專案 npm init 安裝 lodash npm install lodash --save Require module 到 app.js const _ = requrie('lodash'); 使用 lodash function 去除陣列中一樣的內容 12var filteredArray = _.uniq([&apos;Vincent&apos;, 1, &apos;Vincent&apos;, 1, 2, 3, 4]);console.log(filteredArray); 使用 Nodemon 開始專案 安裝 Nodemon npm install nodemon -g 啟動 Nodemon 來監控專案 nodemon app.js 從使用者取得 input 在 app.js 新增 process.argv 監控 command 123var command = process.argv[2];console.log(&apos;Command:&apos;, command);console.log(process.argv); 在 app.js 新增 if else function 給不同的 command 不同 output 1234567891011if (command === &apos;add&apos;) &#123; console.log(&apos;Adding new note&apos;);&#125; else if (command === &apos;list&apos;) &#123; console.log(&apos;Listing all notes&apos;);&#125; else if (command === &apos;read&apos;) &#123; console.log(&apos;Reading note&apos;);&#125; else if (command === &apos;remove&apos;) &#123; console.log(&apos;Removing note&apos;);&#125; else &#123; console.log(&apos;Command not recognized&apos;);&#125; 檢查 command node app.js remove 使用 Yargs 簡化 input 安裝 Yargs npm install yargs@4.7.1 --save Require Yargs const yargs = require('yargs'); 修改 app.js 的 if function 1234567891011if (command === &apos;add&apos;) &#123; notes.addNote(argv.title, argv.body);&#125; else if (command === &apos;list&apos;) &#123; notes.getAll();&#125; else if (command === &apos;read&apos;) &#123; notes.getNote(argv.title);&#125; else if (command === &apos;remove&apos;) &#123; notes.removeNote(argv.title);&#125; else &#123; console.log(&apos;Command not recognized&apos;);&#125; 在 notes.js 新增 addNote, getAll, getNote, removeNote function 123456789101112131415var addNote = (title, body) =&gt; &#123; console.log(&apos;Adding note&apos;, title, body);&#125;;var getAll = () =&gt; &#123; console.log(&apos;Getting all notes&apos;);&#125;;var getNote = (title) =&gt; &#123; console.log(&apos;Getting note&apos;, title);&#125;;var removeNote = (title) =&gt; &#123; console.log(&apos;Removing note&apos;, title);&#125;; 在 notes.js 輸出 function (ES6) 123456module.exports = &#123; addNote, getAll, getNote, removeNote&#125;; 使用 JSON 先引入 fileSystem，然後用 originalNote 新增 JSON 物件，新增一個變數 originalNoteString 用 stringify 將 originalNote 轉為 String，然後再新增一個變數 note 將 originalNoteString parse 回 JSON 物件。 12345678910111213const fs = require(&apos;fs&apos;);var originalNote = &#123; title: &apos;Some title&apos;, body: &apos;Some body&apos;&#125;;var originalNoteString = JSON.stringify(originalNote);fs.writeFileSync(&apos;notes.json&apos;, originalNoteString);var noteString = fs.readFileSync(&apos;notes.json&apos;);var note = JSON.parse(originalNoteString);console.log(typeof note);console.log(note.title); 新增和儲存 Note 首先在 addNote 傳入 title 和 body 兩個變數，然後用 notes.push 把得到的兩個變數傳進去 notes 陣列裡面，最後用 String 的方式寫入 notes-data.json。過程中，為了避免資料重複，用 notesString 取得檔案內的所有 note，然後用 notes.filter 檢查 title 是不是一樣，最後，如果不一樣，再將檔案寫入 notes-data.json。 123456789101112131415161718192021var addNote = (title, body) =&gt; &#123; var notes = []; var note = &#123; title, body &#125;; try &#123; var notesString = fs.readFileSync(&apos;notes-data.json&apos;); notes = JSON.parse(notesString); &#125; catch (e) &#123; &#125; var duplicateNotes = notes.filter((note) =&gt; note.title === title); if (duplicateNotes.length === 0) &#123; notes.push(note); fs.writeFileSync(&apos;notes-data.json&apos;, JSON.stringify(notes)); &#125;&#125;; 重複使用 function 將本來在 addNote 的 fucntion 移出來 123456789101112var fetchNotes = () =&gt; &#123; try &#123; var notesString = fs.readFileSync(&apos;notes-data.json&apos;); return JSON.parse(notesString); &#125; catch (e) &#123; return []; &#125;&#125;;var saveNotes = (notes) =&gt; &#123; fs.writeFileSync(&apos;notes-data.json&apos;, JSON.stringify(notes));&#125;; addNote function 移出來的 function 用 fetchNotes 和 saveNotes 取代 1234567891011121314var addNote = (title, body) =&gt; &#123; var notes = fetchNotes(); var note = &#123; title, body &#125;; var duplicateNotes = notes.filter((note) =&gt; note.title === title); if (duplicateNotes.length === 0) &#123; notes.push(note); saveNotes(notes); return note; &#125;&#125;; 將從 notes.js return 出來的 note 用 if else function 來顯示是否完成新增 notes 的動作 1234567891011if (command === &apos;add&apos;) &#123; var note = notes.addNote(argv.title, argv.body); if (note) &#123; console.log(&apos;Note created&apos;); console.log(&apos;--&apos;); console.log(`Title: $&#123;note.title&#125;`); console.log(`Body: $&#123;note.body&#125;`); &#125; else &#123; console.log(&apos;Note title taken&apos;); &#125;&#125;","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Nodejs","slug":"Nodejs","permalink":"https://tingsyuanwang.github.io/tags/Nodejs/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Lavarel 快速學習自我挑戰 Day22","slug":"Lavarel-快速學習自我挑戰-Day22","date":"2017-06-01T07:04:36.000Z","updated":"2017-06-08T10:29:00.000Z","comments":true,"path":"2017/06/01/Lavarel-快速學習自我挑戰-Day22/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/06/01/Lavarel-快速學習自我挑戰-Day22/","excerpt":"","text":"部署 app 與共享主機 主機相關 申請 godaddy 主機(一元主機) 啟用 ssh 連線並匯入金鑰 ssh -i ~/.ssh/id_rsa 帳號@ip Select PHP verion =&gt; 選擇 5.6 =&gt; 啟用 zip =&gt; 儲存 Composer install 預設就裝好了。 如果沒有，使用 wget 或是 curl 取得 composer wget https://getcomposer.org/installer curl -sS https://getcomposer.org/installer | php 檢查 composer 是否可用 php installer --check 安裝 composer php installer 執行 composer php composer.phar laravel install 用 composer 下載 laravel installer composer global require &quot;laravel/installer&quot; 新增 path 到 ~/.bash_profile export PATH=&quot;$PATH:$HOME/.composer/vendor/bin&quot; 更新檔案 source .bash_profile 執行 laravel 語法 上傳專案 直接到 cpanel 上傳檔案 設定環境檔案 下載相依檔案 composer update 複製 env 範例檔 cp .env.example .env 設定 .env 新增 APP_KEY php artisan key:generate 發佈 修改 documentroot 到 public folder 如果主目錄路徑不同，可修改 public 目錄下的 index.php 修改 config/app.php 的 URL 網址、時區(Asia/Taipei) 將 adimin/media/index view 的 form path 改為 delete/media 將 routes/web.php 的 delete media route 改為 Route::get('admin/delete/media', 'AdminMediasController@deleteMedia'); 修改 .env 將 debug 關閉且將環境改為 production 升級到 5.4 刪除 bootstrap/cache/compiled.php 修改 composer.json &quot;phpunit/phpunit&quot;: &quot;~5.7&quot;, &quot;laravel/framework&quot;: &quot;5.4.*&quot;, &quot;laravelcollective/html&quot;: &quot;5.4.*&quot;, &quot;cviebrock/eloquent-sluggable&quot;: &quot;4.2.1&quot;, 更新套件 composer update 清除快取 php artisan view:clear 清除路由快取 php artisan route:clear 刪除 gulpfile.js 新增 webpack.mix.js 123456789101112131415161718192021222324const &#123; mix &#125; = require (&apos;laravel-mix&apos;);mix.js(&apos;resources/assets/js/app.js&apos;, &apos;public/js&apos;) .sass(&apos;resources/assets/sass/app.css&apos;, &apos;public/css&apos;);mix.styles([ &apos;resources/assets/css/libs/blog-post.css&apos;, &apos;resources/assets/css/libs/bootstrap.css&apos;, &apos;resources/assets/css/libs/font-awesome.css&apos;, &apos;resources/assets/css/libs/metisMenu.css&apos;, &apos;resources/assets/css/libs/sb-admin-2.css&apos;], &apos;public/css/libs.css&apos;);mix.scripts([ &apos;resources/assets/js/libs/jquery.js&apos;, &apos;resources/assets/js/libs/bootstrap.js&apos;, &apos;resources/assets/js/libs/metisMenu.js&apos;, &apos;resources/assets/js/libs/sb-admin-2.js&apos;, &apos;resources/assets/js/libs/scripts.js&apos;], &apos;./public/js/libs.js&apos;); 將 package.json 取代為 123456789101112131415161718&#123; &quot;private&quot;: true, &quot;scripts&quot;: &#123; &quot;dev&quot;: &quot;node node_modules/cross-env/dist/bin/cross-env.js NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot;, &quot;watch&quot;: &quot;node node_modules/cross-env/dist/bin/cross-env.js NODE_ENV=development node_modules/webpack/bin/webpack.js --watch --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot;, &quot;watch-poll&quot;: &quot;node node_modules/cross-env/dist/bin/cross-env.js NODE_ENV=development node_modules/webpack/bin/webpack.js --watch --watch-poll --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot;, &quot;hot&quot;: &quot;node node_modules/cross-env/dist/bin/cross-env.js NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js&quot;, &quot;production&quot;: &quot;node node_modules/cross-env/dist/bin/cross-env.js NODE_ENV=production node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot; &#125;, &quot;devDependencies&quot;: &#123; &quot;axios&quot;: &quot;^0.15.3&quot;, &quot;bootstrap-sass&quot;: &quot;^3.3.7&quot;, &quot;jquery&quot;: &quot;^3.1.1&quot;, &quot;laravel-mix&quot;: &quot;^0.8.1&quot;, &quot;lodash&quot;: &quot;^4.17.4&quot;, &quot;vue&quot;: &quot;^2.2.2&quot; &#125;&#125; 安裝相依套件 npm install 執行 webpack npm run dev 監控 webpack 任何變化 npm run watch 完成課程結業證書","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Laravel","slug":"Laravel","permalink":"https://tingsyuanwang.github.io/tags/Laravel/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Lavarel 快速學習自我挑戰 Day21","slug":"Lavarel-快速學習自我挑戰-Day21","date":"2017-05-31T08:58:07.000Z","updated":"2017-06-05T07:01:30.000Z","comments":true,"path":"2017/05/31/Lavarel-快速學習自我挑戰-Day21/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/05/31/Lavarel-快速學習自我挑戰-Day21/","excerpt":"","text":"升級到 Laravel 5.3 Part II 升級 users 把 AdminUsersController 的 lists 全部改為 pluck 升級 posts 新增到 routes/web.php Route::get('/post/{id}', ['as'=&gt;'home.post', 'uses'=&gt;'AdminPostsController@post']); 新增 comment routes 'show'=&gt;'admin.comments.show' 把 AdminPostsController 的 lists 全部改為 pluck 在 composer.json 升級套件 &quot;laravelcollective/html&quot;: &quot;5.3.*&quot;,，並使用 composer update 升級 middleware 修改 kernel.php 的 $routeMiddleware 'can' =&gt; \\Illuminate\\Auth\\Middleware\\Authorize::class, 新增 kernel.php 的 $middlewareGroups \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class, 新增 kernel.php 的 $routeMiddleware 'bindings' =&gt; \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class, 新增 kernel.php 的 api 'bindings', WYSIWYG and file installing editor 下載套件 &amp; 安裝編輯器 TinyMCE 官方網站 新增 includes/tinyeditor.blade.php view 12&lt;script src=&quot;https://cloud.tinymce.com/stable/tinymce.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;tinymce.init(&#123; selector:&apos;textarea&apos; &#125;);&lt;/script&gt; 在 admin/posts/create view 新增 @include('includes.tinyeditor') FileManager Github 安裝套件 composer require unisharp/laravel-filemanager laravel intervention 官方網站 安裝 intervention composer require intervention/image 將 class 加到 config/app.php provider Unisharp\\Laravelfilemanager\\LaravelFilemanagerServiceProvider::class, Intervention\\Image\\ImageServiceProvider::class, 將 class 加到 config/app.php alias 'Image' =&gt; Intervention\\Image\\Facades\\Image::class, Publish the package’s config and assets php artisan vendor:publish --tag=lfm_config php artisan vendor:publish --tag=lfm_public 創建資料夾和上傳檔案 修改 includes/tinyeditor.blade.php view 12345678910111213141516171819202122232425262728293031323334353637&lt;script src=&quot;https://cloud.tinymce.com/stable/tinymce.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt; var editor_config = &#123; path_absolute : &quot;/&quot;, selector: &quot;textarea.my-editor&quot;, plugins: [ &quot;advlist autolink lists link image charmap print preview hr anchor pagebreak&quot;, &quot;searchreplace wordcount visualblocks visualchars code fullscreen&quot;, &quot;insertdatetime media nonbreaking save table contextmenu directionality&quot;, &quot;emoticons template paste textcolor colorpicker textpattern&quot; ], toolbar: &quot;insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image media&quot;, relative_urls: false, file_browser_callback : function(field_name, url, type, win) &#123; var x = window.innerWidth || document.documentElement.clientWidth || document.getElementsByTagName(&apos;body&apos;)[0].clientWidth; var y = window.innerHeight|| document.documentElement.clientHeight|| document.getElementsByTagName(&apos;body&apos;)[0].clientHeight; var cmsURL = editor_config.path_absolute + &apos;laravel-filemanager?field_name=&apos; + field_name; if (type == &apos;image&apos;) &#123; cmsURL = cmsURL + &quot;&amp;type=Images&quot;; &#125; else &#123; cmsURL = cmsURL + &quot;&amp;type=Files&quot;; &#125; tinyMCE.activeEditor.windowManager.open(&#123; file : cmsURL, title : &apos;Filemanager&apos;, width : x * 0.8, height : y * 0.8, resizable : &quot;yes&quot;, close_previous : &quot;no&quot; &#125;); &#125; &#125;; tinymce.init(editor_config);&lt;/script&gt; 在 admin/posts/create view 的 textarea 加上 my-editor 的 class 修改 post view，強制顯示圖片 &lt;p&gt;{!! $post-&gt;body !!}&lt;/p&gt; 將編輯器也引入 admin/posts/edit view @include('includes.tinyeditor') Disqus system 進入網站首頁，選擇安裝程式碼到我的網站上面。 新增新的網站，按照步驟做即可。 大量刪除媒體 新增 form 到 admin/media/index view 12345678910111213&lt;form action=&quot;/delete/media/&quot; method=&quot;get&quot; class=&quot;form-inline&quot;&gt; &#123;&#123;csrf_field()&#125;&#125; &#123;&#123;method_field(&apos;delete&apos;)&#125;&#125; &lt;div class=&quot;form-group&quot;&gt; &lt;select name=&quot;checkBoxArray&quot; id=&quot;&quot; class=&quot;form-control&quot;&gt; &lt;option value=&quot;delete&quot;&gt;Delete&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;input type=&quot;submit&quot; class=&quot;btn-primary&quot;&gt; &lt;/div&gt; /*table code*/&lt;/form&gt; 新增 routes Route::get('/delete/media', 'AdminMediasController@deleteMedia'); 將 Delete button 的 form 修改為 12345&lt;input type=&quot;hidden&quot; name=&quot;photo&quot; value=&quot;&#123;&#123;$photo-&gt;id&#125;&#125;&quot;&gt;&lt;div class=&quot;form-group&quot;&gt; &lt;input type=&quot;submit&quot; name=&quot;delete_single&quot; value=&quot;Delete&quot; class=&quot;btn btn-danger&quot;&gt;&lt;/div&gt; 在 AdminMediasController 新增 deleteMedia function 1234567891011121314151617181920212223242526272829public function deleteMedia(Request $request)&#123; if(isset($request-&gt;delete_single))&#123; $this-&gt;destroy($request-&gt;photo); return redirect()-&gt;back(); &#125; if(isset($request-&gt;delete_all) &amp;&amp; !empty($request-&gt;checkBoxArray))&#123; $photos = Photo::findOrFail($request-&gt;checkBoxArray); foreach ($photos as $photo) &#123; $photo-&gt;delete(); &#125; return redirect()-&gt;back(); &#125; else &#123; return redirect()-&gt;back(); &#125;&#125; 新增 script section 到 media/index view，讓全選功能完成。 123456789101112131415161718192021222324252627282930313233@section(&apos;scripts&apos;) &lt;script&gt; $(document).ready(function()&#123; $(&apos;#options&apos;).click(function()&#123; if(this.checked)&#123; $(&apos;.checkBoxes&apos;).each(function()&#123; this.checked = true; &#125;); &#125; else &#123; $(&apos;.checkBoxes&apos;).each(function()&#123; this.checked = false; &#125;); &#125; &#125;) &#125;); &lt;/script&gt;@stop","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Laravel","slug":"Laravel","permalink":"https://tingsyuanwang.github.io/tags/Laravel/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Lavarel 快速學習自我挑戰 Day20","slug":"Lavarel-快速學習自我挑戰-Day20","date":"2017-05-30T07:46:47.000Z","updated":"2017-05-31T19:24:08.000Z","comments":true,"path":"2017/05/30/Lavarel-快速學習自我挑戰-Day20/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/05/30/Lavarel-快速學習自我挑戰-Day20/","excerpt":"","text":"Pretty URL eloquent-sluggable 套件說明書 require 套件 composer require cviebrock/eloquent-sluggable 4.1 在 config/app.php 新增 provider Cviebrock\\EloquentSluggable\\ServiceProvider::class, 在 Post model 新增 123456789101112131415161718192021use Cviebrock\\EloquentSluggable\\Sluggable;class Post extends Model&#123; use Sluggable; /** * Return the sluggable configuration array for this model. * * @return array */ public function sluggable() &#123; return [ &apos;slug&apos; =&gt; [ &apos;source&apos; =&gt; &apos;title&apos; ] ]; &#125;&#125; 新增 migration php artisan make:migration add_slug_to_posts_table --create=posts 修改 add_slug_to_posts_table 1234567891011121314151617181920212223242526class AddSlugToPostsTable extends Migration&#123; /** * Run the migrations. * * @return void */ public function up() &#123; Schema::table(&apos;posts&apos;, function (Blueprint $table) &#123; $table-&gt;string(&apos;slug&apos;)-&gt;nullable(); &#125;); &#125; /** * Reverse the migrations. * * @return void */ public function down() &#123; Schema::table(&apos;posts&apos;, function (Blueprint $table) &#123; $table-&gt;dropColumn(&apos;slug&apos;); &#125;); &#125;&#125; 將資料匯入資料庫 php artisan migrate 修改 admin/posts/index view 的檢視貼文欄位 &lt;td&gt;&lt;a href=&quot; {{route('home.post', $post->slug)}}&quot;&gt;View post&lt;/a&gt;&lt;/td&gt; 修改 AdminPostsController 的 post function 123456789public function post($slug)&#123; $post = Post::where(&apos;slug&apos;, $slug)-&gt;first() ?: Post::findOrFail((int)$slug); $comments = $post-&gt;comments()-&gt;whereIsActive(1)-&gt;get(); return view(&apos;post&apos;, compact(&apos;post&apos;, &apos;comments&apos;));&#125; Pagination (Pagination 官方文件) 修改 AdminPostsController 的 index function $posts = Post::all();=&gt;$posts = Post::paginate(2); 在 admin/posts/index view 新增 1234567&lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-sm-6 col-sm-offset-5&quot;&gt; &#123;&#123;$posts-&gt;render()&#125;&#125; &lt;/div&gt;&lt;/div&gt; 從 gravatar 拿大頭貼 在 User model 新增 getGravatarAttribute function 1234567public function getGravatarAttribute()&#123; $hash = md5(strtolower(trim($this-&gt;attributes[&apos;email&apos;]))); return &quot;http://www.gravatar.com/avatar/$hash&quot;;&#125; 取得大頭貼 src=&quot; {{Auth::user()->gravatar}}&quot; 升級到 Laravel 5.3 Part I 升級 更新內容 檢查版本 php artisan --version 修改 composer.json &quot;laravel/framework&quot;: &quot;5.3.*&quot;,=&gt;&quot;laravel/framework&quot;: &quot;5.3.*&quot;, 更新資料 composer update 把 app/Providers/EventServiceProvider 的 boot function 的變數拿掉 1234public function boot()&#123; parent::boot();&#125; 把 app/Providers/RouteServiceProvider 的 boot, map, mapWebRoutes function 的變數拿掉 1234public function boot()&#123; parent::boot();&#125; 1234public function map()&#123; $this-&gt;mapWebRoutes();&#125; 12345678protected function mapWebRoutes()&#123; Route::group([ &apos;namespace&apos; =&gt; $this-&gt;namespace, &apos;middleware&apos; =&gt; &apos;web&apos;, ], function ($router) &#123; require app_path(&apos;Http/routes.php&apos;); &#125;);&#125; 接上面的步驟，將 use Illuminate\\Routing\\Router;移除 修改 mapWebRoutes function 的 path 12345678protected function mapWebRoutes()&#123; Route::group([ &apos;namespace&apos; =&gt; $this-&gt;namespace, &apos;middleware&apos; =&gt; &apos;web&apos;, ], function ($router) &#123; require base_path(&apos;routes/web.php&apos;); &#125;);&#125; 更新 routes 在 app/Http/Controllers/Controller.php 刪除 AuthorizesResources, 更新 routes 檔案 將更新檔案複製到 app/Http/Controllers/Auth 目錄底下 新增以下兩行到 routes/web.php 12Auth::routes();Route::get(&apos;/logout&apos;, &apos;Auth\\LoginController@logout&apos;); 修改 LoginController 將目錄導向 admin protected $redirectTo = '/admin'; 客製化 routes 來符合舊的路由設定 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354Route::group([&apos;middleware&apos;=&gt;&apos;admin&apos;], function()&#123; Route::get(&apos;/admin&apos;, function()&#123; return view(&apos;admin.index&apos;); &#125;); Route::resource(&apos;admin/users&apos;, &apos;AdminUsersController&apos;, [&apos;names&apos;=&gt;[ &apos;index&apos;=&gt;&apos;admin.users.index&apos;, &apos;create&apos;=&gt;&apos;admin.users.create&apos;, &apos;store&apos;=&gt;&apos;admin.users.store&apos;, &apos;edit&apos;=&gt;&apos;admin.users.edit&apos; ]]); Route::resource(&apos;admin/posts&apos;, &apos;AdminPostsController&apos;, [&apos;names&apos;=&gt;[ &apos;index&apos;=&gt;&apos;admin.posts.index&apos;, &apos;create&apos;=&gt;&apos;admin.posts.create&apos;, &apos;store&apos;=&gt;&apos;admin.posts.store&apos;, &apos;edit&apos;=&gt;&apos;admin.posts.edit&apos; ]]); Route::resource(&apos;admin/categories&apos;, &apos;AdminCategoriesController&apos;, [&apos;names&apos;=&gt;[ &apos;index&apos;=&gt;&apos;admin.categories.index&apos;, &apos;create&apos;=&gt;&apos;admin.categories.create&apos;, &apos;store&apos;=&gt;&apos;admin.categories.store&apos;, &apos;edit&apos;=&gt;&apos;admin.categories.edit&apos; ]]); Route::resource(&apos;admin/comments&apos;, &apos;PostCommentsController&apos;, [&apos;names&apos;=&gt;[ &apos;index&apos;=&gt;&apos;admin.comments.index&apos;, &apos;create&apos;=&gt;&apos;admin.comments.create&apos;, &apos;store&apos;=&gt;&apos;admin.comments.store&apos;, &apos;edit&apos;=&gt;&apos;admin.comments.edit&apos; ]]); Route::resource(&apos;admin/comments/replies&apos;, &apos;CommentRepliesController&apos;, [&apos;names&apos;=&gt;[ &apos;index&apos;=&gt;&apos;admin.comments.replies.index&apos;, &apos;create&apos;=&gt;&apos;admin.comments.replies.create&apos;, &apos;store&apos;=&gt;&apos;admin.comments.replies.store&apos;, &apos;edit&apos;=&gt;&apos;admin.comments.replies.edit&apos; ]]);&#125;);","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Laravel","slug":"Laravel","permalink":"https://tingsyuanwang.github.io/tags/Laravel/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Lavarel 快速學習自我挑戰 Day19","slug":"Lavarel-快速學習自我挑戰-Day19","date":"2017-05-28T16:58:12.000Z","updated":"2017-05-31T07:44:02.000Z","comments":true,"path":"2017/05/29/Lavarel-快速學習自我挑戰-Day19/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/05/29/Lavarel-快速學習自我挑戰-Day19/","excerpt":"","text":"Application 留言功能 Part II 顯示留言 在 admin/posts/index view 新增文章連結 &lt;td&gt;&lt;a href=&quot; {{route('home.post', $post->id)}}&quot;&gt;view post&lt;/a&gt;&lt;/td&gt; 在 admin/posts/index view 新增評論連結 &lt;td&gt;&lt;a href=&quot; {{route('admin.comments.show', $post->id)}}&quot;&gt;View Comments&lt;/a&gt;&lt;/td&gt; 新增 admin/comments/show view 在 PostCommentsController 新增 show function 12345678public function show($id)&#123; $post = POST::findOrfail($id); $comments = $post-&gt;comments; return view(&apos;admin.comments.show&apos;, compact(&apos;comments&apos;)); &#125; 修改 Post model 12345public function comments()&#123; return $this-&gt;hasMany(&apos;App\\Comment&apos;);&#125; 在文章中顯示留言 新增 Auth 到留言區塊，讓登入的使用者才可以留言 12@if(Auth::check())@endif 修改 AdminPostsController 的 post function 123456789public function post($id)&#123; $post = Post::findOrFail($id); $comments = $post-&gt;comments()-&gt;whereIsActive(1)-&gt;get(); return view(&apos;post&apos;, compact(&apos;post&apos;, &apos;comments&apos;));&#125; 新增 posted comments 到 post view 123456789101112131415@if(count($comments) &gt; 0) @foreach($comments as $comment) &lt;div class=&quot;media&quot;&gt; &lt;a class=&quot;pull-left&quot; href=&quot;#&quot;&gt; &lt;img height=&quot;64&quot; class=&quot;media-object&quot; src=&quot;&#123;&#123;$comment-&gt;photo&#125;&#125;&quot; alt=&quot;&quot;&gt; &lt;/a&gt; &lt;div class=&quot;media-body&quot;&gt; &lt;h4 class=&quot;media-heading&quot;&gt;&#123;&#123;$comment-&gt;author&#125;&#125; &lt;small&gt;&#123;&#123;$comment-&gt;created_at-&gt;diffForHumans()&#125;&#125;&lt;/small&gt; &lt;/h4&gt; &#123;&#123;$comment-&gt;body&#125;&#125; &lt;/div&gt; &lt;/div&gt; @endforeach@endif 回覆留言功能 新增 routes 12345Route::group([&apos;middleware&apos;=&gt;&apos;auth&apos;], function() &#123; Route::post(&apos;comment/reply&apos;, &apos;CommentRepliesController@createdReply&apos;);&#125;); 在 CommentRepliesController 新增 CreateReply function 1234567891011121314151617181920212223public function createReply(Request $request)&#123; $user = Auth::user(); $data = [ &apos;post_id&apos; =&gt; $request-&gt;post_id, &apos;author&apos; =&gt; $user-&gt;name, &apos;email&apos; =&gt; $user-&gt;email, &apos;photo&apos; =&gt; $user-&gt;photo-&gt;file, &apos;body&apos; =&gt; $request-&gt;body ]; CommentReply::create($data); $request-&gt;session()-&gt;flash(&apos;reply_message&apos;, &apos;Your reply has been submitted and is waiting moderation&apos;); return redirect()-&gt;back();&#125; 在 CommentReply model 新增 'photo' 讓欄位可寫入 新增 reply comment 到 post view 123456789101112131415161718192021222324252627282930313233343536373839@if(count($comment-&gt;replies) &gt; 0) @foreach($comment-&gt;replies as $reply) &lt;!-- Nested Comment --&gt; &lt;div class=&quot;media&quot;&gt; &lt;a class=&quot;pull-left&quot; href=&quot;#&quot;&gt; &lt;img height=&quot;64&quot; class=&quot;media-object&quot; src=&quot;&#123;&#123;$reply-&gt;photo&#125;&#125;&quot; alt=&quot;&quot;&gt; &lt;/a&gt; &lt;div class=&quot;media-body&quot;&gt; &lt;h4 class=&quot;media-heading&quot;&gt;&#123;&#123;$reply-&gt;author&#125;&#125; &lt;small&gt;&#123;&#123;$reply-&gt;created_at-&gt;diffForHumans()&#125;&#125;&lt;/small&gt; &lt;/h4&gt; &lt;p&gt;&#123;&#123;$reply-&gt;body&#125;&#125;&lt;/p&gt; &lt;/div&gt; &#123;!! Form::open([&apos;method&apos;=&gt;&apos;POST&apos;, &apos;action&apos;=&gt;&apos;CommentRepliesController@createReply&apos;]) !!&#125; &lt;input type=&quot;hidden&quot; name=&quot;comment_id&quot; value=&quot;&#123;&#123;$comment-&gt;id&#125;&#125;&quot;&gt; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::label(&apos;body&apos;, &apos;Body:&apos;) !!&#125; &#123;!! Form::text(&apos;body&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;, &apos;rows&apos;=&gt;1]) !!&#125; &lt;/div&gt; &#123;&#123;csrf_field()&#125;&#125; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::submit(&apos;submit&apos;, [&apos;class&apos;=&gt;&apos;btn btn-primary&apos;]) !!&#125; &lt;/div&gt; &#123;!! Form::close() !!&#125; &lt;/div&gt; &lt;!-- End Nested Comment --&gt; @endforeach@endif 在 layouts.blog-post view 生成 script 區塊 @yield('scripts') 新增 div 12345678&lt;div class=&quot;comment-reply-container&quot;&gt; &lt;button class=&quot;toggle-reply btn btn-primary pull-right&quot;&gt;Reply&lt;/button&gt; &lt;div class=&quot;comment-reply&quot;&gt; /* Nested Comment*/ &lt;/div&gt;&lt;/div&gt; 在 resources/assets/scss/app.css 修改樣式，新增 .comment-reply {display: none;}，並用gulp編譯。 新增 scripts 區塊 12345678910111213@section(&apos;scripts&apos;) &lt;script&gt; $(&quot;.comment-reply-container .toggle-reply&quot;).click(function()&#123; $(this).next().slideToggle(&quot;slow&quot;); &#125;); &lt;/script&gt;@stop 在主管理介面顯示回覆 複製 comments/show view 到 comments/replies/show view，將 comment 改為 reply。 在 admin/comments/index view 新增 &lt;td&gt;&lt;a href=&quot; {{route('admin.comments.replies.show', $comment->id)}}&quot;&gt;View Replies&lt;/a&gt;&lt;/td&gt; 在 CommentRepliesController 新增 show function 12345678public function show($id)&#123; $comment = Comment::findOrFail($id); $replies = $comment-&gt;replies; return view(&apos;admin.comments.replies.show&apos;, compact(&apos;replies&apos;));&#125; 在 CommentRepliesController 新增 update function 123456public function update(Request $request, $id)&#123; CommentReply::findOrFail($id)-&gt;update($request-&gt;all()); return redirect()-&gt;back();&#125; 修改 post view 12345@if($reply-&gt;is_active == 1) /*nested comment*/ @else &lt;h1 class=&quot;text-center&quot;&gt;No Relies&lt;/h1&gt;@endif 在 CommentRepliesController 新增 destroy function 123456public function destroy($id)&#123; CommentReply::findOrFail($id)-&gt;delete(); redirect()-&gt;back();&#125;","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Laravel","slug":"Laravel","permalink":"https://tingsyuanwang.github.io/tags/Laravel/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Lavarel 快速學習自我挑戰 Day18","slug":"Lavarel-快速學習自我挑戰-Day18","date":"2017-05-28T08:02:04.000Z","updated":"2017-05-29T16:54:59.000Z","comments":true,"path":"2017/05/28/Lavarel-快速學習自我挑戰-Day18/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/05/28/Lavarel-快速學習自我挑戰-Day18/","excerpt":"","text":"Application 留言功能 Part I 設定環境 新增 views/admin/comments/index.blade.php 和 views/admin/comments/replies/index.blade.php 新增 routes 12Route::resource(&apos;admin/comments&apos;, &apos;PostCommentsController&apos;);Route::resource(&apos;admin/comments/replies&apos;, &apos;CommentRepliesController&apos;); 新增 model php artisan make:model Comment -m php artisan make:model CommentReply -m 新增欄位到 create_comments_table 1234567891011121314Schema::create(&apos;comments&apos;, function (Blueprint $table) &#123; $table-&gt;increments(&apos;id&apos;); $table-&gt;integer(&apos;post_id&apos;)-&gt;unsigned()-&gt;index(); $table-&gt;integer(&apos;is_active&apos;)-&gt;default(0); $table-&gt;string(&apos;author&apos;); $table-&gt;string(&apos;photo&apos;); $table-&gt;string(&apos;email&apos;); $table-&gt;text(&apos;body&apos;); $table-&gt;timestamps(); $table-&gt;foreign(&apos;post_id&apos;)-&gt;references(&apos;id&apos;)-&gt;on(&apos;posts&apos;)-&gt;onDelete(&apos;cascade&apos;);&#125;); 新增欄位到 create_comment_replies_table 12345678910111213Schema::create(&apos;comment_replies&apos;, function (Blueprint $table) &#123; $table-&gt;increments(&apos;id&apos;); $table-&gt;integer(&apos;comment_id&apos;)-&gt;unsigned()-&gt;index(); $table-&gt;integer(&apos;is_active&apos;)-&gt;default(0); $table-&gt;string(&apos;author&apos;); $table-&gt;string(&apos;photo&apos;); $table-&gt;string(&apos;email&apos;); $table-&gt;text(&apos;body&apos;); $table-&gt;timestamps(); $table-&gt;foreign(&apos;comment_id&apos;)-&gt;references(&apos;id&apos;)-&gt;on(&apos;comments&apos;)-&gt;onDelete(&apos;cascade&apos;);&#125;); 匯入資料庫 php artisan migrate Relationship &amp; Mass Assignment 在 Post model 新增 12345public function comments()&#123; return $this-&gt;hasMany(&apos;App\\Post&apos;); &#125; 在 Comment model 新增 123456789101112131415protected $fillable = [ &apos;post_id&apos;, &apos;author&apos;, &apos;email&apos;, &apos;body&apos;, &apos;is_active&apos;];public function replies()&#123; return $this-&gt;hasMany(&apos;App\\CommentReply&apos;);&#125; 在 CommentReply 新增 123456789101112131415protected $fillable = [ &apos;comment_id&apos;, &apos;author&apos;, &apos;email&apos;, &apos;body&apos;, &apos;is_active&apos;];public function comment()&#123; return $this-&gt;belongsTo(&apos;App\\Comment&apos;);&#125; 新增 Controller php artisan make:controller --resource PostCommentsController php artisan make:controller --resource CommentRepliesController 設定 views 新增 layouts/blog-home.blade.php 和 layouts/blog-post.blade.php view 新增 layouts/blog.blade.php 創建貼文 將 admin route 移到 group 裡面 新增 routes Route::get('/post/{id}', ['as'=&gt;'home.post', 'uses'=&gt;'AdminPostsController@post']); 新增 post function 到 AdminPostsController 1234567public function post($id)&#123; $post = Post::findOrFail($id); return view(&apos;post&apos;, compact(&apos;post&apos;));&#125; 將 view 的 tilte 改為動態產生 {{$post->title}} 修改作者、時間、圖片、內文 {{$post->user->name}} {{$post->created_at->diffForHumans()}} {{$post->photo->file}} {{$post->body}} 創建留言 把 post view 的留言區改為 open form 123456789101112131415161718192021&lt;div class=&quot;well&quot;&gt; &lt;h4&gt;Leave a Comment:&lt;/h4&gt; &#123;!! Form::open([&apos;method&apos;=&gt;&apos;POST&apos;, &apos;action&apos;=&gt;&apos;PostCommentsController@store&apos;]) !!&#125; &lt;input type=&quot;hidden&quot; name=&quot;post_id&quot; value=&quot;&#123;&#123;$post-&gt;id&#125;&#125;&quot;&gt; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::label(&apos;body&apos;, &apos;Body:&apos;) !!&#125; &#123;!! Form::textarea(&apos;body&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;, &apos;rows&apos;=&gt;3]) !!&#125; &lt;/div&gt; &#123;&#123;csrf_field()&#125;&#125; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::submit(&apos;Submit comment&apos;, [&apos;class&apos;=&gt;&apos;btn btn-primary&apos;]) !!&#125; &lt;/div&gt; &#123;!! Form::close() !!&#125;&lt;/div&gt; 修改 PostCommentsController 的 store function 123456789101112131415161718192021public function store(Request $request) &#123; $user = Auth::user(); $data = [ &apos;post_id&apos; =&gt; $request-&gt;post_id, &apos;author&apos; =&gt; $user-&gt;name, &apos;email&apos; =&gt; $user-&gt;email, &apos;photo&apos; =&gt; $user-&gt;photo-&gt;file, &apos;body&apos; =&gt; $request-&gt;body ]; Comment::create($data); $request-&gt;session()-&gt;flash(&apos;comment message&apos;, &apos;Your message has been submitted and is waiting moderation&apos;); return redirect()-&gt;back();&#125; 顯示訊息，修改 post view 12345@if(Session::has(&apos;comment message&apos;)) &#123;&#123;session(&apos;comment message&apos;)&#125;&#125;@endif 顯示貼文 修改 PostCommentsController 的 index function 12$comments = Comment::all();return view(&apos;admin.comments.index&apos;, compact(&apos;comments&apos;)); 修改 Comment model 12345public function post()&#123; return $this-&gt;belongsTo(&apos;App\\Post&apos;);&#125; 修改 comments/index view 1234567891011121314151617181920212223242526272829303132333435@if(count($comments) &gt; 0)&lt;h1&gt;Comments&lt;/h1&gt;&lt;table class=&quot;table&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;id&lt;/th&gt; &lt;th&gt;Author&lt;/th&gt; &lt;th&gt;Email&lt;/th&gt; &lt;th&gt;Body&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; @foreach($comments as $comment) &lt;tr&gt; &lt;td&gt;&#123;&#123;$comment-&gt;id&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;$comment-&gt;author&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;$comment-&gt;email&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;$comment-&gt;body&#125;&#125;&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&#123;&#123;route(&apos;home.post&apos;, $comment-&gt;post-&gt;id)&#125;&#125;&quot;&gt;View Post&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; @endforeach &lt;/tbody&gt;&lt;/table&gt; @else &lt;h1 class=&quot;text-center&quot;&gt;No Comments&lt;/h1&gt;@endif 審核和刪除貼文 在 comments/index view 新增審核按鈕 12345678910111213141516171819202122232425262728293031323334&lt;td&gt; @if($comment-&gt;is_active == 1) &#123;!! Form::open([&apos;method&apos;=&gt;&apos;PATCH&apos;, &apos;action&apos;=&gt; [&apos;PostCommentsController@update&apos;, $comment-&gt;id]]) !!&#125; &lt;input type=&quot;hidden&quot; name=&quot;is_active&quot; value=&quot;0&quot;&gt; &#123;&#123;csrf_field()&#125;&#125; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::submit(&apos;Un-approve&apos;, [&apos;class&apos;=&gt;&apos;btn btn-success&apos;]) !!&#125; &lt;/div&gt; &#123;!! Form::close() !!&#125; @else &#123;!! Form::open([&apos;method&apos;=&gt;&apos;PATCH&apos;, &apos;action&apos;=&gt; [&apos;PostCommentsController@update&apos;, $comment-&gt;id]]) !!&#125; &lt;input type=&quot;hidden&quot; name=&quot;is_active&quot; value=&quot;1&quot;&gt; &#123;&#123;csrf_field()&#125;&#125; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::submit(&apos;Approve&apos;, [&apos;class&apos;=&gt;&apos;btn btn-info&apos;]) !!&#125; &lt;/div&gt; &#123;!! Form::close() !!&#125; @endif&lt;/td&gt; 在 comments/index view 新增刪除按鈕 12345678910111213&lt;td&gt; &#123;!! Form::open([&apos;method&apos;=&gt;&apos;DELETE&apos;, &apos;action&apos;=&gt; [&apos;PostCommentsController@destroy&apos;, $comment-&gt;id]]) !!&#125; &#123;&#123;csrf_field()&#125;&#125; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::submit(&apos;Delete&apos;, [&apos;class&apos;=&gt;&apos;btn btn-danger&apos;]) !!&#125; &lt;/div&gt; &#123;!! Form::close() !!&#125;&lt;/td&gt; 修改 PostCommentsController 的 update function 123Comment::findOrFail($id)-&gt;update($request-&gt;all());return redirect(&apos;/admin/comments&apos;); 修改 PostCommentsController 的 delete function 123Comment::findOrFail($id)-&gt;delete();return redirect()-&gt;back();","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Laravel","slug":"Laravel","permalink":"https://tingsyuanwang.github.io/tags/Laravel/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Lavarel 快速學習自我挑戰 Day17","slug":"Lavarel-快速學習自我挑戰-Day17","date":"2017-05-26T17:21:27.000Z","updated":"2017-06-01T16:57:03.000Z","comments":true,"path":"2017/05/27/Lavarel-快速學習自我挑戰-Day17/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/05/27/Lavarel-快速學習自我挑戰-Day17/","excerpt":"","text":"Application Media 設定和顯示 新增 view views/media/index.blade.php 設定 media index view 12345678910111213141516171819202122232425262728293031323334@extends(&apos;layouts.admin&apos;)@section(&apos;content&apos;) &lt;h1&gt;Media&lt;/h1&gt; @if($photos) &lt;table class=&quot;table&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;id&lt;/th&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Created&lt;/th&gt; &lt;th&gt;Email&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; @foreach($photos as $photo) &lt;tr&gt; &lt;td&gt;&#123;&#123;$photo-&gt;id&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;$photo-&gt;file&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;$photo-&gt;created_at ? $photo-&gt;created_at : &apos;no date&apos;&#125;&#125;&lt;/td&gt; &lt;/tr&gt; @endforeach &lt;/tbody&gt; &lt;/table&gt; @endif@stop 新增 media controller php artisan make:control AdminMediasController 新增 routes Route::resource('admin/media', 'AdminMediasController'); 修改 layout admin 1234567&lt;li&gt; &lt;a href=&quot;&#123;&#123;route(&apos;admin.media.index&apos;)&#125;&#125;&quot;&gt;All Media&lt;/a&gt;&lt;/li&gt;&lt;li&gt; &lt;a href=&quot;&#123;&#123;route(&apos;admin.media.upload&apos;)&#125;&#125;&quot;&gt;Upload Media&lt;/a&gt;&lt;/li&gt; 在 AdminMediasController 新增 index function 1234567public function index()&#123; $photos = Photo::all(); return view(&apos;admin.media.index&apos;, compact(&apos;photos&apos;)); &#125; 修改 routes Route::get('admin/media/upload', ['as'=&gt;'admin.media.upload', 'uses'=&gt;'AdminMediasController@store']); 設定 view 刪除 routes (因為這個是為了不讓錯誤顯示) Route::get('admin/media/upload', ['as'=&gt;'admin.media.upload', 'uses'=&gt;'AdminMediasController@store']); 修改 layouts admin view &lt;a href=&quot; {{route('admin.media.create')}}&quot;&gt;Upload Media&lt;/a&gt; 在 AdminMediasController 新增 create function 12345public function create()&#123; return view(&apos;admin.media.create&apos;);&#125; 新增 media create view 1234567@extends(&apos;layouts.admin&apos;)@section(&apos;content&apos;) &lt;h1&gt;Upload Media&lt;/h1&gt;@stop 新增上傳外掛 Dropzone 上傳外掛 在 media create view 新增 script section 12345@section(&apos;scripts&apos;) &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/dropzone/4.3.0/min/dropzone.min.js&quot;&gt;&lt;/script&gt;@stop 在 media create view 新增 style section 12345@section(&apos;styles&apos;) &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/dropzone/4.3.0/min/dropzone.min.css&quot;&gt; @stop 在 layouts admin view 新增 yield 才能使用 section @yield('styles') @yield('scripts') 新增上傳區塊 12345&#123;!! Form::open([&apos;method&apos;=&gt;&apos;POST&apos;, &apos;action&apos;=&gt;&apos;AdminMediasController@store&apos;, &apos;class&apos;=&gt;&apos;dropzone&apos;]) !!&#125; &#123;&#123;csrf_field()&#125;&#125;&#123;!! Form::close() !!&#125; 上傳檔案 在 AdminMediasController 新增 store function 12345678910111213public function store(Request $request)&#123; $file = $request-&gt;file(&apos;file&apos;); $name = time() . $file-&gt;getClientOriginalName(); $file-&gt;move(&apos;images&apos;, $name); Photo::create([&apos;file&apos;=&gt;$name]); return $name;&#125; 刪除圖片 在 media index view 新增 delete button 12345678910&lt;td&gt; &#123;!! Form::open([&apos;method&apos;=&gt;&apos;DELETE&apos;, &apos;action&apos;=&gt;[&apos;AdminMediasController@destroy&apos;, $photo-&gt;id]]) !!&#125; &#123;&#123;csrf_field()&#125;&#125; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::submit(&apos;Delete Post&apos;, [&apos;class&apos;=&gt;&apos;btn btn-danger&apos;]) !!&#125; &lt;/div&gt; &#123;!! Form::close() !!&#125;&lt;/td&gt; 在 AdminMediaController 新增 destroy function 1234567891011public function destroy($id)&#123; $photo = Photo::findOrFail($id); unlink(public_path() . $photo-&gt;file); $photo-&gt;delete(); return redirect(&apos;/admin/media&apos;);&#125;","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Laravel","slug":"Laravel","permalink":"https://tingsyuanwang.github.io/tags/Laravel/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Lavarel 快速學習自我挑戰 Day16","slug":"Lavarel-快速學習自我挑戰-Day16","date":"2017-05-26T04:23:31.000Z","updated":"2017-05-26T09:08:02.000Z","comments":true,"path":"2017/05/26/Lavarel-快速學習自我挑戰-Day16/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/05/26/Lavarel-快速學習自我挑戰-Day16/","excerpt":"","text":"Application Post Part II 對貼文分類新增 model 和 migration 新增 model php artisan make:model Category -m 在 category 的 model 處理 mass assignment protected $fillable = ['name']; 在 create_categories_table 新增欄位 $table-&gt;string('name'); 將欄位寫入資料庫 php artisan migrate 與貼文分類顯示或創建貼文 修改 posts 的 index view &lt;td&gt; {{$post->category ? $post->category->name : 'Uncategorized'}}&lt;/td&gt; 修改 AdminPostsController 的 create function 12$categories = Category::lists(&apos;name&apos;,&apos;id&apos;)-&gt;all();return view(&apos;admin.posts.create&apos;, compact(&apos;categories&apos;)); 修改 Post create view 1234&lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::label(&apos;category_id&apos;, &apos;Category:&apos;) !!&#125; &#123;!! Form::select(&apos;category_id&apos;, [&apos;&apos;=&gt;&apos;Choose Categories&apos;] + $categories, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;&lt;/div&gt; 編輯貼文 修改 AdminPostsController 的 edit function 123$post = Post::findOrFail($id);$categories = Category::lists(&apos;name&apos;, &apos;id&apos;)-&gt;all();return view(&apos;admin.posts.edit&apos;, compact(&apos;post&apos;, &apos;categories&apos;)); 複製 create view 到 edit view 並修改 form {!! Form::model($post, ['method'=&gt;'PATCH', 'action'=&gt;['AdminPostsController@update', $post-&gt;id], 'files'=&gt;true]) !!} 在 posts index view 的名字新增超連結 &lt;td&gt;&lt;a href=&quot; {{route('admin.posts.edit', $post->id)}}&quot;&gt; {{$post->user->name}}&lt;/a&gt;&lt;/td&gt; 修改 post edit view 的 category {!! Form::select('category_id', $categories, null, ['class'=&gt;'form-control']) !!} 修改 AdminPostsController 的 update function 1234567891011121314151617$input = $request-&gt;all();if($file = $request-&gt;file(&apos;photo_id&apos;))&#123; $name = time() . $file-&gt;getClientOriginalName(); $file-&gt;move(&apos;images&apos;, $name); $photo = Photo::create([&apos;file&apos;=&gt;$name]); $input[&apos;photo_id&apos;] = $photo-&gt;id;&#125;Auth::user()-&gt;posts()-&gt;whereId($id)-&gt;first()-&gt;update($input);return redirect(&apos;/admin/posts&apos;); 在 post index view 縮短字的長度 {{str_limit($post->body, 30)}} 刪除貼文 在 post edit view 新增 delete button 123456789&#123;!! Form::open([&apos;method&apos;=&gt;&apos;DELETE&apos;, &apos;action&apos;=&gt;[&apos;AdminPostsController@destroy&apos;, $post-&gt;id]]) !!&#125; &#123;&#123;csrf_field()&#125;&#125; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::submit(&apos;Delete Post&apos;, [&apos;class&apos;=&gt;&apos;btn btn-danger col-sm-6&apos;]) !!&#125; &lt;/div&gt;&#123;!! Form::close() !!&#125; 修改 AdminPostsController 的 destroy function 1234567$post = Post::findOrfail($id);unlink(public_path() . $post-&gt;photo-&gt;file);$post-&gt;delete();return redirect(&apos;/admin/posts&apos;); 刪除使用者時也刪除貼文 修改 create_posts_table $table-&gt;foreign('user_id')-&gt;references('id')-&gt;on('users')-&gt;onDelete('cascade'); 更新資料庫 php artisan migrate:refresh 在編輯貼文時顯示圖片 修改 post edit view 12345&lt;div class=&quot;col-sm-3&quot;&gt; &lt;img src=&quot;&#123;&#123;$post-&gt;photo-&gt;file&#125;&#125;&quot; alt=&quot;&quot; class=&quot;img-responsive&quot;&gt;&lt;/div&gt; 設定分類 新增 Controller php artisan make:controller --resource AdminCategoriesController 新增 routes Route::resource('admin/categories', 'AdminCategoriesController'); 新增 categories index view 1234567@extends(&apos;layouts.admin&apos;);@section(&apos;content&apos;) &lt;h1&gt;Categories&lt;/h1&gt;@stop 修改 layout.admin 的 routes 1234567&lt;li&gt; &lt;a href=&quot;&#123;&#123;route(&apos;admin.categories.index&apos;)&#125;&#125;&quot;&gt;All Categories&lt;/a&gt;&lt;/li&gt;&lt;li&gt; &lt;a href=&quot;&#123;&#123;route(&apos;admin.categories.create&apos;)&#125;&#125;&quot;&gt;Create Category&lt;/a&gt;&lt;/li&gt; 創建分類 修改 AdminCategoriesController 的 index 123$categories = Category::all();return view(&apos;admin.categories.index&apos;, compact(&apos;categories&apos;)); 修改 categories index view 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253@extends(&apos;layouts.admin&apos;);@section(&apos;content&apos;) &lt;h1&gt;Categories&lt;/h1&gt; &lt;div class=&quot;col-sm-6&quot;&gt; &#123;!! Form::open([&apos;method&apos;=&gt;&apos;POST&apos;, &apos;action&apos;=&gt;&apos;AdminCategoriesController@store&apos;]) !!&#125; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::label(&apos;name&apos;, &apos;Name:&apos;) !!&#125; &#123;!! Form::text(&apos;name&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125; &lt;/div&gt; &#123;&#123;csrf_field()&#125;&#125; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::submit(&apos;Create Category&apos;, [&apos;class&apos;=&gt;&apos;btn btn-primary&apos;]) !!&#125; &lt;/div&gt; &#123;!! Form::close() !!&#125; &lt;/div&gt; &lt;div class=&quot;col-sm-6&quot;&gt; @if($categories) &lt;table class=&quot;table&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;id&lt;/th&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Created date&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; @foreach($categories as $category) &lt;tr&gt; &lt;td&gt;&#123;&#123;$category-&gt;id&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;$category-&gt;name&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;$category-&gt;created_at ? $category-&gt;created_at-&gt;diffForHumans() : &apos;No date&apos;&#125;&#125;&lt;/td&gt; &lt;/tr&gt; @endforeach &lt;/table&gt; @endif &lt;/div&gt;@stop 在 AdminCategoriesController store function 12Category::create($request-&gt;all());return redirect(&apos;admin/categories&apos;); 更新和刪除分類 修改 category edit view 1234567891011121314151617181920212223242526272829@extends(&apos;layouts.admin&apos;);@section(&apos;content&apos;) &lt;h1&gt;Categories&lt;/h1&gt; &lt;div class=&quot;col-sm-6&quot;&gt; &#123;!! Form::model($category, [&apos;method&apos;=&gt;&apos;PATCH&apos;, &apos;action&apos;=&gt;[&apos;AdminCategoriesController@update&apos;, $category-&gt;id]]) !!&#125; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::label(&apos;name&apos;, &apos;Name:&apos;) !!&#125; &#123;!! Form::text(&apos;name&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125; &lt;/div&gt; &#123;&#123;csrf_field()&#125;&#125; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::submit(&apos;Update Category&apos;, [&apos;class&apos;=&gt;&apos;btn btn-primary&apos;]) !!&#125; &lt;/div&gt; &#123;!! Form::close() !!&#125; &lt;/div&gt; &lt;div class=&quot;col-sm-6&quot;&gt; &lt;/div&gt;@stop 修改 AdminCategoriesController 的 edit function 12$category = Category::findOrFail($id);return view(&apos;admin.categories&apos;, compact(&apos;category&apos;)); 在 category edit view 新增 delete button 123456789&#123;!! Form::open([&apos;method&apos;=&gt;&apos;DELETE&apos;, &apos;action&apos;=&gt;[&apos;AdminCategoriesController@destroy&apos;, $category-&gt;id]]) !!&#125;&#123;&#123;csrf_field()&#125;&#125;&lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::submit(&apos;Delete Category&apos;, [&apos;class&apos;=&gt;&apos;btn btn-danger col-sm-6&apos;]) !!&#125;&lt;/div&gt;&#123;!! Form::close() !!&#125; 修改 AdminCategoriesController 的 destroy function 12Category::findOrFail($id)-&gt;delete();return redirect(&apos;/admin/categories&apos;); 修改 AdminCategoriesController 的 update function 123$category = Category::findOrFail($id);$category-&gt;update($request-&gt;all());return redirect(&apos;/admin/categories&apos;);","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Laravel","slug":"Laravel","permalink":"https://tingsyuanwang.github.io/tags/Laravel/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Lavarel 快速學習自我挑戰 Day15","slug":"Lavarel-快速學習自我挑戰-Day15","date":"2017-05-25T12:10:35.000Z","updated":"2017-05-25T16:55:48.000Z","comments":true,"path":"2017/05/25/Lavarel-快速學習自我挑戰-Day15/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/05/25/Lavarel-快速學習自我挑戰-Day15/","excerpt":"","text":"Application Post Part I 設定 routes 設定 404 page view 1234567@extends(&apos;layouts.app&apos;)@section(&apos;content&apos;) &lt;h1 class=&quot;text-center&quot;&gt;Opps no page available&lt;/h1&gt;@stop 新增 routes 在 admin group 裡面 Route::resource('admin/posts', 'AdminPostsController'); 新增 Controller php artisan make:controller --resource AdminPostsController 在 Controller 的 index return view('admin.posts.index'); 新增 /views/admin/posts/index.blade.php 1234567@extends(&apos;layouts.admin&apos;)@section(&apos;content&apos;) &lt;h1&gt;Posts&lt;/h1&gt;@stop 修改 layouts 的連結 All Posts -&gt; {{route('admin.posts.index')}} Create Post -&gt; {{route('admin.posts.create')}} 修改 Create 和 Edit 的 view 1234567@extends(&apos;layouts.admin&apos;)@section(&apos;content&apos;) &lt;h1&gt;Create Post&lt;/h1&gt;@stop 1234567@extends(&apos;layouts.admin&apos;)@section(&apos;content&apos;) &lt;h1&gt;Edit Post&lt;/h1&gt;@stop 修改 Controller 的 create return view('admin.posts.create'); Migration 新增 model php artisan make:model Post -m 在 create_posts_table 新增欄位 12345$table-&gt;integer(&apos;user_id&apos;)-&gt;unsigned()-&gt;index();$table-&gt;integer(&apos;category_id&apos;)-&gt;unsigned()-&gt;index();$table-&gt;integer(&apos;photo_id&apos;)-&gt;unsigned()-&gt;inex();$table-&gt;string(&apos;title&apos;);$table-&gt;text(&apos;body&apos;); 寫入資料庫 php artisan migrate 顯示貼文 在 Post model 處理 mass assignment 12345678protected $fillable = [ &apos;category_id&apos;, &apos;photo_id&apos;, &apos;title&apos;, &apos;body&apos;]; 進入 tinker 模式新增資料庫內容 php artisan tinker 新增一行資料 $post = App\\Post::create(['title'=&gt;'my first post', 'body'=&gt;'I love laravel with Edwin Diaz']); 修改 Controller 的 Index function 12$posts = Post::all();return view(&apos;admin.posts.index&apos;, compact(&apos;posts&apos;)); 在 Post index view 新增一個 table 讀取資料庫資料 1234567891011121314151617181920212223242526272829303132333435&lt;table class=&quot;table&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Id&lt;/th&gt; &lt;th&gt;User&lt;/th&gt; &lt;th&gt;Category&lt;/th&gt; &lt;th&gt;Photo&lt;/th&gt; &lt;th&gt;Title&lt;/th&gt; &lt;th&gt;body&lt;/th&gt; &lt;th&gt;Created&lt;/th&gt; &lt;th&gt;Updated&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; @if($posts) @foreach($posts as $post) &lt;tr&gt; &lt;td&gt;&#123;&#123;$post-&gt;id&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;$post-&gt;user_id&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;$post-&gt;category_id&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;$post-&gt;photo_id&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;$post-&gt;title&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;$post-&gt;body&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;$post-&gt;created_at-&gt;diffForHumans()&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;$post-&gt;updated_at-&gt;diffForHumans()&#125;&#125;&lt;/td&gt; &lt;/tr&gt; @endforeach @endif &lt;/tbody&gt;&lt;/table&gt; Relationship 設定 在 User model 新增 posts function 12345public function posts()&#123; return $this-&gt;hasMany(&apos;App\\Post&apos;);&#125; 在 Post model 新增 user function 12345public function user()&#123; return $this-&gt;belongsTo(&apos;App\\User&apos;);&#125; 修改 index view 的 user 欄位 {{$post->user->name}} 在 Post model 新增 photo 和 category function 12345678910public function photo()&#123; return $this-&gt;belongsTo(&apos;App\\Photo&apos;); &#125;public function category()&#123; return $this-&gt;belongsTo(&apos;App\\Category&apos;);&#125; 在 Role model 讓 name 可寫入 12345protected $fillable = [ &apos;name&apos;]; 創建表單 新增 create view 表單 1234567891011121314151617181920212223242526272829&#123;!! Form::open([&apos;method&apos;=&gt;&apos;POST&apos;, &apos;action&apos;=&gt;&apos;AdminPostsController@store&apos;, &apos;files&apos;=&gt;true]) !!&#125; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::label(&apos;title&apos;, &apos;Title:&apos;) !!&#125; &#123;!! Form::text(&apos;title&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::label(&apos;category_id&apos;, &apos;Category:&apos;) !!&#125; &#123;!! Form::select(&apos;category_id&apos;, array(&apos;&apos;=&gt;&apos;options&apos;), null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::label(&apos;photo_id&apos;, &apos;Photo:&apos;) !!&#125; &#123;!! Form::file(&apos;photo_id&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::label(&apos;body&apos;, &apos;Description:&apos;) !!&#125; &#123;!! Form::textarea(&apos;body&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;, &apos;rows&apos;=&gt;3]) !!&#125; &lt;/div&gt; &#123;&#123;csrf_field()&#125;&#125; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::submit(&apos;Create Post&apos;, [&apos;class&apos;=&gt;&apos;btn btn-primary&apos;]) !!&#125; &lt;/div&gt;&#123;!! Form::close() !!&#125; 新增 Request php artisan make:request PostsCreateRequest 修改 PostscreateRequest 12345678910111213141516public function authorize() &#123; return true; &#125;public function rules() &#123; return [ &apos;title&apos; =&gt;&apos;required&apos;, &apos;category_id&apos; =&gt;&apos;required&apos;, &apos;photo_id&apos; =&gt;&apos;required&apos;, &apos;body&apos; =&gt;&apos;required&apos; ]; &#125; 在 create post view include error message @include('includes.form_error') 創建貼文 更新 Controller 的 store function 12345678910111213141516171819$input = $request-&gt;all();$user = Auth::user();if($file = $request-&gt;file(&apos;photo_id&apos;))&#123; $name = time() . $file-&gt;getClientOriginalName(); $file-&gt;move(&apos;images&apos;, $name); $photo = Photo::create([&apos;file&apos;=&gt;$name]); $input[&apos;photo_id&apos;] = $photo-&gt;id;&#125;$user-&gt;posts()-&gt;create($input);return redirect(&apos;/admin/posts&apos;); 修改 Post index view 來顯示圖片 &lt;img height=&quot;100&quot; src=&quot;{{$post->photo ? $post->photo->file : 'http://placehold.it/400x400'}}&quot; alt=&quot;&quot;&gt;","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Laravel","slug":"Laravel","permalink":"https://tingsyuanwang.github.io/tags/Laravel/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Lavarel 快速學習自我挑戰 Day14","slug":"Lavarel-快速學習自我挑戰-Day14","date":"2017-05-04T16:06:02.000Z","updated":"2017-05-15T19:36:04.000Z","comments":true,"path":"2017/05/05/Lavarel-快速學習自我挑戰-Day14/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/05/05/Lavarel-快速學習自我挑戰-Day14/","excerpt":"","text":"Application 2 上傳功能 新增 enctype ('type'=&gt;true) {!! Form::open(['method'=&gt;'POST', 'action'=&gt;'AdminUsersController@store', 'files'=&gt;true]) !!} 新增 migration php artisan make:migration add_photo_id_to_users --table=users 修改 add_photo_id_to_users_table 1234567891011121314public function up()&#123; Schema::table(&apos;users&apos;, function (Blueprint $table) &#123; $table-&gt;string(&apos;photo_id&apos;); &#125;);&#125;public function down()&#123; Schema::table(&apos;users&apos;, function (Blueprint $table) &#123; $table-&gt;dropColumn(&apos;photo_id&apos;); &#125;);&#125; 在 Create Page 新增 upload 欄位 1234&lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::label(&apos;file&apos;, &apos;Title:&apos;) !!&#125; &#123;!! Form::file(&apos;file&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;&lt;/div&gt; 在 User model 讓欄位可寫入 protected $fillable = ['name', 'email', 'password', 'role_id', 'is_active', 'photo_id'] 修改 AdminUsersController 的 store function 123456public function store(UsersRequest $request)&#123; User::create($request-&gt;all()); return redirect(&apos;/admin/users&apos;);&#125; 新增 Model 和 migration php artisan make:model Photo -m 在 create_photos_table 新增欄位 $table-&gt;string('file'); 在 Photo model 讓 file 可寫入 protected $fillable = ['file']; 在 User model 新增 relationship public function photo(){return $this-&gt;belongsTo('App\\Photo');} 新增連結 在 layouts/admin.blade.php 新增 route link 1234567&lt;li&gt; &lt;a href=&quot;&#123;&#123;route(&apos;admin.users.index&apos;)&#125;&#125;&quot;&gt;All Users&lt;/a&gt;&lt;/li&gt;&lt;li&gt; &lt;a href=&quot;&#123;&#123;route(&apos;admin.users.create&apos;)&#125;&#125;&quot;&gt;Create User&lt;/a&gt;&lt;/li&gt; 修改 create page 1234&lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::label(&apos;photo_id&apos;, &apos;Photo:&apos;) !!&#125; &#123;!! Form::file(&apos;photo_id&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125;&lt;/div&gt; 在 AdminUsersController 的 store function 新增 1234567891011if($file = $request-&gt;file(&apos;photo_id&apos;)) &#123; $name = time() . $file-&gt;getClientOriginalName(); $file-&gt;move(&apos;images&apos;, $name); $photo = Photo::create([&apos;file&apos;=&gt;$name]); $input[&apos;photo_id&apos;] = $photo-&gt;id;&#125; 繼續在 store function 將密碼加密後儲存所有檔案 123$input[&apos;password&apos;] = bcrypt($request-&gt;password);User::create($input); 新增路徑資訊到 Photo model 1234567protected $uploads = &apos;/images/&apos;;public function getFileAttribute($photo)&#123; return $this-&gt;uploads . $photo;&#125; 新增 photo 到 User index page &lt;td&gt;&lt;img height=&quot;50&quot; src=&quot;{{$user->photo ? $user->photo->file : 'no user photo'}}&quot; alt=&quot;&quot;&gt;&lt;/td&gt; Edit page 修改 AdminUsersController 的 edit function (傳送 role 的資訊) 12345678public function edit($id) &#123; $user = User::findOrFail($id); $roles = Role::lists(&apos;name&apos;, &apos;id&apos;)-&gt;all(); return view(&apos;admin.users.edit&apos;, compact(&apos;user&apos;, &apos;roles&apos;)); &#125; 修改 edit page (先從 create page 複製頁面，將 form 連結 model) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647@extends(&apos;layouts.admin&apos;)@section(&apos;content&apos;) &lt;h1&gt;Edit User&lt;/h1&gt; &#123;!! Form::model($user, [&apos;method&apos;=&gt;&apos;PATCH&apos;, &apos;action&apos;=&gt;[&apos;AdminUsersController@update&apos;, $user-&gt;id], &apos;files&apos;=&gt;true]) !!&#125; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::label(&apos;name&apos;, &apos;Name:&apos;) !!&#125; &#123;!! Form::text(&apos;name&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::label(&apos;email&apos;, &apos;Email:&apos;) !!&#125; &#123;!! Form::email(&apos;email&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::label(&apos;role_id&apos;, &apos;Role:&apos;) !!&#125; &#123;!! Form::select(&apos;role_id&apos;, $roles , null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::label(&apos;is_active&apos;, &apos;Status:&apos;) !!&#125; &#123;!! Form::select(&apos;is_active&apos;, array(1 =&gt; &apos;Active&apos;, 0 =&gt; &apos;No Active&apos;), 0, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::label(&apos;photo_id&apos;, &apos;Photo:&apos;) !!&#125; &#123;!! Form::file(&apos;photo_id&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::label(&apos;password&apos;, &apos;Password:&apos;) !!&#125; &#123;!! Form::password(&apos;password&apos;, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125; &lt;/div&gt; &#123;&#123;csrf_field()&#125;&#125; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::submit(&apos;Create User&apos;, [&apos;class&apos;=&gt;&apos;btn btn-primary&apos;]) !!&#125; &lt;/div&gt; &#123;!! Form::close() !!&#125; @include(&apos;includes.form_error&apos;)@stop 在 edit page 新增圖片 123456789&lt;div class=&quot;col-sm-3&quot;&gt; &lt;img src=&quot;&#123;&#123;$user-&gt;photo ? $user-&gt;photo-&gt;file : &apos;http://placehold.it/400x400&apos;&#125;&#125;&quot; alt=&quot;&quot; class=&quot;img-responsive img-rounded&quot;&gt; &lt;/div&gt;&lt;div class=&quot;col-sm-9&quot;&gt;&lt;/div&gt; 將 users/index view 的圖片改成若無圖片，顯示 sample 圖片 &lt;td&gt;&lt;img height=&quot;50&quot; src=&quot;{{$user->photo ? $user->photo->file : 'http://placehold.it/400x400'}}&quot; alt=&quot;&quot;&gt;&lt;/td&gt; 將 AdminUsersController 的 update function 改用 UsersRequest 來做 validation public function update(UsersRequest $request, $id){} 修改 AdminUsersController 的 update function 12345678910111213141516171819202122public function update(UsersRequest $request, $id)&#123; $user = User::findOrFail($id); $input = $request-&gt;all(); if($file = $request-&gt;file(&apos;photo_id&apos;)) &#123; $name = time() . $file-&gt;getClientOriginalName(); $file-&gt;move(&apos;images&apos;, $name); $photo = Photo::create([&apos;file&apos; =&gt; $name]); $input[&apos;photo_id&apos;] = $photo-&gt;id; &#125; $user-&gt;update($input); return redirect(&apos;/admin/users&apos;)&#125; 新增新的 Request php artisan make:request UsersEditRequest 修改 Request public function authorize(){return true;} 123456789public function rules() &#123; return [ &apos;name&apos; =&gt; &apos;required&apos;, &apos;email&apos; =&gt; &apos;required&apos;, &apos;role_id&apos; =&gt; &apos;required&apos;, &apos;is_active&apos; =&gt; &apos;required&apos;, ]; &#125; 修改 AdminUsersController 的 create 和 update function 1234567891011if(trim($request-&gt;password) == &apos;&apos;)&#123; $input = $request-&gt;except(&apos;password&apos;);&#125; else &#123; $input = $request-&gt;all(); $input[&apos;password&apos;] = bcrypt($request-&gt;password);&#125; Mutator 123456789public function setPasswordAttribute($password)&#123; if(!empty($password))&#123; $this-&gt;attributes[&apos;password&apos;] = bcrypt($password); &#125;&#125; Middleware 新增一個 middleware php artisan make:middleware Admin 在 app\\kernel.php 註冊 middleware (routemiddleware) 'admin' =&gt; \\App\\Http\\Middleware\\Admin::class, 新增 404 頁面 resources\\views\\errors\\404.blade.php 在 User model 新增一個 function 1234567891011public function isAdmin()&#123; if($this-&gt;role-&gt;name == &quot;administrator&quot;)&#123; return true; &#125; return false;&#125; 修改 Admin middleware 123456789101112131415public function handle($request, Closure $next)&#123; if(Auth::check())&#123; if(Auth::user()-&gt;isAdmin())&#123; return $next($request); &#125; &#125; return redirect(&apos;/&apos;);&#125; Delete User 新增 form 到 Users/edit view 1234567&#123;!! Form::open([&apos;method&apos;=&gt;&apos;DELETE&apos;, &apos;action&apos;=&gt;[&apos;AdminUsersController@destroy&apos;, $user-&gt;id]]) !!&#125; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::submit(&apos;Delete User&apos;, [&apos;class&apos;=&gt;&apos;btn btn-danger&apos;]) !!&#125; &lt;/div&gt;&#123;!! Form::close() !!&#125; 在 AdminUsersController 新增 destroy function 12345678public function destroy($id)&#123; User::findOrfail($id)-&gt;delete(); Session::flash(&apos;deleted_user&apos;, &quot;The user has been deleted&quot;); return redirect(&apos;/admin/users&apos;);&#125; 將讀取到的 session 顯示在 Users/index view 12345@if(Session::has(&apos;deleted_user&apos;)) &lt;p class=&quot;bg-danger&quot;&gt;&#123;&#123;session(&apos;deleted_user&apos;)&#125;&#125;&lt;/p&gt;@endif 在目錄刪除圖片 修改 destroy function 123456789101112public function destroy($id)&#123; $user = User::findOrfail($id); unlink(public_path() . $user-&gt;photo-&gt;file); $user-&gt;delete(); Session::flash(&apos;deleted_user&apos;, &quot;The user has been deleted&quot;); return redirect(&apos;/admin/users&apos;);&#125;","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Laravel","slug":"Laravel","permalink":"https://tingsyuanwang.github.io/tags/Laravel/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Lavarel 快速學習自我挑戰 Day13","slug":"Lavarel-快速學習自我挑戰-Day13","date":"2017-05-03T19:07:21.000Z","updated":"2017-05-13T16:04:38.000Z","comments":true,"path":"2017/05/04/Lavarel-快速學習自我挑戰-Day13/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/05/04/Lavarel-快速學習自我挑戰-Day13/","excerpt":"","text":"Application 基礎設定 開新的專案 composer create-project --prefer-dist laravel/laravel codehacking 5.2.29 新增資料庫、設定環境變數、進行 migration php artisan migrate 設定 views 新增登入介面 php artisan make:auth 在 view 將目錄權限分開 新增 admin/index admin/users/index admin/users/create admin/users/edit admin/posts/index admin/posts/create admin/posts/edit admin/categories/index admin/categories/edit User table migration 加入 git 專案：git init、git add .、git commit -m &quot;my first commit - admin view created&quot; 新增資料欄位到 create_users_table.php $table-&gt;integer('role_id')-&gt;index()-&gt;unsigned()-&gt;nullable(); $table-&gt;integer('is_active')-&gt;default(0); 新增 model php artisan make:model Role -m 新增資料欄位到 create_roles_table.php $table-&gt;string('name'); Relation setup and data entry 新增 Relation 到 User model 12345public function role()&#123; return $this-&gt;belongsTo(&apos;App\\Role&apos;);&#125; 將資料重新 migrate 到資料庫 php artisan migrate:refresh 用 Tinker 測試 Relation 進入 tinder 模式 php aritsan tinker 找到第一個 User $user = App\\User::find(1) 檢查該 user 的 role $user-&gt;role 新增 User App\\User::create(['name'=&gt;'Edwin Diaz', 'email'=&gt;'edwin@codingfaculty.com']); Admin Controller and Routes 新增 routes Route::resource('admin/users', 'AdminUsersController'); 新增 controller php artisan make:controller --resource AdminUsersController 在 AdminUsersController 的 index function 加入 return view('admin.users.index'); 在 AdminUsersController 的 create function 加入 return view('admin.users.create'); 在 AdminUsersController 的 show function 加入 return view('admin.users.show'); 在 AdminUsersController 的 edit function 加入 return view('admin.users.edit'); 安裝 nodejs &amp; 下載檔案 安裝 gulp npm install --global gulp Gulp &amp; assets 安裝套件 npm install 將 css、js 檔案放置到 resources\\assets 將 font 檔案放置到 public 設定 gulpfile.js 12345678910111213141516171819.styles([ &apos;libs/blog-post.css&apos;, &apos;libs/bootstrap.css&apos;, &apos;libs/font-awesome.css&apos;, &apos;libs/metisMenu.css&apos;, &apos;libs/sb-admin-2.css&apos; ], &apos;./public/css/libs.css&apos;).scripts([ &apos;libs/jquery.js&apos;, &apos;libs/bootstrap.js&apos;, &apos;libs/metisMenu.js&apos;, &apos;libs/sb-admin-2.js&apos;, &apos;libs/scripts.js&apos; ], &apos;./public/js/libs.js&apos;) 編譯檔案 gulp 新增 view /layouts/admin.blade.php 修正頁面 修改 resources/assets/sass/app.scss #admin-page {padding-top: 0px;} 重新編譯檔案 gulp 新增 routes 12345Route::get(&apos;/admin&apos;, function()&#123; return view(&apos;admin.index&apos;);&#125;); 修改 admin/index view 1234567@extends(&apos;layouts.admin&apos;)@section(&apos;content&apos;) &lt;h1&gt;Admin&lt;/h1&gt;@stop 顯示 Users 修改 admin/users/index view 1234567@extends(&apos;layouts.admin&apos;)@section(&apos;content&apos;) &lt;h1&gt;Users&lt;/h1&gt;@stop 修改 AdminUsersController 123456public function index() &#123; $users = User::all(); return view(&apos;admin.users.index&apos;, compact(&apos;users&apos;)); &#125; 在 admin/users/index view 新增 table 1234567891011121314151617181920212223242526272829303132&lt;table class=&quot;table&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Id&lt;/th&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Email&lt;/th&gt; &lt;th&gt;Role&lt;/th&gt; &lt;th&gt;Active&lt;/th&gt; &lt;th&gt;Created&lt;/th&gt; &lt;th&gt;Updated&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; @if($users) @foreach($users as $user) &lt;tr&gt; &lt;td&gt;&#123;&#123;$user-&gt;id&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;$user-&gt;name&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;$user-&gt;email&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;$user-&gt;role-&gt;name&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;$user-&gt;is_active == 1 ? &apos;Active&apos; : &apos;No Active&apos;&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;$user-&gt;created_at-&gt;diffForHumans()&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;$user-&gt;updated_at-&gt;diffForHumans()&#125;&#125;&lt;/td&gt; &lt;/tr&gt; @endforeach @endif &lt;/tbody&gt;&lt;/table&gt; 新增 Create Page 1234567@extends(&apos;layouts.admin&apos;)@section(&apos;content&apos;) &lt;h1&gt;Create User&lt;/h1&gt;@stop 安裝 laravel collective html package composer require &quot;laravelcollective/html&quot;:&quot;^5.2.0&quot; 在 config/app.php 新增 provider Collective\\Html\\HtmlServiceProvider::class, 在 config/app.php 新增 aliases 'Form' =&gt; Collective\\Html\\FormFacade::class, 'Html' =&gt; Collective\\Html\\HtmlFacade::class, Create Page Form 表單 在 admin/users/create view 新增表單 1234567891011121314151617181920212223242526272829303132&#123;!! Form::open([&apos;method&apos;=&gt;&apos;POST&apos;, &apos;action&apos;=&gt;&apos;AdminUsersController@store&apos;]) !!&#125; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::label(&apos;name&apos;, &apos;Name:&apos;) !!&#125; &#123;!! Form::text(&apos;name&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::label(&apos;email&apos;, &apos;Email:&apos;) !!&#125; &#123;!! Form::email(&apos;email&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::label(&apos;role_id&apos;, &apos;Role:&apos;) !!&#125; &#123;!! Form::select(&apos;role_id&apos;, [&apos;&apos;=&gt;&apos;Choose Options&apos;] + $roles , null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::label(&apos;status&apos;, &apos;Status:&apos;) !!&#125; &#123;!! Form::select(&apos;status&apos;, array(1 =&gt; &apos;Active&apos;, 0 =&gt; &apos;No Active&apos;), 0, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::label(&apos;password&apos;, &apos;Password:&apos;) !!&#125; &#123;!! Form::password(&apos;password&apos;, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125; &lt;/div&gt; &#123;&#123;csrf_field()&#125;&#125; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::submit(&apos;Create User&apos;, [&apos;class&apos;=&gt;&apos;btn btn-primary&apos;]) !!&#125; &lt;/div&gt; &#123;!! Form::close() !!&#125; Role 的資料引入 (用 controller 抓取資料) - 修改 AdminUsersController 123456public function create() &#123; $roles = Role::lists(&apos;name&apos;, &apos;id&apos;)-&gt;all(); return view(&apos;admin.users.create&apos;, compact(&apos;roles&apos;)); &#125; 新增 Request php artisan make:request UsersRequest 新增 rules function validation 12345678910public function rules() &#123; return [ &apos;name&apos; =&gt; &apos;required&apos;, &apos;email&apos; =&gt; &apos;required&apos;, &apos;role_id&apos; =&gt; &apos;required&apos;, &apos;is_active&apos; =&gt; &apos;required&apos;, &apos;password&apos; =&gt; &apos;required&apos; ]; &#125; 將 AdminUsersController 的 store function 的 Request 換成 UsersRequest (要 import) public function store(UsersRequest $request) 新增 views/includes/form_error.blade.php 1234567891011121314151617@if(count($errors) &gt; 0) &lt;div class=&quot;alert alert-danger&quot;&gt; &lt;ul&gt; @foreach($errors-&gt;all() as $error) &lt;li&gt;&#123;&#123;$error&#125;&#125;&lt;/li&gt; @endforeach &lt;/ul&gt; &lt;/div&gt;@endif 在 create page view include form error @include('includes.form_error')","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Laravel","slug":"Laravel","permalink":"https://tingsyuanwang.github.io/tags/Laravel/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Lavarel 快速學習自我挑戰 Day12","slug":"Lavarel-快速學習自我挑戰-Day12","date":"2017-05-02T21:44:13.000Z","updated":"2017-05-11T19:05:13.000Z","comments":true,"path":"2017/05/03/Lavarel-快速學習自我挑戰-Day12/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/05/03/Lavarel-快速學習自我挑戰-Day12/","excerpt":"","text":"Sessions - Sessions 設定官方文件 Setting and Reading Sessions 加到 HomeController 1234$request-&gt;session()-&gt;put([&apos;edwin&apos;=&gt;&apos;master instructor&apos;]);// session([&apos;peter&apos;=&gt;&apos;student&apos;]); //最常用 $request-&gt;session()-&gt;get(&apos;edwin&apos;); Global Session Function Deleting 新增 session 123session([&apos;edwin2&apos;=&gt;&apos;your teacher&apos;]);return session(&apos;edwin2&apos;); 刪除 session：$request-&gt;session()-&gt;forget('edwin2'); 刪除所有 session：$request-&gt;session()-&gt;flush(); 顯示 session 狀態：return $request-&gt;session()-&gt;all(); Flashing Data 建立 flash data (只顯示一次的資料) 123$request-&gt;session()-&gt;flash(&apos;message&apos;, &apos;Post has been created&apos;);return $request-&gt;session()-&gt;get(&apos;message&apos;); data 保存久一點 123$request-&gt;session()-&gt;reflash(); $request-&gt;session()-&gt;keep(&apos;message&apos;); Sending Email / API - Mail 設定官方文件 mailgun Mailgun 官方網站 mailgun 設定 設定 config/mail.php 的寄件人名稱與 mail 'from' =&gt; ['address' =&gt; 'admin@pcelab.info', 'name' =&gt; 'Vincent Adler'], 設定 .env 123MAIL_DRIVER=mailgunMAILGUN_DOMAIN=XXXXXMAILGUN_SECRET=XXXXX 新增 mail 的 view (resources/views/mails/test.blade.php) 新增 routes 12345678910111213141516Route::get(&apos;/&apos;, function () &#123; $data = [ &apos;title&apos;=&gt; &apos;Hi student I hope you like the course&apos;, &apos;content&apos;=&gt; &apos;This laravel course was created with a lot of love and dedication for you&apos; ]; Mail::send(&apos;emails.test&apos;, $data, function($message)&#123; $message-&gt;to(&apos;dtvgood202@gmail.com&apos;, &apos;Vincent&apos;)-&gt;subject(&apos;Hello student how are you&apos;); &#125;);&#125;); 新增套件：composer require guzzlehttp/guzzle SSL certification error - 修改 vendor/guzzlehttp/guzzle/src/Client.php：configureDefaults function 的 verify 改為 false Git and Github (Version Control) 新增 branch 分支 git checkout -b newBranch 合併到主分支 git merge newBranch 刪除已合併到 master 的分支 git branch -d newBranch","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Laravel","slug":"Laravel","permalink":"https://tingsyuanwang.github.io/tags/Laravel/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Lavarel 快速學習自我挑戰 Day11","slug":"Lavarel-快速學習自我挑戰-Day11","date":"2017-05-01T19:43:56.000Z","updated":"2017-05-10T21:43:54.000Z","comments":true,"path":"2017/05/02/Lavarel-快速學習自我挑戰-Day11/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/05/02/Lavarel-快速學習自我挑戰-Day11/","excerpt":"","text":"Form Login - Authentication 設定官方文件 安裝新的 Laravel composer create-project --prefer-dist laravel/laravel login 5.2.29 設定 vhost Database 連線和 migration 建立資料庫、設定 .env 直接 migrate php artisan migrate 建立登入系統 php artisan make:auth 取得登入的使用者資料 修改 HomeController 123456public function index() &#123; $user = Auth::user(); return view(&apos;home&apos;, compact(&apos;user&apos;)); &#125; 在 view 取得資料 {{$user->name}} Auth::check：檢查登入資料、Auth::attempt：檢查是否有權限。 Middleware - Middleware 設定官方文件 建立 Middleware 建立一個新的 middleware：php artisan make:middleware RoleMiddleware 進入維護模式：php artisan down 關閉維護模式：php artisan up 在 kernal.php 新增 alias：'role' =&gt; \\App\\Http\\Middleware\\RoleMiddleware::class, 新增 routes Route::get('/admin/user/roles', ['middleware'=&gt;'role', function(){return &quot;Middleware role&quot;;}]); 修改 RoleMiddleware 導向至首頁 return redirect('/'); Middleware 應用 - roles, migration and relations 新增 Role Model：php artisan make:model Role -m 新增 role_id 到 User table：$table-&gt;integer('role_id'); 新增 name 到 Role table：$table-&gt;string('name'); 更新資料庫：php artisan migrate:refresh 在 User Model 新增 relation 12345public function role()&#123; return $this-&gt;belongsTo(&apos;App\\Role&apos;); &#125; Middleware 應用 1 新增一個新的 middleware：php aritsan make:middleware IsAdmin 在 kernal.php 新增 alias：'IsAdmin' =&gt; \\App\\Http\\Middleware\\IsAdmin::class, 在 User Model 新增 function 1234567891011public function isAdmin()&#123; if($this-&gt;role-&gt;name == &apos;administrator&apos;)&#123; return true; &#125; return false;&#125; 在 routes 測試 function 12345if($user-&gt;isAdmin())&#123; echo &quot;this user is a administrator&quot;;&#125; Middleware 應用 2 將 function 從 routes 移動到 IsAdmin middle ware 的 handle function 1234567$user = Auth::user();if($user-&gt;isAdmin())&#123; return redirect()-&gt;intended(&apos;/admin&apos;);&#125; 新增 routes 連到 controller：Route::get('/admin', 'AdminController@index'); 新增 controller：php artisan make:controller AdminController 新增 function 到 controller 12345678910public function __construct() &#123; $this-&gt;middleware(&apos;IsAdmin&apos;); &#125; public function index()&#123; return &quot;you are and administrator because you are seeing this page&quot;; &#125; 如果不是 administrator 就導向首頁 1234567$user = Auth::user();if(!$user-&gt;isAdmin())&#123; return redirect(&apos;/&apos;);&#125;","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Laravel","slug":"Laravel","permalink":"https://tingsyuanwang.github.io/tags/Laravel/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Lavarel 快速學習自我挑戰 Day10","slug":"Lavarel-快速學習自我挑戰-Day10","date":"2017-05-01T15:21:35.000Z","updated":"2017-05-05T19:24:33.000Z","comments":true,"path":"2017/05/01/Lavarel-快速學習自我挑戰-Day10/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/05/01/Lavarel-快速學習自我挑戰-Day10/","excerpt":"","text":"Model Manipulation Dates 搜尋套件 composer search carbon 引用套件 use Carbon\\Carbon; 新增 routes 12345678910111213141516171819Route::get(&apos;/dates&apos;, function()&#123; $date = new DateTime(&apos;+1 week&apos;); echo $date-&gt;format(&apos;m-d-Y&apos;); echo &apos;&lt;br&gt;&apos;; echo Carbon::now()-&gt;addDays(10)-&gt;diffForHumans(); echo &apos;&lt;br&gt;&apos;; echo Carbon::now()-&gt;subMonth(5)-&gt;diffForHumans(); echo &apos;&lt;br&gt;&apos;; echo Carbon::now()-&gt;yesterday()-&gt;diffForHumans();&#125;); Accessors (pull data out of database) 修改 model 123456public function getNameAttribute($value)&#123;// return ucfirst($value); //第一個字大寫 return strtoupper($value); //全部變成大寫 &#125; 修改 routes 1234567Route::get(&apos;/getname&apos;, function()&#123; $user = User::find(1); echo $user-&gt;name;&#125;); Mutators - Mutators 設定官方文件 修改 model 12345public function setNameAttribute($value)&#123; $this-&gt;attributes[&apos;name&apos;] = strtoupper($value); &#125; 修改 routes 123456789Route::get(&apos;/setname&apos;, function()&#123; $user = User::find(1); $user-&gt;name= &quot;william&quot;; $user-&gt;save();&#125;); Query Scopes - Query Scopes 設定官方文件 修改 PostsController 123456public function index() &#123; $posts = Post::latest(); return view(&apos;posts.index&apos;, compact(&apos;posts&apos;)); &#125; 修改 Post model 12345public static function scopeLatest($query)&#123; return $query-&gt;orderBy(&apos;id&apos;, &apos;asc&apos;)-&gt;get(); &#125; 上傳檔案 新增 Views 修改第三個參數 'files'=&gt;true 來新增 enctype ，並加入上傳的 input 12345678910111213141516171819&#123;!! Form::open([&apos;method&apos;=&gt;&apos;POST&apos;, &apos;action&apos;=&gt;&apos;PostsController@store&apos;, &apos;files&apos;=&gt;true]) !!&#125; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::label(&apos;title&apos;, &apos;Title:&apos;) !!&#125; &#123;!! Form::text(&apos;title&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125; &lt;/div&gt; &#123;&#123;csrf_field()&#125;&#125; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::file(&apos;file&apos;, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::submit(&apos;Create Post&apos;, [&apos;class&apos;=&gt;&apos;btn btn-primary&apos;]) !!&#125; &lt;/div&gt; &#123;!! Form::close() !!&#125; 取得上傳檔案資訊 修改 PostsController 123456789101112public function store(CreatePostRequest $request) &#123; $file = $request-&gt;file(&apos;file&apos;); //取得檔案，會以暫存檔(temp)呈現 echo &quot;&lt;br&gt;&quot;; echo $file-&gt;getClientOriginalName(); //取得原始名稱 echo &quot;&lt;br&gt;&quot;; echo $file-&gt;getClientSize(); //取得檔案大小 &#125; 將上傳的檔案寫入資料庫 (persist file data into database) 新增一個 migration 並關聯到 posts php artisan make:migration add_path_column_to_posts --table=posts 新增 migration 到資料庫 php artisan migrate 讓 path 欄位可寫入 protected $fillable = ['path']; 設定 PostsController 讓檔案可以寫入資料庫 12345678910111213141516public function store(CreatePostRequest $request) &#123; $input = $request-&gt;all(); if($file = $request-&gt;file(&apos;file&apos;))&#123; $name = $file-&gt;getClientOriginalName(); $file-&gt;move(&apos;images&apos;, $name); $input[&apos;path&apos;] = $name; &#125; Post::create($input); &#125; 顯示上傳的圖片 新增 image-container 到 index.blade.php 12345&lt;div class=&quot;image-container&quot;&gt; &lt;img height=&quot;100&quot; src=&quot;&#123;&#123;$post-&gt;path&#125;&#125;&quot; alt=&quot;&quot;&gt; &lt;/div&gt; 新增目錄到 Post model public $directory = '/images/'; 用 Accessors 新增圖片路徑 12345public function getPathAttribute($value)&#123; return $this-&gt;directory . $value; &#125;","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Laravel","slug":"Laravel","permalink":"https://tingsyuanwang.github.io/tags/Laravel/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Lavarel 快速學習自我挑戰 Day9","slug":"Lavarel-快速學習自我挑戰-Day9","date":"2017-04-30T15:21:35.000Z","updated":"2017-05-04T08:16:35.000Z","comments":true,"path":"2017/04/30/Lavarel-快速學習自我挑戰-Day9/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/04/30/Lavarel-快速學習自我挑戰-Day9/","excerpt":"","text":"Form and Validation 設定 Migration &amp; Relations 在 create_posts_table.php 新增 user_id $table-&gt;integer('user_id')-&gt;unsigned(); 重新將資料匯入資料庫 php artisan migrate:refresh 設定 Views &amp; Routes 設定 Controller Route Route::resource('/posts', 'PostsController'); 在 resources/views 底下新增 posts，新增 index、edit、create、show 的 blade.php View 模板 設定 create 的 markup 123456789101112131415161718@extends(&apos;layouts.app&apos;)@section(&apos;content&apos;) &lt;form method=&quot;post&quot; action=&quot;/posts&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;title&quot; placeholder=&quot;Enter title&quot;&gt; // 避免 TokenMismatchException Error &#123;&#123;csrf_field()&#125;&#125; &lt;input type=&quot;submit&quot; name=&quot;submit&quot;&gt; &lt;/form&gt;@stop@yield(&apos;footer&apos;) 設定 Controller &amp; View 在 PostsController 的 create 新增 View public function create(){return view('posts.create');} 在 PostsController 的 store 回傳資料 public function store(Request $request){return $request-&gt;all();} 將資料傳送到資料庫 修改 PostsController 的 store function 1234567891011121314151617181920212223242526 public function store(Request $request) &#123;// return $request-&gt;all(); // First method Post::create($request-&gt;all()); // second method// $input = $request-&gt;all();//// $input[&apos;title&apos;] = $request-&gt;title;//// Post::create($request-&gt;all()); // third method// $post = new Post;//// $post-&gt;title = $request-&gt;title;//// $post-&gt;save(); &#125; 讀取資料 在 PostsController 的 store 新增導向函式 return redirect('/posts') 在 PostsController 的 index 讀取所有的 post 並傳送給 index 的 View 去呈現 $posts = Post::all(); return view('posts.index', compact('posts')); 修改 index.blade.php 12345678910111213@extends(&apos;layouts.app&apos;)@section(&apos;content&apos;) &lt;ul&gt; @foreach($posts as $post) &lt;li&gt;&#123;&#123;$post-&gt;title&#125;&#125;&lt;/li&gt; @endforeach &lt;/ul&gt;@endsection@yield(&apos;footer&apos;) 顯示單一貼文並修改 在 PostsController 的 show 讀取特定 id 的 post 並傳送給 show 的 View 去呈現 $post = Post::findOrFail($id); return view('posts.show', compact('post')); 修改 show.blade.php &lt;h1&gt;{{$post->title}}&lt;/h1&gt; 讓 index.blade.php 可以超連結 &lt;li&gt;&lt;a href=&quot;{{route('posts.show', $post->id)}}&quot;&gt; {{$post->title}}}&lt;/a&gt;&lt;/li&gt; edit 頁面製作 在 PostsController 的 edit 讀取特定 id 的 post 並傳送給 edit 的 View 使用 $post = Post::findOrFail($id); return view('posts.edit', compact('post')); 修改 edit.blade.php 12345678910111213141516171819202122@extends(&apos;layouts.app&apos;)@section(&apos;content&apos;) &lt;h1&gt;Edit Post&lt;/h1&gt; &lt;form method=&quot;post&quot; action=&quot;/posts/&#123;&#123;$post-&gt;id&#125;&#125;&#125;&quot;&gt; //取得 Token &#123;&#123;csrf_field()&#125;&#125; &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;PUT&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;title&quot; placeholder=&quot;Enter title&quot; value=&quot;&#123;&#123;$post-&gt;title&#125;&#125;&quot;&gt; &lt;input type=&quot;submit&quot; name=&quot;submit&quot;&gt; &lt;/form&gt;@endsection@yield(&apos;footer&apos;) 編輯紀錄並重新導向 修改 PostsController 的 update function $post = Post::findOrFail($id); $post-&gt;update($request-&gt;all()); return redirect('/posts'); 在 show.blade.php 新增超連結到編輯 &lt;h1&gt;&lt;a href=&quot;{{route('posts.edit', $post->id)}}&quot;&gt;{{$post->title}}&lt;/a&gt;&lt;/h1&gt; 刪除貼文 修改 PostsController 的 delete function $post = Post::whereId($id)-&gt;delete(); return redirect('/posts'); 新增 delete button edit.blade.php 123456789&lt;form method=&quot;post&quot; action=&quot;/posts/&#123;&#123;$post-&gt;id&#125;&#125;&quot;&gt; &#123;&#123;csrf_field()&#125;&#125; &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;DELETE&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;DELETE&quot;&gt; &lt;/form&gt; Forms - Package and Validation - Forms &amp; HTML 設定官方文件 Validation 設定官方文件 安裝套件 &amp; 測試 在 composer.json 的 require 新增套件 &quot;laravelcollective/html&quot;:&quot;^5.2.0&quot; 更新套件 composer update 在 config/app.php 的 provider 新增 Collective\\Html\\HtmlServiceProvider::class, 在 config/app.php 的 aliases 新增 'Form' =&gt; Collective\\Html\\FormFacade::class, 'Html' =&gt; Collective\\Html\\HtmlFacade::class, 在 create.blade.php 將 &lt;form method=&quot;post&quot; action=&quot;/posts&quot;&gt; 取代來測試套件 {!! Form::open() !!} 修改 form 套件的內容 修改 form package 的傳遞方式 {!! Form::open(['method'=&gt;'POST', 'action'=&gt;'PostsController@store']) !!} {!! Form::close() !!} 將表單改為 form package 的形式，並使用 Bootstrap 的 class 1234567891011121314&lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::label(&apos;title&apos;, &apos;Title:&apos;) !!&#125; &#123;!! Form::text(&apos;title&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125; &lt;/div&gt; &#123;&#123;csrf_field()&#125;&#125; &lt;div class=&quot;form-group&quot;&gt; &#123;!! Form::submit(&apos;Create Post&apos;, [&apos;class&apos;=&gt;&apos;btn btn-primary&apos;]) !!&#125; &lt;/div&gt; Update &amp; Delete 修改 edit.blade.php 123456789101112131415161718&#123;!! Form::model($post, [&apos;method&apos;=&gt;&apos;PATCH&apos;, &apos;action&apos;=&gt;[&apos;PostsController@update&apos;, $post-&gt;id]]) !!&#125; &#123;&#123;csrf_field()&#125;&#125; &#123;!! Form::label(&apos;title&apos;, &apos;Title:&apos;) !!&#125; &#123;!! Form::text(&apos;title&apos;, null, [&apos;class&apos;=&gt;&apos;form-control&apos;]) !!&#125; &#123;!! Form::submit(&apos;Update Post&apos;, [&apos;class&apos;=&gt;&apos;btn btn-info&apos;]) !!&#125; &#123;!! Form::close() !!&#125; &#123;!! Form::open([&apos;method&apos;=&gt;&apos;DELETE&apos;, &apos;action&apos;=&gt;[&apos;PostsController@destroy&apos;, $post-&gt;id]]) !!&#125; &#123;&#123;csrf_field()&#125;&#125; &#123;!! Form::submit(&apos;Delete Post&apos;, [&apos;class&apos;=&gt;&apos;btn btn-danger&apos;]) !!&#125; &#123;!! Form::close() !!&#125; Validation 將 validate function 新增到 PostsController 的 store function 123456$this-&gt;validate($request, [ &apos;title&apos;=&gt; &apos;required&apos;, &apos;content&apos;=&gt; &apos;required&apos; ]); 顯示錯誤 修改 validation $this-&gt;validate($request, [ 'title'=&gt; 'required|max:4' ]); 在 create.blade.php 新增 error display 1234567891011121314151617@if(count($errors) &gt; 0) &lt;div class=&quot;alert alert-danger&quot;&gt; &lt;ul&gt; @foreach($errors-&gt;all() as $error) &lt;li&gt;&#123;&#123;$error&#125;&#125;&lt;/li&gt; @endforeach &lt;/ul&gt; &lt;/div&gt;@endif advanced validation 新增一個 request php artisan make:request CreatePostRequest 修改 PostsController 的 store function，並 import Request public function store(Requests\\CreatePostRequest $request) 修改 CreatePostRequest.php 的 authorize 為 true 修改 CreatePostRequest.php 的 rules 為 required (validation的效果) 'title' =&gt; 'required' 將 validation 註解掉 $this-&gt;validate($request, [ 'title'=&gt; 'required|max:4' ]); PhpStorm snippet PhpStorm-&gt;Preferences-&gt;Editor-&gt;Live template","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Laravel","slug":"Laravel","permalink":"https://tingsyuanwang.github.io/tags/Laravel/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Lavarel 快速學習自我挑戰 Day8","slug":"Lavarel-快速學習自我挑戰-Day8","date":"2017-04-29T15:21:35.000Z","updated":"2017-05-03T08:08:15.000Z","comments":true,"path":"2017/04/29/Lavarel-快速學習自我挑戰-Day8/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/04/29/Lavarel-快速學習自我挑戰-Day8/","excerpt":"","text":"Polymorphic Relationship (CRUD) - Eloquent Relationship 設定官方文件 安裝＋設定 新增一個專案 composer create-project --prefer-dist laravel/laravel polymorphic 5.2.29 建立資料庫 &amp; 設定 .env 資料庫設定和 migration 新增 三個model php artisan make:model Staff -m php artisan make:model Product -m php artisan make:model Photo -m 新增 Staff 和 Product migration 欄位 $table-&gt;string('name'); 新增 Photo migration 欄位 $table-&gt;string('path'); $table-&gt;integer('imageable_id'); $table-&gt;string('imageable_type'); 進行 migrate php artisan migrate 設定 Relation 和 mass assignment 在 Photo.php 設定 Relation public function imageable(){return $this-&gt;morphTo();} 在 Photo.php 新增 protected，讓資料可填入 protected $fillable = ['path']; 在 Staff.php 和 Product.php 設定 Relation public function photos(){return $this-&gt;morphMany('App\\Photo', 'imageable');} 在 Staff.php 新增 protected，讓資料可填入 protected $fillable = ['name']; 新增資料 新增 routes 12345678910use App\\Staff;Route::get(&apos;/create&apos;, function()&#123; $staff = Staff::find(1); $staff-&gt;photos()-&gt;create([&apos;path&apos;=&gt;&apos;example.jpg&apos;]);&#125;); 讀取資料 新增 routes 1234567891011Route::get(&apos;/read&apos;, function()&#123; $staff = Staff::findOrFail(1); foreach($staff-&gt;photos as $photo)&#123; return $photo-&gt;path; &#125;&#125;); 更新資料 新增 routes 1234567891011Route::get(&apos;/update&apos;, function()&#123; $staff = Staff::findOrFail(1); $photo = $staff-&gt;photos()-&gt;whereId(1)-&gt;first(); $photo-&gt;path = &quot;Update example.jpg&quot;; $photo-&gt;save();&#125;); 刪除資料 新增 routes 1234567Route::get(&apos;/delete&apos;, function()&#123; $staff = Staff::findOrFail(1); $staff-&gt;photos()-&gt;whereId(1)-&gt;delete();&#125;); Assign &amp; Unassign assign Route::get('/assign', function(){ $staff = Staff::findOrFail(1); $photo = Photo::findOrFail(4); $staff-&gt;photos()-&gt;save($photo); }); unassign Route::get('/un-assign', function(){ $staff = Staff::findOrFail(1); $staff-&gt;photos()-&gt;whereId(4)-&gt;update(['imageable_id'=&gt;'', 'imageable_type'=&gt;'']); }); Polymorphic Many to Many Relationship (CRUD) - Eloquent Relationship 設定官方文件 安裝＋設定 新增一個專案 composer create-project --prefer-dist laravel/laravel polymorphicmanytomany 5.2.29 建立資料庫 &amp; 設定 .env 資料庫設定和 migration 新增 三個model php artisan make:model Post -m php artisan make:model Video -m php artisan make:model Tag -m php artisan make:model Taggable -m 新增 Post、Video 和 Tag migration 欄位 $table-&gt;string('name'); 新增 Taggable migration 欄位 $table-&gt;integer('tag_id'); $table-&gt;integer('taggable_id'); $table-&gt;string('taggable_type'); 進行 migrate php artisan migrate 設定 Relation 和 mass assignment 在 Post.php 和 Video.php 設定 Relation public function tags(){return $this-&gt;morphToMany('App\\Tag', 'taggable');} 在 Post.php、Video.php 和 Tag.php 新增 protected，讓資料可填入 protected $fillable = ['name'];; 新增資料 新增 routes 123456789101112131415Route::get(&apos;/create&apos;, function()&#123; $post = Post::create([&apos;name&apos;=&gt;&apos;My first post 1&apos;]); $tag1 = Tag::find(1); $post-&gt;tags()-&gt;save($tag1); $video = Video::create([&apos;name&apos;=&gt;&apos;Video.mov&apos;]); $tag2 = Tag::find(2); $video-&gt;tags()-&gt;save($tag2);&#125;); 讀取資料 新增 routes 1234567891011Route::get(&apos;/read&apos;, function()&#123; $post = Post::findOrFail(1); foreach ($post-&gt;tags as $tag)&#123; echo $tag; &#125;&#125;); 更新資料 新增 routes 123456789101112131415161718192021Route::get(&apos;/update&apos;, function()&#123;// $post = Post::findOrFail(1);//// foreach ($post-&gt;tags as $tag)&#123;//// return $tag-&gt;whereName(&apos;PHP&apos;)-&gt;update([&apos;name&apos;=&gt;&apos;Updated PHP&apos;]);//// &#125; $post = Post::findOrFail(1); $tag = Tag::find(2); $post-&gt;tags()-&gt;save($tag);// $post-&gt;tags()-&gt;attach($tag);//// $post-&gt;tags()-&gt;sync([1,2]);&#125;); 刪除資料 新增 routes 123456789101112Route::get(&apos;/delete&apos;, function()&#123; $post = Post::find(2); foreach ($post-&gt;tags as $tag)&#123; $tag-&gt;whereId(4)-&gt;delete(); &#125;&#125;);","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Laravel","slug":"Laravel","permalink":"https://tingsyuanwang.github.io/tags/Laravel/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Lavarel 快速學習自我挑戰 Day7","slug":"Lavarel-快速學習自我挑戰-Day7","date":"2017-04-28T15:21:35.000Z","updated":"2017-04-30T17:43:00.000Z","comments":true,"path":"2017/04/28/Lavarel-快速學習自我挑戰-Day7/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/04/28/Lavarel-快速學習自我挑戰-Day7/","excerpt":"","text":"One to Many Relationship (CRUD) - Eloquent Relationship 設定官方文件 安裝＋設定 新增一個專案 composer create-project --prefer-dist laravel/laravel onetomany 5.2.29 建立資料庫 &amp; 設定 .env 資料庫設定和 migration 新增 model php artisan make:model Post -m 新增欄位 $table-&gt;integer('user_id')-&gt;unsigned()-&gt;nullable()-&gt;index(); $table-&gt;string('title'); $table-&gt;text('body'); 進行 migrate php artisan migrate 設定 Relation 和 mass assignment 在 User.php 設定 Relation public function posts() {return $this-&gt;hasMany('App\\Post');} 在 Post.php 新增 protected，讓資料可填入 protected $fillable = ['title','body']; 用 tinker 和 routes 新增資料 進入 tinker 模式 php artisan tinker 新增一筆 User App\\User::create(['name'=&gt;'Edwin Diaz', 'email'=&gt;'edwin@codingfaculty.com', 'password'=&gt;bcrypt(&quot;123&quot;)]) 離開 tinker 模式 exit 用 routes 的方式 123456789Route::get(&apos;/insert&apos;, function()&#123; $user = User::findOrFail(1); $post = new Post([&apos;title&apos;=&gt;&apos;My first post with Edwin Diaz&apos;, &apos;body&apos;=&gt;&apos;I love Laravel, with Edwin Diaz&apos;]); $user-&gt;posts()-&gt;save($post); &#125;); 讀取資料 新增 routes 12345678910111213Route::get(&apos;/read&apos;, function()&#123; $user = User::findOrFail(1);// dd($user); //一種 collection object foreach($user-&gt;posts as $post)&#123; echo $post-&gt;title . &quot;&lt;br&gt;&quot;; &#125;&#125;); 更新資料 新增 routes 12345678Route::get(&apos;/update&apos;, function()&#123; $user = User::find(1); $user-&gt;posts()-&gt;where(&apos;id&apos;, &apos;=&apos;, &apos;2&apos;)-&gt;update([&apos;title&apos;=&gt;&apos;I love laravel2&apos;, &apos;body&apos;=&gt;&apos;This is awesome, thank you Edwin2&apos;]);&#125;); 刪除資料 新增 routes 123456789Route::get(&apos;/delete&apos;, function()&#123; $user = User::find(1); $user-&gt;posts()-&gt;whereId(1)-&gt;delete();// $user-&gt;posts()-&gt;delete(); // 刪除全部&#125;); Many to Many Relationship (CRUD) - Eloquent Relationship 設定官方文件 安裝＋設定 新增一個專案 composer create-project --prefer-dist laravel/laravel manytomany 5.2.29 建立資料庫 &amp; 設定 .env 資料庫設定和 migration 新增 model php artisan make:model Role -m 新增 migration php artisan make:migration create_role_user_table --create=role_user 在 create_role_user_table 新增欄位 $table-&gt;integer('user_id')-&gt;unsigned()-&gt;nullable()-&gt;index(); $table-&gt;integer('role_id')-&gt;unsigned()-&gt;nullable()-&gt;index(); 在 create_roles_table 新增欄位 $table-&gt;string('name'); 進行 migrate php artisan migrate 設定 Relation 和 mass assignment 在 User.php 設定 Relation public function roles() {return $this-&gt;belongsToMany('App\\Role');} 在 Post.php 新增 protected，讓資料可填入 protected $fillable = ['name']; 新增資料 新增 routes 123456789Route::get(&apos;/create&apos;, function()&#123; $user = User::find(1); $role = new Role([&apos;name&apos;=&gt;&apos;Administrator&apos;]); $user-&gt;roles()-&gt;save($role);&#125;); 讀取資料 新增 routes 1234567891011Route::get(&apos;/read&apos;, function()&#123; $user = User::findOrFail(1); foreach($user-&gt;roles as $role)&#123; echo $role-&gt;name; &#125;&#125;); 更新資料 新增 routes 123456789101112131415161718192021Route::get(&apos;/update&apos;, function()&#123; $user = User::findOrFail(1); if($user-&gt;has(&apos;roles&apos;))&#123; foreach($user-&gt;roles as $role)&#123; if($role-&gt;name == &apos;Administrator&apos;)&#123; $role-&gt;name = &quot;subscriber&quot;; $role-&gt;save(); &#125; &#125; &#125;&#125;); 刪除資料 新增 routes 1234567891011Route::get(&apos;/delete&apos;, function()&#123; $user = User::findOrFail(1); foreach($user-&gt;roles as $role)&#123; $role-&gt;whereId(5)-&gt;delete(); &#125;&#125;); Attaching, Detaching and Syncing attach：新增 user 的 role Route::get('/attach', function(){ $user = User::findOrFail(1); $user-&gt;roles()-&gt;attach(4); }); detach：把 user 的 role 移除 Route::get('/detach', function(){ $user = User::findOrFail(1); $user-&gt;roles()-&gt;detach(); }); sync：把 user_id 和多個 role_id 做連結 Route::get('/sync', function(){ $user = User::findOrFail(1); $user-&gt;roles()-&gt;sync([6,7]); });","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Laravel","slug":"Laravel","permalink":"https://tingsyuanwang.github.io/tags/Laravel/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Lavarel 快速學習自我挑戰 Day6","slug":"Lavarel-快速學習自我挑戰-Day6","date":"2017-04-27T02:19:30.000Z","updated":"2017-04-30T15:16:32.000Z","comments":true,"path":"2017/04/27/Lavarel-快速學習自我挑戰-Day6/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/04/27/Lavarel-快速學習自我挑戰-Day6/","excerpt":"","text":"Tinker 使用 Tinker 建立資料 進入 Tinker 模式 php artisan tinker 建立資料 $post = App\\Post::create(['title'=&gt;'PHP post from tinker','content'=&gt;'PHP content from tinker']); 再看一次資料 $post 創建物件 $post = new App\\Post 新增 title 到物件 $post-&gt;title = &quot;New Title from this object&quot; 新增 content 到物件 $post-&gt;content = &quot;yeah baby I\\'m coding and doing awesome&quot; 寫入資料庫 $post-&gt;save() 離開 Tinker 模式 exit 使用 Tinker 讀取資料庫 讀取資料 $post = App\\Post::find(5); 用 constraint 的方式讀取 $post = App\\Post::where('id', 5)-&gt;first(); $post = App\\Post::whereId(5)-&gt;first(); 更新和刪除資料庫 更新 title $post-&gt;title = &quot;update record with id 4&quot; 更新 content $post-&gt;content = &quot;updated record content with id 4&quot; 寫入資料庫 $post-&gt;save() 從資料庫刪除(丟入垃圾桶) $post-&gt;delete() 從資料庫強迫刪除 $post = App\\Post::onlyTrashed() $post-&gt;forceDelete() Relations in Tinker 搜尋 User $user = App\\User::find(1) 搜尋 User 相關的 role $user-&gt;roles One to One Relationship (CRUD) - Eloquent Relationship 設定官方文件 安裝＋設定 新增一個專案 composer create-project --prefer-dist laravel/laravel onetoone 5.2.29 建立資料庫 &amp; 設定 .env 資料庫設定和 migration 新增 model php artisan make:model Address -m 新增欄位 $table-&gt;string('name'); 進行 migrate php artisan migrate 設定 Relation 新增欄位 $table-&gt;integer('user_id')-&gt;nullable(); 重新 migrate php artisan migrate:refresh 在 User.php 設定 Relation public function address(){return $this-&gt;hasOne('App\\Address');} 在資料庫 insert User 在 Address.php 新增 protected，讓資料可填入 protected $fillable = ['name']; 用 routes 新增資料 123456789101112use App\\User;use App\\Address;Route::get(&apos;/insert&apos;, function()&#123; $user = User::findOrFail(1); $address = new Address([&apos;name&apos;=&gt;&apos;1234 Houston av NY NY 11218&apos;]); $user-&gt;address()-&gt;save($address);&#125;); 更新資料 新增 routes 123456789Route::get(&apos;/update&apos;, function()&#123; $address = Address::whereUserId(1)-&gt;first(); $address-&gt;name = &quot;4353 Update Av, alaska&quot;; $address-&gt;save();&#125;); 讀取資料 新增 routes 1234567Route::get(&apos;/read&apos;, function()&#123; $user = User::findOrFail(1); echo $user-&gt;address-&gt;name;&#125;); 刪除資料 新增 routes 123456789Route::get(&apos;/delete&apos;, function()&#123; $user = User::findOrFail(1); $user-&gt;address()-&gt;delete(); return &quot;done&quot;;&#125;);","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Laravel","slug":"Laravel","permalink":"https://tingsyuanwang.github.io/tags/Laravel/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Lavarel 快速學習自我挑戰 Day5","slug":"Lavarel-快速學習自我挑戰-Day5","date":"2017-04-26T02:19:30.000Z","updated":"2017-04-30T03:28:47.000Z","comments":true,"path":"2017/04/26/Lavarel-快速學習自我挑戰-Day5/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/04/26/Lavarel-快速學習自我挑戰-Day5/","excerpt":"","text":"Eloquent Relationship - Eloquent Relationship 設定官方文件 One to One Relationship 新增 user_id 到 migration $table-&gt;integer('user_id')-&gt;unsigned(); 新增一個 function 到 User.php public function post(){return $this-&gt;hasOne('App\\Post');} 新增 routes Route::get('/user/{id}/post', function($id){return User::find($id)-&gt;post-&gt;title;}); Reverse One to One Relationship (Inverse Relationship) 新增一個 function 到 Post.php public function user(){return $this-&gt;belongsTo('App\\User');} 新增 routes Route::get('/user/{id}/post', function($id){return User::find($id)-&gt;post-&gt;content;}); One to Many Relationship 新增一個 function 到 User.php public function posts(){return $this-&gt;hasMany('App\\Post');} 新增 routes 1234567891011 Route::get(&apos;/posts&apos;, function()&#123; $user = User::find(1); foreach ($user-&gt;posts as $post) &#123; echo $post-&gt;title .&quot;&lt;br&gt;&quot;; (不要使用 return，return 只能傳回一個內容) &#125;&#125;); Many to Many Relationship 新增一個 model php artisan make:model Role -m 新增一個 migration php artisan make:migration create_users_roles_table --create=role_user 在 create_roles_table 新增姓名 $table-&gt;string('name'); 在 create_users_roles_table 新增 user_id 和 role_id $table-&gt;integer('user_id'); $table-&gt;integer('role_id'); 在 User.php 新增一個 function public function roles(){return $this-&gt;belongsToMany('App\\Role');} 新增 routes (1) Route::get('/user/{id}/role', function($id){ $user = User::find($id); foreach ($user-&gt;roles as $role) {return $role-&gt;name;}}); 新增 routes (2) Route::get('/user/{id}/role', function($id){ $user = User::find($id)-&gt;roles()-&gt;orderBy('id', 'desc')-&gt;get(); return $user; }); 取得 Intermediate table 在 Role.php 新增 belongsToMany public function users(){return $this-&gt;belongsToMany('App\\User');} 在 User.php 的 roles function 新增 withPivot return $this-&gt;belongsToMany('App\\Role')-&gt;withPivot('created_at'); 新增 routes 1234567891011Route::get(&apos;/user/pivot&apos;, function()&#123; $user = User::find(1); foreach($user-&gt;roles as $role)&#123; return $role-&gt;pivot-&gt;created_at; &#125;&#125;); Has Many Through Relation 新增一個 model php artisan make:model Country -m 新增一個 migration php artisan make:migration add_country_id_column_to_users --table=users 到 add_country_id_column_to_users.php 的 up function 新增 $table-&gt;integer('country_id'); 到 add_country_id_column_to_users.php 的 down function 新增 $table-&gt;dropColumn('country_id'); 到 create_countries_table 新增 $table-&gt;string('name'); 匯入資料庫 php artisan migrate 在 Country Model 新增 function public function posts(){return $this-&gt;hasManyThrough('App\\Post', 'App\\User');} 在 routes 引入 Model use App\\Country 新增 routes 1234567891011Route::get(&apos;/user/country&apos;, function()&#123;$country = Country::find(4);foreach ($country-&gt;posts as $post)&#123; return $post-&gt;title;;&#125;&#125;); Polymorphic Relation 新增 photo 的 Model php artisan make:model Photo -m 在 create_photos_table 新增以下欄位 $table-&gt;string('path'); $table-&gt;integer('imageable_id'); $table-&gt;string('imageable_type'); 匯入資料庫 php artisan migrate 不需要 user_id，在 create_post_talbe 移除並更新 $table-&gt;integer('user_id')-&gt;unsigned(); php artisan migrate:refresh 在 Photo.php 新增一個 function public function imageable() {return $this-&gt;morphTo();} 在 Post.php 和 User.php 各新增一個 function public function photos(){return $this-&gt;morphMany('App\\Photo', 'imageable');} 新增 routes 1234567891011Route::get(&apos;post/&#123;id&#125;/photos&apos;, function($id)&#123; $post = Post::find($id); foreach($post-&gt;photos as $photo)&#123; echo $photo-&gt;path . &quot;&lt;br&gt;&quot;; &#125;&#125;); Reverse Polymorphic Relation 在 routes 引入 Model use App\\Photo; 新增 routes 1234567Route::get(&apos;photo/&#123;id&#125;/post&apos;, function($id)&#123; $photo = Photo::findOrFail($id); return $photo-&gt;imageable;&#125;); Many to Many Polymorphic Relation 新增三個 model php artisan make:model Video -m php artisan make:model Tag -m php artisan make:model Taggable -m 在 create_videos_table 和 create_tags_table 建立 name 的 table $table-&gt;string('name'); 在 create_taggables_table 建立以下 table $table-&gt;integer('tag_id'); $table-&gt;integer('taggable_id'); $table-&gt;string('taggable_type'); 在 Post.php 新增 morphToMany function public function tags(){return $this-&gt;morphToMany('App\\Tag', 'taggable');} 在 Tag.php 新增 morphedByMany function public function posts(){ return $this-&gt;morphedByMany('App\\Post', 'taggable');} public function videos(){return $this-&gt;morphedByMany('App\\Video', 'taggable');} 匯入 migrate php artisan migrate 新增 routes Route::get('/post/tag', function(){ $post = Post::find(1); foreach ($post-&gt;tags as $tag){ echo $tag-&gt;name; } }); import Tag model use App\\Tag; 新增 routes Route::get('/tag/post', function(){ $tag = Tag::find(2); foreach($tag-&gt;posts as $post){ return $post-&gt;title; } });","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Laravel","slug":"Laravel","permalink":"https://tingsyuanwang.github.io/tags/Laravel/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Lavarel 快速學習自我挑戰 Day4","slug":"Lavarel-快速學習自我挑戰-Day4","date":"2017-04-25T05:12:19.000Z","updated":"2017-04-25T19:32:53.000Z","comments":true,"path":"2017/04/25/Lavarel-快速學習自我挑戰-Day4/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/04/25/Lavarel-快速學習自我挑戰-Day4/","excerpt":"","text":"Raw SQL Queries - Database 設定官方文件 insert data (直接在 Routes.php 設定) 123Route::get(&apos;/insert&apos;, function()&#123; DB::insert(&apos;insert into posts(title, content) values(?, ?)&apos;, [&apos;PHP with Laravel&apos;, &apos;Laravel is the best thing that has happened to PHP&apos;]);&#125;); read data 123456789101112Route::get(&apos;/read&apos;, function() &#123; $results = DB::select(&apos;select * from posts where id = ?&apos;, [1]); return $results; (傳回陣列)// return var_dump($results); (傳回值的詳細資料)// foreach($results as $post)&#123;//// return $post-&gt;title;//// &#125;(傳回單一項目)&#125;); update data 1234Route::get(&apos;/update&apos;, function()&#123; $updated = DB::update(&apos;update posts set title = &quot;update title&quot; where id = ?&apos;, [1]); return $updated;&#125;); delete data 1234Route::get(&apos;/delete&apos;, function()&#123; $deleted = DB::delete(&apos;delete from posts where id = ?&apos;, [1]); return $deleted;&#125;); Eloquent / ORM - Eloquent 設定官方文件 創建一個 model：php artisan make:model 在 model 的 class 宣告 table 名稱：protected $table = 'posts'; 在 Routes 引入 class：use App\\Post; 用 model 的方式讀取所有資料 123456789Route::get(&apos;/find&apos;, function()&#123; $posts = Post::all(); // 加入 Post 的所有紀錄 foreach($posts as $post) &#123; return $post-&gt;title; &#125;&#125;); 用 model 的方式讀取單一資料 123456Route::get(&apos;/find&apos;, function()&#123; $post = Post::find(1); return $post-&gt;title;&#125;); 用 eloquent 的方式取得資料：$posts = Post::where('id', 1)-&gt;orderBy('id', 'desc')-&gt;take(1)-&gt;get(); eloquent -&gt; 取得或失敗：$posts = Post::findOrFail(2); save data 12345678910Route::get(&apos;/basicinsert&apos;, function()&#123; $post = new Post; $post-&gt;title = &apos;new Eloquent title insert&apos;; $post-&gt;content = &apos;Wow eloquent is really cool, look at this content&apos;; $post-&gt;save();&#125;); 修改 data 12345678910Route::get(&apos;/basicinsert1&apos;, function()&#123; $post = Post::find(1); $post-&gt;title = &apos;new Eloquent title insert 1&apos;; $post-&gt;content = &apos;Wow eloquent is really cool, look at this content 1&apos;; $post-&gt;save();&#125;); Mass Assignment 在路由用 create 來新增 model Post::create(['title'=&gt;'the create method', 'content'=&gt; 'WOW I\\'m learning a lot with Edwin Diaz']); 在 model 裡面設定 protected protected $fillable = ['title', 'content']; update data Post::where('id', 2)-&gt;where('is_admin', 0)-&gt;update(['title'=&gt;'NEW PHP TITLE', 'content'=&gt;'I love my instructor Edwin']); delete data 方法 1 1234567Route::get(&apos;/delete&apos;, function()&#123; $post = Post::find(1); $post-&gt;delete();&#125;); 方法 2 1234567Route::get(&apos;/delete2&apos;, function()&#123; Post::destroy(2); // Post::destroy([4,5]); //刪除多筆資料 // Post::where(&apos;is_admin&apos;, 0)-&gt;delete(); //加上條件的刪除法&#125;); Soft delete / trashing 在 model 引入 softdelete use Illuminate\\Database\\Eloquent\\SoftDeletes; 在 model 使用 protected protected $dates = ['deleted_at']; 建立新的 model php artisan make:migration add_deleted_at_column_to_posts_tables --table=posts 設定新的 model up 的部分：$table-&gt;softDeletes(); down 的部分：$table-&gt;dropColumn('deleted_at'); 提醒：在刪除 model 之前要先 reset 才不會造成資料庫錯誤 直接在 Routes 進行刪除：Post::find(3)-&gt;delete(); 取得 deleted / trashed 紀錄 123456789101112131415Route::get(&apos;resoftdelete&apos;, function()&#123;// 取得單一紀錄// $post = Post::find(3);// return $post;// 取得包含丟到回收桶的紀錄// $post = Post::withTrashed()-&gt;where(&apos;is_admin&apos;, 0)-&gt;get();// return $post;// 只取得丟到回收桶的紀錄// $post = Post::onlyTrashed()-&gt;where(&apos;is_admin&apos;, 0)-&gt;get();// return $post;&#125;); 恢復 deleted / trashed 紀錄 12345Route::get(&apos;/restore&apos;, function()&#123; Post::withTrashed()-&gt;where(&apos;is_admin&apos;, 0)-&gt;restore();&#125;); 永久移除紀錄 12345Route::get(&apos;/forcedelete&apos;, function()&#123; Post::onlyTrashed()-&gt;where(&apos;is_admin&apos;, 0)-&gt;forceDelete();&#125;);","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Laravel","slug":"Laravel","permalink":"https://tingsyuanwang.github.io/tags/Laravel/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Lavarel 快速學習自我挑戰 Day3","slug":"Lavarel-快速學習自我挑戰-Day3","date":"2017-04-24T07:12:12.000Z","updated":"2017-04-24T19:52:14.000Z","comments":true,"path":"2017/04/24/Lavarel-快速學習自我挑戰-Day3/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/04/24/Lavarel-快速學習自我挑戰-Day3/","excerpt":"","text":"Views - Views 設定官方文件 路徑：/resources/views 在 Controller 新增一個 function public function contact(){return view('contact');} 新增一個 view (檔名為xxx.blade.php) 可以將 view 的檔案設定在子目錄下。例：新增一個 pages/contact.php，路由部分則要設定為 view(page/contact(或是page.contact)') Routes 設定 Route::get('/contact', 'PostsController@contact'); 傳送 data 到 Views 設定 Routes Route::get('post/{id}', 'PostsController@show_post'); 在 Controller 新增一個 function public function show_post($id){return view('post')-&gt;with('id',$id);} 在 View 裡面使用 data {{$id}} 傳送多 data 到 Views 設定 Routes Route::get('post/{id}/{name}/{password}', 'PostsController@show_post'); 在 Controller 使用 compact function public function show_post($id, $name, $password){return view('post', compact('id','name','password'));} 在 View 裡面使用 data blade (PHP模板引擎) - blade 設定官方文件 ! + tab =&gt; html 模板 div.container + tab =&gt; class 為 container 的 div 容器 @yield('content') =&gt; 產生一個內容的區塊 @extends('layouts.app') =&gt; 使用 layouts.app 裡面的內容 @section('content') =&gt; 產生自定義內容 blade 使用範例： 在 PostsController 裡的 Contact 新增人名 array，並傳送 data $people = ['Edwin', 'Jose', 'James', 'Peter', 'Maria']; return view('contact', compact('people')); 在 contact.blade.php 裡面列出人名 (blade 的函式皆以 @ 開頭) 1234567@if (count($people)) &lt;ul&gt; @foreach($people as $person) &lt;li&gt;&#123;&#123;$person&#125;&#125;&lt;/li&gt; @endforeach &lt;/ul&gt;@endif Database Migration - Migration 設定官方文件 sqlite：file based database，資料庫內容儲存於檔案裡，應用於小專案。 先設定 .env php artisan migrate (將資料庫設定檔自動移入資料庫) 自定義 migration 自行創建一個 migration 檔案：php artisan make:migration (migration_NAME) (FLAG) 範例：php artisan make:migration create_posts_table --create=&quot;posts&quot; 在 migration 裡面新增 table 項目。($table-&gt;string('title');) 撤回上一步完成的 migration：php artisan migrate:rollback。 新增 column 到存在的 table 新增一個 migration：php artisan make:migration add_is_admin_column_to_posts_tables --table=&quot;posts&quot;(定義相關table) 在新增的 migration 檔案的 up 新增 $table-&gt;integer('is_admin')-&gt;unsigned(); 在新增的 migration 檔案的 down 新增 $table-&gt;dropColumn('is_admin'); Migration 命令 刪除所有資料庫內容：php artisan migrate:reset 更新資料庫內容(刪除資料庫再重新新增):php artisan migrate:refresh 確認 migration 狀態：php artisan migrate:status","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Laravel","slug":"Laravel","permalink":"https://tingsyuanwang.github.io/tags/Laravel/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Lavarel 快速學習自我挑戰 Day2","slug":"Lavarel-快速學習自我挑戰-Day2","date":"2017-04-23T08:15:17.000Z","updated":"2017-04-23T17:01:18.000Z","comments":true,"path":"2017/04/23/Lavarel-快速學習自我挑戰-Day2/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/04/23/Lavarel-快速學習自我挑戰-Day2/","excerpt":"","text":"Laravel 目錄結構 /app/Http/Controllers：make request、routes 設定。 /config： 註冊外掛進入 packages、database 連線 (但是連線資訊都設定在根目錄的 .env)、mail 連線。 /database/migration：透過檔案建立資料，會非常常用。 /public：css folder、javascript folder、image folder。 /resources/views：存放畫面的位置，跟 controller 保持連線。 /vendor：存放套件的地方。 Route 設定 - 路由設定官方文件 修改 /app/Http/routes.php 傳 id, name 兩個變數到頁面的範例。 123Route::get(&apos;/post/&#123;id&#125;/&#123;name&#125;&apos;, function($id, $name)&#123; return &quot;This is post number &quot;. $id . &quot; &quot; .$name;&#125;); 路由命名法 查詢路由狀態。 php artisan route:list 將路由用簡短的方式命名，以下用admin.home來取得路由。 12345Route::get(&apos;admin/posts/example&apos;, array(&apos;as&apos;=&gt;&apos;admin.home&apos; ,function()&#123; $url = route(&apos;admin.home&apos;); return &quot;this url is &quot;. $url;&#125;)); Controller - Controller 設定官方文件 Controller 是用來處理來自 database 資訊的 class，然後將資料丟到 view (反之亦然)。 Controller 路徑 - /app/Http/Controllers/Controller.php。 用 terminal 創建一個 Controller。 php artisan make:controller PostsController(Name) php artisan make:controller --resource PostsController(Name) 在路由設定 Controller 設定 routes.php Route::get('/post', 'PostsController@index'); (讀取 Controller 的 index) 修改 PostsController.php public function index() {return 'its working';} 在 Controller 傳送 data 設定 routes.php Route::get('/post/{id}', 'PostsController@index'); (讀取 Controller 的 index) 修改 PostsController.php public function index($id) {return 'its working the number' . $id;} Resources &amp; Controller 設定 routes.php - 用 resource 的做法會產生 GET、DELETE、PUT…等不同 Method。 Route::resource('posts', 'PostsController'); 檢查路由狀態 php artisan route:list 測試 show method public function show($id) {return &quot;This is the show method yaaa&quot; . $id;} 測試 create method public function create() {return &quot;I am the method that creates stuff:)&quot;;}","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Laravel","slug":"Laravel","permalink":"https://tingsyuanwang.github.io/tags/Laravel/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Lavarel 快速學習自我挑戰 Day1","slug":"Lavarel-快速學習自我挑戰-Day1","date":"2017-04-21T19:00:35.000Z","updated":"2017-04-23T15:38:00.000Z","comments":true,"path":"2017/04/22/Lavarel-快速學習自我挑戰-Day1/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/04/22/Lavarel-快速學習自我挑戰-Day1/","excerpt":"","text":"安裝 PHP 環境 安裝 XAMPP，選 PHP 最新版本。 啟動 XAMPP，網址列輸入 localhost，可以看到 XAMPP 的最新畫面。 安裝 IDE (PhpStorm) 官方網站。 學生免費。 下載 IDE。 Install Composer (相依套件管理器) Composer官方網站。 找套件的網站：packagist。 Download Composer。 按照程式碼安裝之後，會產生一個 composer.phar，為了要在全域使用，在 .zshrc 裡面加上export PATH=&quot;~/.composer/vendor/bin:$PATH&quot;，在指令列用source .zshrc更新檔案。 啟動 laravel 專案 composer create-project --prefer-dist laravel/laravel cms 5.2.29 更改讀取權限 chmod -R o+w cms/storage，就可以直接預覽了。 如果不想修改權限，可以在修改 httpd 設定檔。 vim /Applications/XAMPP/xamppfiles/etc/httpd.conf 將 User daemon 改成 User 你的Username。 Virtual hosts 修改 httpd 設定檔 vim /Applications/XAMPP/xamppfiles/etc/httpd.conf 把 Virtaul hosts include 進去 (將 # 移除) Include etc/extra/httpd-vhosts.conf 修改 hosts 檔案 vim /etc/hosts 加上 127.0.0.1 cms.dev 修改 vhosts 設定檔 vim /Applications/XAMPP/etc/extra/httpd-vhosts.conf 將檔案修改為以下格式 12345678910111213141516171819202122232425262728# &lt;URL:http://httpd.apache.org/docs/2.4/vhosts/&gt;# for further details before you try to setup virtual hosts.## You may use the command line option &apos;-S&apos; to verify your virtual host# configuration.NameVirtualHost *:80## VirtualHost example:# Almost any Apache directive may go into a VirtualHost container.# The first VirtualHost section is used for all requests that do not# match a ServerName or ServerAlias in any &lt;VirtualHost&gt; block.#&lt;VirtualHost *:80&gt; ServerAdmin webmaster@dummy-host.example.com DocumentRoot &quot;/Applications/XAMPP/xamppfiles/htdocs&quot; ServerName localhost ServerAlias www.localhost&lt;/VirtualHost&gt;&lt;VirtualHost *:80&gt; ServerAdmin webmaster@dummy-host2.example.com DocumentRoot &quot;/Applications/XAMPP/xamppfiles/htdocs/cms/public&quot; ServerName cms.dev# ErrorLog &quot;logs/dummy-host2.example.com-error_log&quot;# CustomLog &quot;logs/dummy-host2.example.com-access_log&quot; common&lt;/VirtualHost&gt; 用 PhpStorm 打開專案 點選 open，選擇 laravel 專案目錄。 觀念摘錄 MVC 架構 Model (Deals with Databse), View (Deals with the HTML), Controller (The middle-man)。 快捷鍵設定 — 加入 .zshrc 輸入 desk 直接跳到桌面 alias desk=&quot;cd /Users/**USERNAME**/Desktop&quot; 輸入 refzsh 更新 .zshrc alias refzsh=&quot;source ~/.zshrc&quot; 輸入 zsh 編輯 .zshrc alias zsh=&quot;vim ~/.zshrc&quot; 輸入 htdocs 跳轉到 htdocs 目錄 alias htdocs=&quot;cd /Applications/XAMPP/htdocs&quot;","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"Laravel","slug":"Laravel","permalink":"https://tingsyuanwang.github.io/tags/Laravel/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"React快速學習自我挑戰 Day12","slug":"React快速學習自我挑戰-Day12","date":"2017-04-03T06:41:19.000Z","updated":"2017-06-14T03:28:02.000Z","comments":true,"path":"2017/04/03/React快速學習自我挑戰-Day12/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/04/03/React快速學習自我挑戰-Day12/","excerpt":"","text":"{title.touched ? title.error : ''}，如果 title.touched 是 true，顯示 title.error，如果不是，什麼都不要顯示。 {`form-group ${title.touched &amp;&amp; title.invalid ? 'has-danger' : ''}`}，如果 title 被 touched，而且 title 是 invalid，顯示 className “has-danger”，否則顯示空白 string。 盡量避免使用 context。只有在我們使用 react-router 的時候再使用 context。 Create Post 是一個 action creator，action creator 可以創造一個 promise 當作他自己的 payload。當我們呼叫 action creator，就會產生一個當作 payload 的 promise，所以當 promise 解決以後，就等同於我們順利創建一個 post 了。 要存取 react-router，我們必須定義 contextTypes。這告訴 react 我想要從 parent component 存取這個 property。 Lorem Ipsum 產生器。 redux thunk 是用來處理非同步的 action creator。 dispatch method 是 redux store 的一部份，包含了 application state。 Firebase react library。","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React","slug":"React","permalink":"https://tingsyuanwang.github.io/tags/React/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"React快速學習自我挑戰 Day11","slug":"React快速學習自我挑戰-Day11","date":"2017-03-30T06:35:46.000Z","updated":"2017-06-14T03:28:10.000Z","comments":true,"path":"2017/03/30/React快速學習自我挑戰-Day11/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/03/30/React快速學習自我挑戰-Day11/","excerpt":"","text":"React Lifecycle method 是一個 React Component class 的 function，用來被 React 自動呼叫。 componentWillMount 是一個 Lifecycle method，他會在第一次 component 將要被 DOM render 的時候自動呼叫 componentWillMount，但是當下一次執行 component 的時候，就不會再執行 componentWillMount。 componentWillMount 用在不知道什麼情況下要 fetch data。 如果要讓 react component 可以呼叫 action creator，我們必須要把 component 提升為 container。 製作 container 的方法。 import connect import action creator 定義 mapDispatchToProps function，然後連接到 component。 Redux Form。 import { reducer as formReducer } from 'redux-form';，import redux-form，拿取 reducer 這個 property，然後建立一個名為 formReducer 的變數。(此用法為了避免命名上的衝突) const { handleSubmit } = this.props; === const handleSubmit = this.props.handleSubmit; const { fields: { title, categories, content}, handleSubmit } = this.props; === const title = this.props.fields.title;。 reduxform 可以被用來注入 action creators 到 component 裡面，然後創建一個在 component 外的 container。 reduxform 和 connect 的不同就是 reduxform 有一個額外的參數傳遞給他。 connect：第一個參數是 mapStateToProps，第二個是 mapDispatchToProps。 reduxform：第一個是 form config，第二個是 mapStateToProps，第三個是 mapDispatchToProps。","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React","slug":"React","permalink":"https://tingsyuanwang.github.io/tags/React/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"React快速學習自我挑戰 Day10","slug":"React快速學習自我挑戰-Day10","date":"2017-03-22T02:16:50.000Z","updated":"2017-06-14T03:28:15.000Z","comments":true,"path":"2017/03/22/React快速學習自我挑戰-Day10/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/03/22/React快速學習自我挑戰-Day10/","excerpt":"","text":"Redux Blog Post API Reference。 Postman 是一個 HTTP client 的 API。 npm install --save react-router@2.0.0-rc5，安裝 react router。 React-Router 套件有 History 的子套件，用來管理網頁的 URL，監控改變並隨著時間更新。 History 對 URL 互動，並將更新傳送給 React-Router，React-Router 拿到 URL 之後並根據 URL 決定哪個 React Component 需要更新。 Router 是一個當 URL 改變時，我們需要決定哪個 React Component 需要重新 render 的物件。 browserHistory 是一個告訴 React-Router 如何 interpret URL changes 物件。 History 有 browserHistory、hashHistory、memoryHistory 可以使用。 IndexRoute 是一個做起來像是 Route，但是當 URL 符合我們所定義的 parent path 才會出現的 helper。","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React","slug":"React","permalink":"https://tingsyuanwang.github.io/tags/React/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"React快速學習自我挑戰 Day9","slug":"React快速學習自我挑戰-Day9","date":"2017-03-14T12:17:57.000Z","updated":"2017-06-14T03:28:19.000Z","comments":true,"path":"2017/03/14/React快速學習自我挑戰-Day9/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/03/14/React快速學習自我挑戰-Day9/","excerpt":"","text":"React Sparkline(畫圖工具)。 class based component：有變數傳遞。 function based component：無變數傳遞。 action type 用 const 定義，這樣才能在 action 和 reducer 裡面指定 action type。 在本專案中用的 middleware 就是 redux promise，我們用 redux promise 來處理收到的 promise，然後使用 axios 來產生 AJAX request，這個 middleware 會自動偵測我們提供的 promise 的 payload，middleware 會停止 action 並等到問題解決、promise 才會解決，middleware 就會從 request 把回傳的 data 拿來塞在 payload 這個 property，然後把 action 送到本專案的所有 reducer 中。 雖然 Ajax request 本質上涉及非同步式語言，但我們完全不需要思考到非同步語言的部分。我們只要寫創造 action、然後流向 reducer，我們並不需要擔心任何 promise 或是 callback。 我們從不做 state.weather.push 這樣的動作，不要直接修改 state，取而代之的是，我們 return 一個新物件來代替已經存在的 state。","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React","slug":"React","permalink":"https://tingsyuanwang.github.io/tags/React/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"React快速學習自我挑戰 Day8","slug":"React快速學習自我挑戰-Day8","date":"2017-03-13T14:56:31.000Z","updated":"2017-06-14T03:28:24.000Z","comments":true,"path":"2017/03/13/React快速學習自我挑戰-Day8/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/03/13/React快速學習自我挑戰-Day8/","excerpt":"","text":"Middleware 是一個 function，Middleware 可以選擇讓 action 通過，還可以操縱 action。 在到達 reducer 之前，我們可以在 action 上的所有不同型態的小任務做 console.log 或 stop。 application state 擁有 application 全部的 data。 新增 data 需要 dispatch 一個 action 來呼叫(action creactor)，然後他要 AJAX request 負責。 在處理 action type 的時候，不可將不同型態的值傳遞到 reducer，需要先做 export const FETCH_WEATHER = 'FETCH_WEATHER';。 axios 是一個從瀏覽器製作 Ajax request 的 Library。 Promise 不包含任何 data。 Redux Promis 是一個 Middleware，在點擊任何 reducer 之前，Middleware 都可以選擇讓 action 通過，還可以操縱 action。 state.push 的用法會回傳一整個新的 array；用 state.concat 則是將新東西加上 array。 ES5 return state.concat([action.payload.data]); = ES6 return [ action.payload.data, ...state ];。 { weather } === { weather: weather }。","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React","slug":"React","permalink":"https://tingsyuanwang.github.io/tags/React/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"React快速學習自我挑戰 Day7","slug":"React快速學習自我挑戰-Day7","date":"2017-03-11T12:15:40.000Z","updated":"2017-06-14T03:28:29.000Z","comments":true,"path":"2017/03/11/React快速學習自我挑戰-Day7/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/03/11/React快速學習自我挑戰-Day7/","excerpt":"","text":"React Component 只負責顯示 data，而 Redux 則負責提取 data。 設計一個元件的時候，記得要先問自己該元件是 Container 還是 Component。 基本上需要跟 Redux 溝通的就是 Container。 下面範例中，this (就是 SearchBar) 有一個 function 叫做 onInputChange，然後把這個 function bind 到 this，然後把得到值放到下方的 onInputChange 裡面。 1234567891011constructor(props) &#123; super(props); this.state = &#123; term: &apos;&apos; &#125;; this.onInputChange = this.onInputChange.bind(this); &#125; onInputChange(event) &#123; this.setState(&#123; term: event.target.value &#125;) &#125; 如果不希望 User 一直重新整理頁面，我們可以加 event handler。 open weather API。 sign up 之後，進入 API Key 的頁面，就可以拿到 API key 囉！ JSON Formatter (chrome 外掛)。","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React","slug":"React","permalink":"https://tingsyuanwang.github.io/tags/React/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"React快速學習自我挑戰 Day6","slug":"React快速學習自我挑戰-Day6","date":"2017-03-10T05:02:52.000Z","updated":"2017-06-14T03:28:33.000Z","comments":true,"path":"2017/03/10/React快速學習自我挑戰-Day6/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/03/10/React快速學習自我挑戰-Day6/","excerpt":"","text":"當知道 action creactor 將要呼叫(但不知道什麼時候)，當被呼叫的時候，我想要確定 flow 的結果能夠經過 dispatch function，然後這個 dispatch function 會像是漏斗般的接收這些 actions，最後再把 actions 分別送回不同的 reducers。 action 通常有兩種值：type 和 payload。 不管 action 有沒有 dispatch，reducer 都會被呼叫，所以 function 隨時會頻繁的被呼叫，因為 action 不在乎任何時間、任何特定的 reducer。 用來 combine reducer 的 object 的任何 key 都會以 global state key 的方式結尾。 當想要做一個可以直接接觸 redux state 的 component，就要用 container。 定義一個 function 呼叫 Map state 來 process ，然後我們 connect book detail 的 props。 Redux 控制整個 application 的 state，state 是 single plain javascript object。 Component state 跟 application state 是完全分離的。 用 combineReducer 的方法可以將 reducer 全部連結在一起。 function 內每一個 key 都會指定一個 reducer，然後 reducer 必須對創造 state 負責。 reducer 負責隨著時間改變 application state，這個是透過 action 來使用。 當有一個 action dispatch，action 會流過 application 內不同的 reducer；所以每一個 reducer 有選擇的根據收到不同的 action type 來 return state。 action creator 是一個 simple function 來 return 一個 action，action 是 single plain javascript object。","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React","slug":"React","permalink":"https://tingsyuanwang.github.io/tags/React/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"React快速學習自我挑戰 Day5","slug":"React快速學習自我挑戰-Day5","date":"2017-03-09T03:01:39.000Z","updated":"2017-06-14T03:28:38.000Z","comments":true,"path":"2017/03/09/React快速學習自我挑戰-Day5/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/03/09/React快速學習自我挑戰-Day5/","excerpt":"","text":"Reducer 是一個 function 用來 return piece of the application state。 Reducer 產出 state 的值。 在檔名的命名中，應該在前面加前綴，例如：reducer_books.js。(不是一定要，作者提供的方法) Container 是 react component，對 Redux 所管理的 state 有直接的連結。 有一個 Library 叫做 React-Redux，負責 React 和 Redux 的溝通橋樑。(本身 React 和 Redux 是完全分開的 Library) Container 在 Redux 的官方文件中叫做 Smart Component。 以整體來說，整個 App 並不在乎任何 state，而是由各個元件去在乎個別需要在乎的 state(所以 App 被稱為 dumb component)。 mapStateToProps 以陣列的形式得到 application state。 Redux 建構 application state，React 提供 View 來顯示 State，這兩個是不同的 Library，唯有透過 React-Redux 才能將這兩個連結。 如果 application state 改變，Container 也會跟著 rerender。 按按鈕 =&gt; 呼叫 action creator =&gt; action automatically sent to all reducers =&gt; reducer 可以選擇根據 action 來 return 不同的 state，然後將 state pipe into application =&gt; application state 會 pump back into React application，然後所有的 components 就會 rerender。 action creator 會 return 物件。 在所有不同的 reducer 裡面，我們會設置一個 switch statement。","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React","slug":"React","permalink":"https://tingsyuanwang.github.io/tags/React/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"React快速學習自我挑戰 Day4","slug":"React快速學習自我挑戰-Day4","date":"2017-03-08T14:10:00.000Z","updated":"2017-06-14T03:28:42.000Z","comments":true,"path":"2017/03/08/React快速學習自我挑戰-Day4/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/03/08/React快速學習自我挑戰-Day4/","excerpt":"","text":"Redux 參考資料。 學習完 Redux 之後，還要學 webpack、Redux Router、Redux Promise、Redux Thunk、Hot Reloading。 Redux 是一個針對 JS application 的可預測 state container。 Redux 處理 data 的部分，React 處理 View 的部分。 React 和其他框架不同的地方就是將所有 data 放到 central single object，這個 object 可被用來查詢 state。","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React","slug":"React","permalink":"https://tingsyuanwang.github.io/tags/React/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"React快速學習自我挑戰 Day3","slug":"React快速學習自我挑戰-Day3","date":"2017-03-07T14:13:59.000Z","updated":"2017-06-14T03:27:44.000Z","comments":true,"path":"2017/03/07/React快速學習自我挑戰-Day3/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/03/07/React快速學習自我挑戰-Day3/","excerpt":"","text":"在 React 中，只有最上層的元件需要從 API 或 flux 取得資料。 用 className 來當作平常在 html 看到的 class，以跟 class based function 做區別。 function()可以簡化為() =&gt;。 React 處理 List 的時候，不要使用 for 迴圈，用 map 來取代。 React 會辨識變數是否為 List 或是 Array of Component。 在處理 List 的時候，React會要求給每個 element 一個 ID。 以下兩行一樣，下面為 ES6 語法。 const VideoListItem = (props) =&gt; { const video = props.video; const VideoListItem = ({video}) =&gt; { 以下兩行一樣，下面為 ES6 語法。(string interpolation) const url = 'https://www.youtube.com/embed/' + videoId; const url = `https://www.youtube.com/embed/${videoId}`; 降低 callback function 執行速度的套件 lodash 。 在 class based component，我們將 state 設定在 constructor 裡面。 範例中，四個元件用了兩個 callback function，我們要用 redux 來讓 callback 更乾淨。 在 react 中用的 state 屬於 Component level，而在 redux 上面使用的則是 application level。","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React","slug":"React","permalink":"https://tingsyuanwang.github.io/tags/React/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-03-07T11:46:27.000Z","updated":"2017-03-07T11:46:27.000Z","comments":true,"path":"2017/03/07/hello-world/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/03/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new \"My New Post\" More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}],"tags":[],"keywords":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}]},{"title":"React快速學習自我挑戰 Day2","slug":"React快速學習自我挑戰-Day2","date":"2017-03-06T02:13:59.000Z","updated":"2017-06-14T03:27:36.000Z","comments":true,"path":"2017/03/06/React快速學習自我挑戰-Day2/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/03/06/React快速學習自我挑戰-Day2/","excerpt":"","text":"從 node modules 呼叫 react：import React from 'react';。 從 node modules 呼叫 react-dom：import ReactDOM from 'react-dom';。 React Render 要用元件方式包裝：&lt;App /&gt;。 指定 Render 的地方：document.querySelector('.container')。 每個檔案都只能有一個元件。 Youtube API 的使用。 註冊 Youtube API Key。 前往Goolge開發者界面。 點選左方選單的 Library。 搜尋 Youtube，並選擇「YouTube Data API v3」。 Enable 該套件。 選擇左方選單的 Credentials。 Create Credentials =&gt; API key =&gt; Restrict Key。 設定名稱，設定類別為「HTTP referrers (web sites) 」 Save =&gt; 拿到 API Key 安裝 Youtube API 套件。 Youtube API Search npm install --save youtube-api-search 輸出值：export default SearchBar;。 得到輸出值：import SearchBar from './components/search_bar';(需要包含路徑)。 Class Base Method: class SearchBar extends React.Component。 語法糖：import React, { Component } from 'react'; 等於 import React from 'react'; const Component = React.Component; React 處理事件有兩個步驟。 Declare “Event handler” =&gt; 當事件發生時啟動 handler Pass “Event handler” =&gt; 直接跳到我們想對事件顯示的某元素 State 是 React 最令人困惑的部分。 定義：State 是 JS 純物件，且用來記錄和對使用者事件做反應。不論元件的 State 是否改變、元件是否立刻 Render或是子原件也重新 Rerender，每一個 Class based 元件都有自己的 State Object。 所有的 JS classes 都有一個名為 constructor 的特別函式。 class 的元件用來追蹤 State 的狀態或是值需要持續改變；functional 的元件用來取得某些資訊。 建立搜尋欄位 123const SearchBar = () =&gt; &#123; return &lt;input /&gt;&#125;; 即時顯示值 this.state =&gt; 創建一個 term 的空值。 this.setState =&gt; 得到現在 input 裡面的值(並非直接改變)。 value={this.state.term} =&gt; 取得 this.state 的值。 123456789101112131415161718class SearchBar extends Component &#123; constructor(props) &#123; super(props); this.state = &#123; term: &apos;&apos; &#125;; &#125; render() &#123; return ( &lt;div&gt; &lt;input value=&#123;this.state.term&#125; onChange=&#123;event =&gt; this.setState(&#123; term: event.target.value &#125;)&#125; /&gt; Value of the input: &#123;this.state.term&#125; &lt;/div&gt; ); &#125;&#125;","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React","slug":"React","permalink":"https://tingsyuanwang.github.io/tags/React/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"React快速學習自我挑戰 Day1","slug":"React快速學習自我挑戰-Day1","date":"2017-03-05T13:00:59.000Z","updated":"2017-06-14T03:26:58.000Z","comments":true,"path":"2017/03/05/React快速學習自我挑戰-Day1/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/03/05/React快速學習自我挑戰-Day1/","excerpt":"","text":"Reactjs 和 Redux 有 Library 可以使用。 瀏覽器尚未支援 ES6。 完成的檔案用 webpack + babel 來 transpile 變成網頁。 index.html application.js style.css 起手專案(boilerplate)：React + Youtube API 直接在 Command line 開 atom： atom . Component 是 JS 的 Function 的組合，用來生成 HTML。 使用 const 取變數，代表不改變的值；用 var 取變數，代表會改變的值。 JSX 是一種 JavaScript 的類別，允許我們可以寫 HTML 在 JavaScript 裡面。 寫 index.js 的邏輯 創建一個元件，元件應該可以產生 HTML。 把創建好的元件產生 HTML，然後放到頁面上(這個動作叫做 Render)。 JSX 轉換範例(使用babel轉換工具) 轉換前(1) 123const App = function() &#123; return &lt;div&gt;Hi!&lt;/div&gt;;&#125; 轉換後(1) 1234567var App = function App() &#123; return React.createElement( &quot;div&quot;, null, &quot;Hi!&quot; );&#125;; 轉換前(2) 1234567const App = function() &#123; return &lt;ol&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;/ol&gt;;&#125; 轉換後(2) 123456789101112131415161718192021var App = function App() &#123; return React.createElement( &quot;ol&quot;, null, React.createElement( &quot;li&quot;, null, &quot;1&quot; ), React.createElement( &quot;li&quot;, null, &quot;2&quot; ), React.createElement( &quot;li&quot;, null, &quot;3&quot; ) );&#125;;","categories":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}],"tags":[{"name":"React","slug":"React","permalink":"https://tingsyuanwang.github.io/tags/React/"}],"keywords":[{"name":"學習歷程","slug":"學習歷程","permalink":"https://tingsyuanwang.github.io/categories/學習歷程/"}]},{"title":"Wordpress 處理中文檔名上傳","slug":"Wordpress-處理中文檔名上傳","date":"2017-03-04T08:29:52.000Z","updated":"2017-03-04T08:32:59.000Z","comments":true,"path":"2017/03/04/Wordpress-處理中文檔名上傳/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/03/04/Wordpress-處理中文檔名上傳/","excerpt":"","text":"修改 wp-admin\\includes\\file.php 找： 1$filename = wp_unique_filename( $uploads[&apos;path&apos;], $file[&apos;name&apos;], $unique_filename_callback ); 在其後加上： 1234$fileTypeNameArr =explode(&quot;.&quot; , $filename);$countNum=count($fileTypeNameArr)-1;$fileExt = $fileTypeNameArr[$countNum]; //取得所上傳文件後綴名$filename = time().&apos;-&apos;.rand(0,999999999).&apos;.&apos;.$fileExt;//將文件由原名改為時間戳 這樣上傳的文件會以時間戳為名稱儲存。 上傳中文名的文件後，依然能夠將原中文文件名作為文件的標題。 在後台管理界面顯示的是中文標題，因此對於使用沒有影響。","categories":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}],"tags":[],"keywords":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}]},{"title":"筆記規則 重點摘要","slug":"筆記規則-重點摘要","date":"2017-01-13T02:22:47.000Z","updated":"2017-01-13T03:01:08.000Z","comments":true,"path":"2017/01/13/筆記規則-重點摘要/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2017/01/13/筆記規則-重點摘要/","excerpt":"","text":"為每一天重要的事情，下一個大標題。 把實際開始和結束的時間用螢光筆框起來，紀錄行程是否太滿。 用一些自己專屬的記號。 多色規則：我喜歡五色原則(加上自己的顏色)。 紅色：重要事項。 藍色：工作相關。 黑色：日常私事、每日固定工作(包含記帳)。 綠色：非日常私事。 粉紅色：朝夢想前進的行動。 專案管理的方法。 設定專案目標，寫下要做的事情。 用便利貼，為目標訂出細部的具體任務。 用甘特圖將進度圖像化。 把已經約好的事情寫入待辦事項，還沒約好的事情另外用清單管理。 利用多色便條紙來書寫，藍色代表 工作、黃色代表 外出、綠色代表 私事、粉紅色代表 朝夢想前進的行動。 重要的靈感用另外一本筆記本紀錄。 所有的事情加上人，可以輕鬆回憶起事情。 每天寫三行日記，第一行主題、第二行感想、第三行對未來的展望。 用漫畫的對白框寫下自己為什麼快樂和傷心。 對自己有用的資訊額外也用一本筆記本。 重要的通訊錄。 紀錄上司推薦的事情。 寫下想看的書籍。 寫下別人送禮清單。 寫下自己可以送別人的禮物清單(包含別人提過他想要的)。 標記重要的紀念日。 寫下死前想完成的事情。 將自己想做的目標加以分類，分類別：工作、證照、金錢、健康、興趣、旅行、家人、朋友。 計畫凌亂時，寫出理想時間表，找回自己的節奏。 把成功者的名言佳句寫在書的一角，化為動力。 幾點睡覺、幾點起床要寫下來。 也可以記錄天氣，喚起那一天的所有回憶。","categories":[{"name":"閱讀賞析","slug":"閱讀賞析","permalink":"https://tingsyuanwang.github.io/categories/閱讀賞析/"}],"tags":[],"keywords":[{"name":"閱讀賞析","slug":"閱讀賞析","permalink":"https://tingsyuanwang.github.io/categories/閱讀賞析/"}]},{"title":"PHP multiple select 寫入資料庫的方法","slug":"PHP-multiple-select-寫入資料庫的方法","date":"2016-12-01T05:48:23.000Z","updated":"2016-12-01T05:55:35.000Z","comments":true,"path":"2016/12/01/PHP-multiple-select-寫入資料庫的方法/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2016/12/01/PHP-multiple-select-寫入資料庫的方法/","excerpt":"","text":"填入文字的頁面需要用陣列的方式傳遞資料 name=&quot;item[]&quot; 123456&lt;label for=&quot;item[]&quot; class=&quot;formTitle&quot;&gt;選擇項目&lt;/label&gt;&lt;select name=&quot;item[]&quot; class=&quot;form-control selectpicker&quot; multiple&gt; &lt;option&gt;項目一&lt;/option&gt; &lt;option&gt;項目二&lt;/option&gt; &lt;option&gt;項目三&lt;/option&gt;&lt;/select&gt; 在取得值之前，要先將取得的陣列用文字的方式顯示。 1234// 得到 item 的值$item= $_POST[&quot;item&quot;];// 將取得的陣列用「、」分開$itemArray= implode(&quot;、&quot;, $item); 將得到的值寫入 DataTable 資料表內的 DataColumn 欄位，值為剛剛取得的陣列值 $itemarray 1$sql_query = INSERT INTO DataTable (`DataColumn`) VALUES (&apos;$itemarray&apos;);","categories":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}],"tags":[],"keywords":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}]},{"title":"Github Pushed Commit Delete (Redraw)","slug":"Github-Pushed-Commit-Delete-Redraw","date":"2016-11-17T06:47:14.000Z","updated":"2016-11-17T07:05:16.000Z","comments":true,"path":"2016/11/17/Github-Pushed-Commit-Delete-Redraw/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2016/11/17/Github-Pushed-Commit-Delete-Redraw/","excerpt":"","text":"如果 Commit 之後並 Push 到遠端，想要在本地端用 CI 去 Delete/Redraw，就可以用以下方法。 如果要刪除倒數第一個 Commit，用以下方法。 12git reset --hard HEAD^git push -f 如果要刪除倒數二個 Commit，用以下方法。 12git reset --hard HEAD^^git push -f","categories":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}],"tags":[],"keywords":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}]},{"title":"JavaScript用AJAX的方式獲得時間","slug":"JavaScript用AJAX的方式獲得時間","date":"2016-11-05T15:22:31.000Z","updated":"2016-11-05T15:23:05.000Z","comments":true,"path":"2016/11/05/JavaScript用AJAX的方式獲得時間/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2016/11/05/JavaScript用AJAX的方式獲得時間/","excerpt":"","text":"新增一個js的檔案，將以下程式碼複製貼上 1234567891011121314151617181920212223242526272829var xmlHttp;function srvTime()&#123;try &#123; //FF, Opera, Safari, Chrome xmlHttp = new XMLHttpRequest();&#125;catch (err1) &#123; //IE try &#123; xmlHttp = new ActiveXObject(&apos;Msxml2.XMLHTTP&apos;); &#125; catch (err2) &#123; try &#123; xmlHttp = new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;); &#125; catch (eerr3) &#123; //AJAX not supported, use CPU time. alert(&quot;AJAX not supported&quot;); &#125; &#125;&#125;xmlHttp.open(&apos;HEAD&apos;,window.location.href.toString(),false);xmlHttp.setRequestHeader(&quot;Content-Type&quot;, &quot;text/html&quot;);xmlHttp.send(&apos;&apos;);return xmlHttp.getResponseHeader(&quot;Date&quot;);&#125;var st = srvTime();var date = new Date(st); 新增時間 1var localTime = new Date();","categories":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}],"tags":[],"keywords":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}]},{"title":"In fact, life is a kind of strong","slug":"In-fact-life-is-a-kind-of-strong","date":"2016-09-17T05:45:46.000Z","updated":"2016-09-22T07:35:24.000Z","comments":true,"path":"2016/09/17/In-fact-life-is-a-kind-of-strong/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2016/09/17/In-fact-life-is-a-kind-of-strong/","excerpt":"","text":"Because of the rainy days, I didn’t go to visit the potted plants on the balcony for several days. Today, I went out to look and I feel surprised. One of them had been in critical conditions and leaves covered the ground. However, an unknown plant grow lush at it side and swayed proudly in the wind. One kind of sadness instantly came up from my mind. I blamed my carelessness, but also lamented the fragile of potted plants. I urgently watered the potted plants, but I don’t know why I couldn’t eradicate that unknown alien plant. What kind of conditions could make this life? Due to the lack of attention from me, my potted plants are gradually lost luster. However, it seized this gap and thrived itself. Yes, if I concerned in place, it might be removed when it was inconspicuous. After all, that is my potted plants world, this life didn’t belong to here will be eventually destroy the crafted beauty. But just a few days effort, it was no fear of lack of water and hold the opportunity to put itself look as tall as potted plants. I looked on the potted plants in the verge of death, but also looked at that unknown plant. I was suddenly enlightened in the sadness and moved emotion: In fact, life is a kind of strong. Isn’t it? Plant did it, life is also much better than this! Life can be born, because the mother and baby are all strong. Life comes from the strong. Life is inseparable from the strong. Every day we are dependent with the strong. I think, if you can choose, no one wants to have pain, willing to be sad, even to be toil. But from the birth, we are inevitably deal with some ailment or even illness. Everyone wants to expose under the sun when woke up every day, listen to songs and see the sights every day. However, we haven’t be willing to get up by parent’s call since we were in small age. Then do the things we need to do, reading or working. These all rely on the strong. There are no pure land on earth which can make us arbitrary. There is always a distance between dreams and realities. If the environment is unsatisfactory; if we are in sick and forsaken by lover; if life is too gloomy. Strong, it is the support of life. We must be use the strong to face the tedious every day and stimulate the neglected and injured soul. The strong is necessary in life. It is the pillar of the spirit and the faith to across obstacles. The unknown plant of the potted plants use the strong to touch me. I would leave it and have no regrets, because it let me understand thoroughly: in fact, life is a kind of strong.","categories":[{"name":"英文寫作","slug":"英文寫作","permalink":"https://tingsyuanwang.github.io/categories/英文寫作/"}],"tags":[],"keywords":[{"name":"英文寫作","slug":"英文寫作","permalink":"https://tingsyuanwang.github.io/categories/英文寫作/"}]},{"title":"在hexo使用emoji","slug":"在hexo使用emoji","date":"2016-09-11T02:15:30.000Z","updated":"2016-09-14T10:48:10.000Z","comments":true,"path":"2016/09/11/在hexo使用emoji/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2016/09/11/在hexo使用emoji/","excerpt":"","text":"修改渲染器 123cd /workspace/blogs/ //跳轉到hexo的目錄npm un hexo-renderer-marked --savenpm i hexo-renderer-markdown-it --save 下載markdown-it-emoji插件： 1npm install markdown-it-emoji --save 編輯Hexo的最上層的配置文件_config.yml來配置markdown渲染器 1234567891011121314markdown: render: html: true xhtmlOut: false breaks: true //這邊我改成true直接在.md裡面enter就換行 linkify: true typographer: true quotes: &apos;“”‘’&apos; plugins: - markdown-it-footnote - markdown-it-sup - markdown-it-sub - markdown-it-abbr - markdown-it-emoji","categories":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}],"tags":[],"keywords":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}]},{"title":"Train to Busan (屍速列車) - 劇透","slug":"Train-to-Busan-屍速列車-劇透","date":"2016-09-10T02:59:31.000Z","updated":"2016-09-16T09:25:18.000Z","comments":true,"path":"2016/09/10/Train-to-Busan-屍速列車-劇透/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2016/09/10/Train-to-Busan-屍速列車-劇透/","excerpt":"","text":"評價分數（滿分十分）：⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️⭐️ 地點：台中新時代威秀影城 陪看：豪豪、毛董、柏勳 劇情簡介： 劇情一開始，有位不知名的大叔開著車回家(應該是回家？)，前方有安檢人員消毒說前方洩漏了一點東西，不知名大叔抱怨說不知道這是第幾次了，進入之後，他為了接電話不小心撞死一隻小鹿，不知名大叔下車看了一下，覺得運氣很背的把車開走，結果，小鹿竟然站起來變成喪屍，病毒就這樣開始了… 男主角是一間證券公司的經理，他在電腦上看到某地區魚全部死光，就自私地賣掉所有相關股票，也不管是不是會造成市場動盪，只在乎有沒有賺錢。 男主角回家看到小孩秀安在跟媽媽講電話，今天是秀安的生日，爸爸特地買禮物回去給他，結果沒想到去年生日已經送過同樣的禮物了，秀安想要去釜山找媽媽，男主角擔心秀安的安全，決定一同前往，隔天要出發的時候，遠遠看到火燒的大樓，只是推斷那邊有事情發生，也沒有想太多。 大家上車之後，出現一個臨時衝上車的女生，她已經快要病變成殭屍，列車就這樣關上門了，火車離開之前，車站外已經有人開始大打出手，秀安看到外面有人咬人，想要叫醒男主角，可是男主角卻睡得正甜。秀安跑去上廁所發現一個流浪漢說著：「都死掉了…(碎碎念)」。 這個時候，病變的那個女生咬了要急救她的列車服務員，開始了一連串的有人被咬，男配角尹相華和他的老婆盛景在最後要逃到活人車廂的時候，被男主角關上門，後來秀安大叫是剛剛在廁所看到的大叔，男主角才開門讓他進來。男主角發現，殭屍不會開門，然後看到人才追擊，所以盛景把玻璃門用報紙貼起來，順利的讓殭屍安靜下來。男主角的媽媽剛好打電話來，詢問男主角是否平安，還有抱怨媳婦的不好之後，電話的另一頭就突然聽不到聲音了。 新聞訊息開始大量曝光，網路影片都開始看到殭屍的蹤影，車站到達下一站的時候因為不停使繼續開，外面卻是一陣混亂的殭屍追擊，車站經由管控室通知，決定在大田停車，男主角打電話給認識的人，請他幫忙確認大田的情況，友人指示讓他出站之後右轉會有人接應，一旁的流浪漢也聽到了。 抵達大田要出站之前，所有的軍人全部變成殭屍，追擊上來，只有一些人順利逃走，卻把男主角、尹相華、閔英國分在同個車廂，秀安、盛景、流浪漢、還有一對姐妹的姊姊在同個車廂，後來列車長決定繼續把列車開往釜山，男主角、尹相華、閔英國在和秀安、盛景、金珍熙分別通話之後，決定全副武裝通過數個車廂去找對方，在穿越車廂的時候，男主角又意外發現，如果列車進山洞的話，殭屍會停止追擊，只朝有聲音的地方移動，後來順利的找到秀安、盛景、流浪漢、還有一對姐妹的姊姊。閔英國打電話給金珍熙說要去同個車廂找他們，結果被金珍熙同車廂的自私客運營運長煽動不要讓其他人過來，結果讓尹相華被殭屍咬到，還有那對姐妹的姊姊也因為沒有順利抵達在妹妹面前被殭屍咬死了。男主角一群人雖然順利的到達活人的車廂，卻又被營運長說他們都被感染了煽動群眾，結果被所有人把男主角一群人趕到更前面的車廂。營運長的那個車廂開始吵架，在大家都不注意的時候，剛剛那對姐妹花的妹妹抱怨完姊姊為什麼那麼傻之後，就跑去把殭屍的門打開，營運長那個車廂的人就被咬了。 男主角一行人抵達東大區時，因為前面的列車東倒西歪而停住了，列車長廣播要大家下車跑向其他列車，繼續開往釜山。而營運長的那個車廂，服務員和營運長因為趁混亂中逃進了廁所逃過一劫，卻沒想到營運長為了到下一個列車，推了服務員一把，自己順利逃出。有一台不知道從哪裡來的冒火列車，突然撞上了男主角一群人附近的列車，把男主角一行人分開，棒球隊的閔英國和金珍熙為了破壞一個打不開的門拖了很久，營運長從剛剛的列車跑出之後，剛好也到了他們那個車廂，營運長又拉著金珍熙去撞殭屍，讓金珍熙被殭屍咬到，閔英國傷心地抱著她大哭，金珍熙變成殭屍之後也咬了閔英國一口。營運長繼續往要開往釜山的列車奔跑，結果列車長看到營運長要上來，過去幫他一把，沒想到列車長也被營運長推了一把之後被殭屍咬到，營運長自己順利逃到列車上。 男主角、秀安、盛景、流浪漢因為冒火的列車撞上其他列車，把他們困在列車之間，流浪漢也為了救他們自己犧牲而死，最後男主角帶著秀安、盛景順利地跑上開往釜山的列車，卻發現營運長已經被咬了，男主角為了救秀安和盛景，把營運長推下列車之後，因為自己也被咬，所以也跳下列車自殺。 最後剩下秀安和盛景抵達釜山，山洞的另一頭軍人看到兩個模糊的人走向他們，準備把他們射殺，這時候秀安卻唱起了歌，讓他們順利地被拯救了。 評論： 整部影片劇情緊湊，殭屍也演得很到位，在電影院被很多畫面嚇到，內容除了殭屍，也帶出了一些引人深思的議題，大部分的人都很自私，也正因為這種自私把大家帶入死亡，如果能更信賴彼此，其實很快就能把殭屍控制住了。除了這部電影，其實很多殭屍類別的影集也同樣帶出這樣的議題，人，其實比殭屍還要可怕。聽說要出前傳啦！會解釋到那個上車的女生怎麼來的，為什麼一直說對不起？非常期待十月的前傳。 要去看的時候也是臨時約的，我完全沒有看預告片，還以為是美劇之類的，沒想到韓國的電影已經有這樣的成熟度，也相當令我驚訝。 圖片來源：WellGoUSA","categories":[{"name":"閱讀賞析","slug":"閱讀賞析","permalink":"https://tingsyuanwang.github.io/categories/閱讀賞析/"}],"tags":[],"keywords":[{"name":"閱讀賞析","slug":"閱讀賞析","permalink":"https://tingsyuanwang.github.io/categories/閱讀賞析/"}]},{"title":"Mechanic: Resurrection (極速秒殺2) - 劇透","slug":"Mechanic: Resurrection (極速秒殺2) - 劇透","date":"2016-09-09T02:27:45.000Z","updated":"2016-09-14T02:55:51.000Z","comments":true,"path":"2016/09/09/Mechanic: Resurrection (極速秒殺2) - 劇透/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2016/09/09/Mechanic: Resurrection (極速秒殺2) - 劇透/","excerpt":"","text":"評價分數（滿分十分）：⭐️⭐️⭐️⭐️⭐️⭐️ 地點：台中新時代威秀影城 陪看：豪豪 劇情簡介： 男主角Bishop在一場假死之後住在里約熱內盧，過著愉快的隱居生活，突然有一位女性出現，表示他的老闆要他去殺死三個人，而且這三個人得死得像是意外，結果當然男主角不領情，拍一張她的照片之後逃走。後來，男主角為了躲避追擊逃到泰國的秘密基地，而他的朋友Mae正是男主角守護這個地方的人，男主角在秘密基地調查出襲擊他的人的老闆原來是Crain。 隔天，女主角Gina出現，並向Mae索要急救物品，Mae注意到他裂開的嘴唇和瘀傷的手臂，而那天下午，Mae看到Gina在船上被毆打，所以說服Bishop去拯救女主角，男主角衝到船上警告毆打女主角的男子，結果那名男子完全不理會，所以當然被男主角殺了（看起來像是意外），這時，Mae來到船上把Gina接走，男主角在船上調查發現女主角原來叫做Gina，而且他還為Crain工作，最後，為了隱匿蹤跡，男主角放火把船燒了。 男主角當面質問女主角，發現女主角在柬埔寨的兒童庇護所工作，Crain威脅她的那些小孩，強迫他到男主角所在的位置執行任務。男主角推斷Crain的計畫就是讓女主角在被Crain綁架之前，男主角會深深愛上她，最後男主角就不得不接受任務。男主角注意到Crain的特務正盯緊他，所以就故意牽起Gina的手，而且親密的互動，他告訴Gina其實他和Crain都是被賣到某個黑幫的孤兒，直到他逃離之前，他們都被當作戰士來訓練。最後，男主角順著Crain的計畫，就和女主角發生親密關係，等待明天被綁架。被綁架之後，男主角被帶去Crain面前，告訴他要殺哪三個人。 男主角第一個要殺的是非洲的軍閥Krill，他被關在馬來西亞的監獄裡，男主角把自己弄得跟某個通緝犯很像，順利地進去監獄，男主角在裡面殺死了一位試圖殺死Krill的囚犯取得Krill的信任，最後在他們兩個獨處的時候把他殺死，然後在Crain特工們的幫忙下順利躲過鯊魚的追擊逃出監獄。 男主角第二個要殺的是在澳洲做未成年人口販賣的Cook，男主角在Cook的露天游泳池下面鑽洞，導致游泳池漏水，然後Cook直接就從高樓墜下死亡。 這個時候，Bishop找到女主角想要救他出來，可是失敗了。他只好去殺他的第三個目標保加利亞的軍火商Adams，結果男主角和Adams合作要殺死Crain，男主角讓Adams假死，然後讓Crain以為他已經死掉了，並告訴Crain任務已經完成，結果Crain本來就準備要把男主角殺死，就讓傭兵們衝到Adams的要賽裡面，結果被男主角佈局殺了精光。 男主角回到船上找Crain，結果Crain已經設定了倒數計時的船隻引爆器，男主角把女主角放到水中的逃生艙裡面，自己去找Crain徒手單挑，最後男主角把Crain用鎖鏈鎖在甲板上面，在船爆炸之前往船裡面跑，爆炸之後，女主角被告知已經沒有任何生還者了。 女主角回到柬埔寨繼續工作，當男主角出現的時候，她非常驚訝。最後一幕則是Adams看了監視器，發現男主角從船裡面的另外一個逃生艙走出來，Adams直接把影片刪除，再次偽造男主角的死亡。 評論： 評分給六分，因為劇情完全沒有可看性，可以像你思考的一樣去走，本來還期待會有一些意想不到的情節，不過深深地讓我失望了。不過以畫面和特效來說都非常到位，如果喜歡打鬥的視覺效果，這部電影可以大大的滿足你的需求。 圖片來源：官方預告片","categories":[{"name":"閱讀賞析","slug":"閱讀賞析","permalink":"https://tingsyuanwang.github.io/categories/閱讀賞析/"}],"tags":[],"keywords":[{"name":"閱讀賞析","slug":"閱讀賞析","permalink":"https://tingsyuanwang.github.io/categories/閱讀賞析/"}]},{"title":"Hello! JS! - 從零開始的React Native開發","slug":"Hello-JS-從零開始的React-Native開發","date":"2016-09-06T02:48:13.000Z","updated":"2016-09-09T03:10:40.000Z","comments":true,"path":"2016/09/06/Hello-JS-從零開始的React-Native開發/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2016/09/06/Hello-JS-從零開始的React-Native開發/","excerpt":"","text":"“If I have seen further it is by standing on the shoulders of giants.&quot; -Issac Newton 「如果說我看得比別人遠，那是因為我站在巨人的肩上。」 – 牛頓 序 2016年暑假，我在創科資訊(Trunk Studio)學習JS的部署與開發，在上課之前，我只學過html、CSS、jQuery，還有一些很偷懶的黑魔法，像是Bootstrap、WordPress theme。然而，很早之前就聽過JS的開發才是主流，苦於不知道如何開始，這次很開心能來上這樣的課程，除了認識很多很棒的人(未來有機會的合作夥伴們)，當然最重要的是能站在一堆超級講師們的肩膀上學習，我想用獲益良多來形容著實是不夠形容這種程式能力的提升，只可會意，不可言喻。 以下記錄我學習到的東西： Atom (本來用sublime的，除了Atom很漂亮之外，外掛的使用也更為簡單) Git Command (本來使用Source Tree，後來發現原來Command Line這麼簡單，神秘黑魔法啊！) Git Pages &amp; Heroku (免費的網站實作好地方) Markdown語法 (必學的語法，簡單且實用) Hexo (超級的棒網誌框架) TDD (目前還不太會用，不過有略懂略懂) Facebook API (串接Facebook的服務) sails.js (使用過express的框架，實作上蠻類似的，具體上有什麼不同，還需要我多多練習) Scss (有效率且大架構的CSS部署就要用上它囉！) Babel (ES6、ES5的轉換超好用) React (JavaScript的函式庫，100%的Client Rendering) React Native (可以同時實作iOS和Android App，而且有很多模組可以使用，還有很多Documentation要閱讀) Hexo 特別提到Hexo就是因為目前這個網站是用Hexo開發的，佈景主題採用ppoffice的Hueman，從Header到Footer，我都嘗試去修改，反覆的trial之後，讓我更了解Hexo的整個架構，很有趣的是，一開始我還不知道要把檔案上傳到master分支，直接Deploy上去gh-pages，結果檔案不見了，還以為直接git clone下來可以使用了，才驚覺原來檔案不一樣，深深地學了一課。 React Native React Native最吸引人不外乎就是可以同時開發iOS和Android App，也正是吸引我來上這個課程的原因，過程中，講師都有很耐心地講解，重要的觀念也會重複提醒，雖然目前還沒有實際作品可以上線，最大的問題在於自己能力仍然需要提升，但是這樣前導式的教學相信未來的開發有很大的幫助，過程中，我們也實作了一些簡單的功能，發掘React Native的無限可能，也讓我正式確定它就是我想學的JS框架。 後記 八週超級充實的課程，我都沒有錯過！太棒了！ 很高興認識Kent、Max、一村、鄒大大、黑盒子…還有一堆叫不出名字但是卻很Nice的人（請原諒我的金魚腦XD） 最後的結訓證書！！！","categories":[{"name":"生活記事","slug":"生活記事","permalink":"https://tingsyuanwang.github.io/categories/生活記事/"}],"tags":[],"keywords":[{"name":"生活記事","slug":"生活記事","permalink":"https://tingsyuanwang.github.io/categories/生活記事/"}]},{"title":"華碩Win8電腦USB開機","slug":"華碩Win8電腦USB開機","date":"2016-09-03T19:30:18.000Z","updated":"2016-09-13T12:33:56.000Z","comments":true,"path":"2016/09/04/華碩Win8電腦USB開機/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2016/09/04/華碩Win8電腦USB開機/","excerpt":"","text":"(1) 開機連按Del進入BIOS之後，切換到「Security」選單，將「Secure Boot Control」設定成「Disabled」，重新開機。 (2) 重新開機後繼續連按Del進入BIOS，切換到「Boot」選單，將「Lunch CSM」設定成「Enabled」，重新開機。 (3) 重新開機後繼續連按Del進入BIOS，切換到「Exit」選單，就可以找到USB進行重灌囉！","categories":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}],"tags":[],"keywords":[{"name":"技術分享","slug":"技術分享","permalink":"https://tingsyuanwang.github.io/categories/技術分享/"}]},{"title":"The connection of people in the age of information","slug":"The-connection-of-people-in-the-age-of-information","date":"2016-09-03T08:40:08.000Z","updated":"2016-09-14T05:36:34.000Z","comments":true,"path":"2016/09/03/The-connection-of-people-in-the-age-of-information/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2016/09/03/The-connection-of-people-in-the-age-of-information/","excerpt":"","text":"In the past, people were separated by the distant ocean, they got each others’ message need a long time through letters. Nowadays, we just need to sign in the account through internet, we can chat with each other. Not only that, we can use video to see each other as truly communication. It’s much more convenient than before, but this feature doesn’t make the interpersonal networks closely than before. We increased our quality of life, but also decreased our humanity. I’m so curious what happened in nowadays world? Surfing on internet and open Facebook, a piece of photos and so many short words which are expressing someone’s feelings. You can see all of current situations of your friends and relatives. Even you have had a friend which lost contact for ten years, you still can use the various search method and “catch the line” with that friend. If you are lucky, you can contact with overseas people through these convenient networks and become the friends. Furthermore, you will be the member of internationalization. All steps sound like just need one finger. It seems like you caught a mouse and you caught the corner of interpersonal network. All of connections naturally become the “object of hand”, you can play it as you want between the hands. However, rapid transmission of information also caused rapid interpersonal conversion. I think perhaps it’s the attitude of “the most beautiful star is that one you can’t pick it.”. Something was hard-earned in the past, but now you can easily get it. That star which already holds on your hand is not shiny anymore and it will be discarded in the end. Moreover, people who had bad idea use internet to cheat some good people. In the ginormous networks, someone is pretending as your friends and family. You can’t recognize and verify, how to protect yourself? More and more frauds and criminal events make people stopping use internet to communicate with others because they don’t want to be the next victims. And some people talk very happy on internet, but they are speechless in the reality. Comparing the warm and lively talk in virtual with the silent in reality, this phenomenon make me unable to stop sighing and sobbing. People addicted with online unreal world and ignored people and things they should concern about in reality. In addition, people are growing further apart in reality and try to seek the new warm from internet, the vicious cycles trigger again and again and difficult to save. In conclusion, although convenient networks shorten the distance between people, but the distance of heart is far away than before. We don’t have truly personal experience in many things, many things are hard to understand if you just rely on touching the cold screen. For me, instead of waiting people in front of computer all day, I would rather to turn around to talk someone who was waiting for my reply. Internet is convenient and just for moderate using. After all, something can tighten interpersonal networks is your hand but not the little mouse you hold on.","categories":[{"name":"英文寫作","slug":"英文寫作","permalink":"https://tingsyuanwang.github.io/categories/英文寫作/"}],"tags":[],"keywords":[{"name":"英文寫作","slug":"英文寫作","permalink":"https://tingsyuanwang.github.io/categories/英文寫作/"}]},{"title":"HelloJS專案開發提議","slug":"HelloJS專案開發提議","date":"2016-08-30T12:55:48.000Z","updated":"2016-09-06T21:42:52.000Z","comments":true,"path":"2016/08/30/HelloJS專案開發提議/","link":"","permalink":"https://tingsyuanwang.github.io/blogs/2016/08/30/HelloJS專案開發提議/","excerpt":"","text":"(1) PokeHunt 最近看到新聞，很多人玩寶可夢掉下懸崖、誤觸地雷區、甚至是在路上被車撞，我覺得我們是不是可以做一個偵測系統？大家有什麼方法可以提供一下？目前暫時只是概念性的解決問題，如果大家決定做這個就來討論一下細節。 (2) 翻轉文學聊天室 在我大學時期有做一個翻轉文學的網站，我想說來做一點延伸，就是做聊天室、有全體的，還有同學個別對個別的，還有像是github issue一樣的討論區塊，這個我目前有些規劃，如果大家對即時條天有興趣我們可以做這個，這個的架構我就比較清楚要怎麼做，較好上手。 (3) 中草藥不良反應通報系統 這是目前我在中國醫藥大學想做的專案，現在有很多中草藥的通報系統，但是目前卻沒有手機板的，而且填寫複雜，架構基本上已經定案，因為他有固定格式。 因為我們學校跟衛生福利部的關係非常好，如果這個App有開發完成，我會盡力爭取上線，未來如果順利上線，可以跟政府申請一筆經費，看能不能跟大家來做大的？","categories":[{"name":"生活記事","slug":"生活記事","permalink":"https://tingsyuanwang.github.io/categories/生活記事/"}],"tags":[],"keywords":[{"name":"生活記事","slug":"生活記事","permalink":"https://tingsyuanwang.github.io/categories/生活記事/"}]}]}